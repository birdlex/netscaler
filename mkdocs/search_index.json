{
    "docs": [
        {
            "location": "/", 
            "text": "NetScaler REST APIs - NITRO\n\n\nThe NetScaler NITRO protocol allows you to configure and monitor the NetScaler appliance programmatically by using Representational State Transfer (REST) interfaces. Therefore, NITRO applications can be developed in any programming language. Additionally, for applications that must be developed in Java or .NET or Python, NITRO APIs are exposed through relevant libraries that are packaged as separate Software Development Kits (SDKs).\n\n\nHow NITRO Works\n\n\nThe NITRO infrastructure consists of a client application and the NITRO Web service running on a NetScaler appliance. The communication between the client application and the NITRO web service is based on REST architecture using HTTP or HTTPS.\n\n\nA NITRO request is executed as follows:\n\n\n\n\nThe client application sends REST request message to the NITRO web service. When using the SDKs, an API call is translated into the appropriate REST request message.\n\n\nThe web service processes the REST request message.\n\n\nThe NITRO web service returns the corresponding REST response message to the client application. When using the SDKs, the REST response message is translated into the appropriate response for the API call.\n\n\n\n\nTo minimize traffic on the NetScaler network, you retrieve the whole state of a resource from the server, make modifications to the state of the resource locally, and then upload it back to the server in one network transaction. For example, to update a load balancing virtual server, you must retrieve the object, update the properties, and then upload the changed object in a single transaction.\n\n\nNote.\n Local operations on a resource (changing its properties) do not affect its state on the server until the state of the object is explicitly uploaded.\n\n\nNITRO APIs are synchronous in nature. This means that the client application waits for a response from the NITRO web service before executing another NITRO API.\n\n\nREST Web Services\n\n\nREST (REpresentational State Transfer) is an architectural style based on simple HTTP requests and responses between the client and the server. REST is used to query or change the state of objects on the server side. In REST, the server side is modeled as a set of entities where each entity is identified by a unique URL.\n\n\nThe general format for NITRO URLs is as follows:\n\n\n\n\n\n\nFor configurations. http://\nnetscaler-ip-address\n/nitro/v1/config/\nresource-type\n\n\n\n\n\n\nFor retrieving statistics. http://\nnetscaler-ip-address\n/nitro/v1/stat/\nresource-type\n\n\n\n\n\n\nFor example, for a load balancing virtual server, \nresource-type\n can be replaced by lbvserver.\n\n\nSome points to remember:\n\n\n\n\nIn addition to the CRUD operations (Create, Read, Update, and Delete), resources (such as lbvserver) can support other operations or actions. These operations use the HTTP POST method, with the URL specifying the operation to be performed and the request body specifying the parameters for that operation.\n\n\nAll NITRO operations are logged in the /var/log/nitro.log file on the NetScaler appliance.\n\n\n\n\nFor more information on the REST objects and the usage, see the documentation provided in the \nNITRO_SDK_HOME\n/index.html file.", 
            "title": "Overview"
        }, 
        {
            "location": "/#netscaler-rest-apis-nitro", 
            "text": "The NetScaler NITRO protocol allows you to configure and monitor the NetScaler appliance programmatically by using Representational State Transfer (REST) interfaces. Therefore, NITRO applications can be developed in any programming language. Additionally, for applications that must be developed in Java or .NET or Python, NITRO APIs are exposed through relevant libraries that are packaged as separate Software Development Kits (SDKs).  How NITRO Works  The NITRO infrastructure consists of a client application and the NITRO Web service running on a NetScaler appliance. The communication between the client application and the NITRO web service is based on REST architecture using HTTP or HTTPS.  A NITRO request is executed as follows:   The client application sends REST request message to the NITRO web service. When using the SDKs, an API call is translated into the appropriate REST request message.  The web service processes the REST request message.  The NITRO web service returns the corresponding REST response message to the client application. When using the SDKs, the REST response message is translated into the appropriate response for the API call.   To minimize traffic on the NetScaler network, you retrieve the whole state of a resource from the server, make modifications to the state of the resource locally, and then upload it back to the server in one network transaction. For example, to update a load balancing virtual server, you must retrieve the object, update the properties, and then upload the changed object in a single transaction.  Note.  Local operations on a resource (changing its properties) do not affect its state on the server until the state of the object is explicitly uploaded.  NITRO APIs are synchronous in nature. This means that the client application waits for a response from the NITRO web service before executing another NITRO API.  REST Web Services  REST (REpresentational State Transfer) is an architectural style based on simple HTTP requests and responses between the client and the server. REST is used to query or change the state of objects on the server side. In REST, the server side is modeled as a set of entities where each entity is identified by a unique URL.  The general format for NITRO URLs is as follows:    For configurations. http:// netscaler-ip-address /nitro/v1/config/ resource-type    For retrieving statistics. http:// netscaler-ip-address /nitro/v1/stat/ resource-type    For example, for a load balancing virtual server,  resource-type  can be replaced by lbvserver.  Some points to remember:   In addition to the CRUD operations (Create, Read, Update, and Delete), resources (such as lbvserver) can support other operations or actions. These operations use the HTTP POST method, with the URL specifying the operation to be performed and the request body specifying the parameters for that operation.  All NITRO operations are logged in the /var/log/nitro.log file on the NetScaler appliance.   For more information on the REST objects and the usage, see the documentation provided in the  NITRO_SDK_HOME /index.html file.", 
            "title": "NetScaler REST APIs - NITRO"
        }, 
        {
            "location": "/before-you-begin/", 
            "text": "Before you Begin\n\n\nThis section covers the prerequisites for using the NITRO APIs, NITRO changes across releases, and limitations.\n\n\nPrerequisites\n\n\nTo use NITRO, you must have a basic understanding of the NetScaler appliance and you must make sure that the client application has one of the following:\n\n\n\n\n\n\nAccess to a NetScaler appliance.\n\n\n\n\n\n\nTo use REST APIs through HTTP, you must have a system to generate HTTP or HTTPS requests (payload in JSON format) to the NetScaler appliance. You can use any programming language or tool.\n\n\n\n\n\n\nFor Java clients, you must have a system where Java Development Kit (JDK) 1.5 or later is available. The JDK can be downloaded from http://www.oracle.com/technetwork/java/javase/downloads/index.html.\n\n\nThe NITRO library (available in \\\n/lib) must be installed on the client path. For installation instructions, read the \\\n/README.txt file.\n\n\n\n\n\n\nFor .NET clients, you must have a system with .NET framework 3.5 or later installed. The .NET framework can be downloaded from http://www.microsoft.com/downloads/en/default.aspx. \n\n\nThe NITRO library (available in \\\n/lib) must be installed on the client path. For installation instructions, read the \\\n/README.txt file.\n\n\n\n\n\n\nFor Python clients, you must have a system with Python 2.7 or above version.\n\n\nThe Python SDK is available from NetScaler 10.5 onwards. The NITRO library (available in \\\n/lib) must be installed on the client path. For installation instructions, read the \\\n/README.txt file.\n\n\n\n\n\n\nObtaining the NITRO SDK Package\n\n\nThe NITRO package is available as a tar file on the Downloads page of the configuration utility of the NetScaler appliance. You must download and untar the file to a folder on your local system. This folder is referred to as \\\n in this documentation.\n\n\nThe folder contains the NITRO libraries in the lib subfolder. The libraries must be added to the client application classpath to access NITRO functionality. The \\\n folder also provides samples and documentation that can help you understand the NITRO SDK.\n\n\nNITRO Changes Across Releases\n\n\nSome NITRO API have changed across releases. This topic details information which can help you avoid compatibility issues in your application. The changes are categorized as:\n\n\nChanges Made from 11.1-53.3 -\n 12.0-48.x\n\n\nChanges across NITRO flavors\n\n\nThe NITRO changes that were made in NetScaler 12.0-48.x when compared with NetScaler 11.1-53.3.\n\n\n\n\n\n\n\n\n\n\nType of change\n\n\n\n\n\n\nResource\n\n\n\n\n\n\nMethod\n\n\n\n\n\n\nAttribute\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResource removed\n\n\n\n\n\n\nvpath, vpathparam\n\n\n\n\n\n\nALL\n\n\n\n\n\n\nAll resources and parameters related to vpath feature.\n \n\n\n\n\n\n\n\n\n\n\nAttribute removed\n \n\n\n\n\n\n\nl3param\n \n\n\n\n\n\n\n-\n\n\n\n\n\n\nIcmperrgenerate\n\n\nThis attribute is related to vpath for which the support is removed in 12.0.\n\n\n\n\n\n\n\n\n\n\nAttribute removed \n \n\n\n\n\n\n\nqos_stats\n \n\n\n\n\n\n\n-\n\n\n\n\n\n\nipcpe2qosfailedrate\n\n\n\n\nNote\n: Some of the counters under this resource are removed. For new definitions, see\nhttp://docs.citrix.com/en-us/netscaler/12/nitro-api/nitro-rest/api-reference/statistics/qos/qos.html\n\n\n\n\n\n\n\n\n\n\nAttribute removed \n \n\n\n\n\n\n\nvrid_interface_binding\n\n\n\n\n\n\n-\n\n\n\n\n\n\ntrackifnum\n\n\nNew resources (vrid_trackifnum_binding and vrid6_trackifnum_binding) are introduced to deal with track interfaces.\n \n\n\n\n\n\n\n\n\n\n\nAttribute removed \n \n\n\n\n\n\n\nvrid_interface_binding\n \n\n\n\n\n\n\n-\n\n\n\n\n\n\nifaces is replaced with ifnum.\n\n\nPreviously, ifaces parameter was used in the response and ifnum was used in the input.\n Now both POST and GET are consistent and use the same attribute name.\n \n\n\n\n\n\n\n\n\n\n\nAttribute removed \n \n\n\n\n\n\n\nsslprofile_sslciphersuite_binding\n \n\n\n\n\n\n\n-\n\n\n\n\n\n\ncipheraliasname\n\n\ncipheraliasname is a redundant parameter. The required information is provided by ciphername parameter.\n\n\n\n\n\n\n\n\n\n\nAttribute removed \n \n\n\n\n\n\n\nnslicense\n \n\n\n\n\n\n\n-\n\n\n\n\n\n\nIspooledlicensing\n\n\nIspooledlicensing Is replaced with a new parameter licensingmode which returns if the license of \"Local\"/\"Pooled\"/\"CICO\" type.\n\n\n\n\n\n\n\n\n\n\nAttribute removed \n \n\n\n\n\n\n\nlbmonitor_sslcertkey_binding\n \n\n\n\n\n\n\nDELETE\n\n\n\n\n\n\ncrlcheck\n \n\n\n\n\n\n\n\n\n\n\n\nChanges specific to NITRO SDKs\n\n\nThe SDK-specific changes that were made in NetScaler 12.0-48.x when compared with NetScaler 11.1-53.3.\n\n\n\n\n\n\n\n\n\n\nType of change\n\n\n\n\n\n\nClass\n\n\n\n\n\n\nMethod/Attribute\n\n\n\n\n\n\nRemarks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttribute type changed\n\n\n\n\n\n\npcpmap\n\n\n\n\n\n\npcpprotocol\n\n\n\n\n\n\nDatatype changed from double to string.\n\n\n\n\n\n\n\n\n\n\nClass removed \n \n\n\n\n\n\n\nmediaclassification_stats\n\n\n\n\n\n\n-\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nMethod removed \n \n\n\n\n\n\n\nvxlan_iptunnel_binding\n \n\n\n\n\n\n\nadd(vxlan_iptunnel_binding obj, nitro_service session)\n\n\ndelete(vxlan_iptunnel_binding obj, nitro_service session)\n\n\n\n\n\n\nFeature is deprecated, use bridgetable with broadcast mac option.\n \n\n\n\n\n\n\n\n\n\n\nMethod removed \n \n\n\n\n\n\n\ninatsession_stats\n \n\n\n\n\n\n\nget(inatsession obj, nitro_service session)\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\nChanges Made from 10.5 57.x -\n 11.0\n\n\nAll NITRO Flavors - Changes from 10.5 57.x to 11.0\n\n\nThe NITRO changes that were made in NetScaler 11.0 when compared with NetScaler 10.5 Build 57.x.\n\n\n\n\n\n\n\n\n\n\nType of Change\n\n\n\n\n\n\nResource\n\n\n\n\n\n\nAttribute\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\nnstrace\n\n\n\n\n\n\ndoruntimemerge\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\nnstrace\n\n\n\n\n\n\ntcpdump\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\ncacheobject\n\n\n\n\n\n\nforce\n\n\n\n\n\n\n\n\n\n\n\nNITRO SDKs - Changes from 10.5 57.x to 11.0\n\n\nThe SDK-specific changes that were made in NetScaler 11.0 when compared with NetScaler 10.5 Build 57.x.\n\n\n\n\n\n\n\n\n\n\nType of Change\n\n\n\n\n\n\nClass\n\n\n\n\n\n\nMethod\n\n\n\n\n\n\nReplace with\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttribute missing in method\n\n\n\n\n\n\ncacheobject\n\n\n\n\n\n\n(base_response) flush(cacheobject obj, nitro_service session)\n\n\n'force' attribute missing in this method.\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nMethod missing\n\n\n\n\n\n\nclustersync\n\n\n\n\n\n\n(base_response) Force(clustersync obj, nitro_service session)\n\n\n\n\n\n\n(base_response) Force(nitro_service session)\n\n\n\n\n\n\n\n\n\n\nMethod missing\n\n\n\n\n\n\nshutdown\n\n\n\n\n\n\n(base_response) Shutdown(shutdown obj, nitro_service session)\n\n\n\n\n\n\n(base_response) Shutdown(nitro_service session)\n\n\n\n\n\n\n\n\n\n\nMethod missing\n\n\n\n\n\n\nsystemfile\n\n\n\n\n\n\n(systemfile) get(systemfile obj, nitro_service session)\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nMethod missing\n\n\n\n\n\n\nsslfips\n\n\n\n\n\n\n(base_response) reset(sslfips obj, nitro_service session)\n\n\n\n\n\n\n(base_response) reset(nitro_service session)\n\n\n\n\n\n\n\n\n\n\n\nChanges made from 9.3 -\n 10.1/10.5\n\n\nNote.\n No changes are introduced from NetScaler 10.1 to NetScaler 10.5. Therefore, you should not face any compatibility issues when migrating from NetScaler 10.1 to 10.5.\n\n\nAll NITRO Flavors - Changes from 9.3 to 10.1/10.5\n\n\nThe NITRO changes that were made in NetScaler 10.1/10.5 when compared with NetScaler 9.3.\n\n\n\n\n\n\n\n\n\n\nType of Change\n\n\n\n\n\n\nResource\n\n\n\n\n\n\nMethod\n\n\n\n\n\n\nAttribute\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nResource removed\n\n\n\n\n\n\nlbmonitor_lbmetrictable_binding\n\n\nReplaced with the resource 'lbmonitor_metric_binding'.\n\n\n\n\n\n\n-\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nMethod removed\n\n\n\n\n\n\nvserver\n\n\n\n\n\n\nGET\n\n\nPerform the GET operation on specific virtual server types such as lb/cr/cs.\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nMethod removed\n\n\n\n\n\n\nfilterpolicy\n\n\n\n\n\n\nPOST with 'action=unset'\n\n\nThis method is removed as unsetting the attributes('action') of a policy makes it invalid.\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nMethod removed\n\n\n\n\n\n\nauditsyslogpolicy\n\n\n\n\n\n\nPOST with 'action=unset'\n\n\nThis method is removed as unsetting the attributes('action') of a policy makes it invalid.\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nMethod removed\n\n\n\n\n\n\nauditnslogpolicy\n\n\n\n\n\n\nPOST with 'action=unset'\n\n\nThis method is removed as unsetting the attributes('action') of a policy makes it invalid.\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nMethod removed\n\n\n\n\n\n\nauthorizationpolicy\n\n\n\n\n\n\nPOST with 'action=unset'\n\n\nThis method is removed as unsetting the attributes('action') of a policy makes it invalid.\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nReturn-type changed\n\n\n\n\n\n\nsnmpengineid\n\n\n\n\n\n\nGET\n\n\nReturn type changed to an array.\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nReturn-type changed\n\n\n\n\n\n\nnshostname\n\n\n\n\n\n\nGET\n\n\nReturn type changed to an array.\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nAttribute-type changed\n\n\n\n\n\n\nappfwpolicy_lbvserver_binding\n\n\n\n\n\n\n-\n\n\n\n\n\n\nactivepolicy\n\n\nData type changed from Boolean to Integer.\n\n\n\n\n\n\n\n\n\n\nAttribute-type changed\n\n\n\n\n\n\nappfwpolicy_appfwglobal_binding\n\n\n\n\n\n\n-\n\n\n\n\n\n\nactivepolicy\n\n\nData type changed from Boolean to Integer.\n\n\n\n\n\n\n\n\n\n\nAttribute-type changed\n\n\n\n\n\n\nvlan\n\n\n\n\n\n\n-\n\n\n\n\n\n\nportbitmap\n\n\nData type changed from uint to ulong.\n\n\n\n\n\n\n\n\n\n\nAttribute-type changed\n\n\n\n\n\n\nvlan\n\n\n\n\n\n\n-\n\n\n\n\n\n\ntagbitmap\n\n\nData type changed from uint to ulong.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\npolicypatset_pattern_binding\n\n\n\n\n\n\n-\n\n\n\n\n\n\nindextype\n\n\nThis attribute is moved to 'policypatset' resource as this attribute is applicable at patset level.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\nsystem_stats\n\n\n\n\n\n\n-\n\n\n\n\n\n\npowersupply1failure\n\n\nReplaced with 'powersupply1status'.\n\n\nNote:\nChange is applicable from NetScaler 9.3 Build 65.8.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\nsystem_stats\n\n\n\n\n\n\n-\n\n\n\n\n\n\npowersupply2failure\n\n\nReplaced with 'powersupply2status'.\n\n\nNote:\nChange is applicable from NetScaler 9.3 Build 65.8.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\nserver_servicegroup_binding\n\n\n\n\n\n\n-\n\n\n\n\n\n\nservicetype\n\n\nReplaced with 'svctype'.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\nserver_service_binding\n\n\n\n\n\n\n-\n\n\n\n\n\n\nservicetype\n\n\nReplaced with 'svctype'.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\ncrvserver\n\n\n\n\n\n\n-\n\n\n\n\n\n\nhits\n\n\nHits are calculated per policy binding hence moved this parameter to binding resources.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\ncrvserver\n\n\n\n\n\n\n-\n\n\n\n\n\n\ndstvsvr\n\n\nReplaced with 'destinationvserver'.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\ncrvserver\n\n\n\n\n\n\n-\n\n\n\n\n\n\ndestvserver\n\n\nReplaced with 'domain'.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\ncrvserver\n\n\n\n\n\n\n-\n\n\n\n\n\n\ndnsvserver\n\n\nReplaced with 'dnsvservername'.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\nappflowpolicylabel\n\n\n\n\n\n\n-\n\n\n\n\n\n\ntype\n\n\nReplaced with 'policylabeltype'.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\nsslcipher\n\n\n\n\n\n\n-\n\n\n\n\n\n\nciphgrpals\n\n\nReplaced with 'ciphergroupname'.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\ncsvserver_cspolicy_binding\n\n\n\n\n\n\n-\n\n\n\n\n\n\ntargetvserver\n\n\nReplaced with 'targetlbvserver'.\n\n\nNote:\nThis change is applicable for the 'sslcipher_*_binding' resources also.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\ncsvserver_cspolicy_binding\n\n\n\n\n\n\n-\n\n\n\n\n\n\ntargetvserver\n\n\nReplaced with 'targetlbvserver'.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\nrewriteaction\n\n\n\n\n\n\n-\n\n\n\n\n\n\nallow_unsafe_pi1, allow_unsafe_pi\n\n\nReplaced with 'bypassSafetyCheck'.\n\n\n\n\n\n\n\n\n\n\nAttribute removed\n\n\n\n\n\n\nnsconfig\n\n\n\n\n\n\n-\n\n\n\n\n\n\nnwfwmode\n\n\nMarked as a hidden attribute.\n\n\n\n\n\n\n\n\n\n\n\nNITRO SDKs - Changes from 9.3 to 10.1/10.5\n\n\nThe SDK-specific changes that were made in NetScaler 10.1/10.5 when compared with NetScaler 9.3.\n\n\n\n\n\n\n\n\n\n\nType of Change\n\n\n\n\n\n\nClass\n\n\n\n\n\n\nMethod\n\n\n\n\n\n\nReplace with\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClass removed\n\n\n\n\n\n\nRouterbgp\n\n\n\n\n\n\n-\n\n\n\n\n\n\nThis class is removed as all router configurations are deprecated in 9.2.\n\n\n\n\n\n\n\n\n\n\nMethod signature changed\n\n\n\n\n\n\ndnsptrrec\n\n\n\n\n\n\nget(dnsptrrec obj, nitro_service session)\n\n\n\n\n\n\nget(nitro_service session, String reversedomain)\n\n\n\n\n\n\n\n\n\n\nMethod signature changed\n\n\n\n\n\n\ndnsaddrec\n\n\n\n\n\n\nget(dnsaddrec obj, nitro_service session)\n\n\n\n\n\n\nget(nitro_service session, String hostname)\n\n\n\n\n\n\n\n\n\n\nMethod signature changed\n\n\n\n\n\n\ndnsnsrec\n\n\n\n\n\n\nget(dnsnsrec obj, nitro_service session)\n\n\n\n\n\n\nget(nitro_service session, String domain)\n\n\n\n\n\n\n\n\n\n\nMethod signature changed\n\n\n\n\n\n\nsnmpengineid\n\n\n\n\n\n\nunset(nitro_service session, String[] args)\n\n\n\n\n\n\nunset(nitro_service session, snmpengineid resource, String[] args)\n\n\n\n\n\n\n\n\n\n\nMethod signature changed\n\n\n\n\n\n\narp\n\n\n\n\n\n\narp.get(nitro_service session, String ipaddress)\n\n\n\n\n\n\narp.get(nitro_service session, arp resource)\n\n\n\n\n\n\n\n\n\n\nMethod signature changed\n\n\n\n\n\n\nnsip\n\n\n\n\n\n\nget(nitro_service session, String ipaddress)\n\n\n\n\n\n\nget(nitro_service client, nsip resource)\n\n\n\n\n\n\n\n\n\n\nMethod signature changed\n\n\n\n\n\n\nnsip6\n\n\n\n\n\n\nget(nitro_service session, String ipv6address)\n\n\n\n\n\n\nget(nitro_service session, nsip6 resource)\n\n\n\n\n\n\n\n\n\n\nMethod signature changed\n\n\n\n\n\n\ndnsmxrec\n\n\n\n\n\n\ndnsmxrec.get(dnsmxrec obj, nitro_service session)\n\n\n\n\n\n\ndnsmxrec[] get(nitro_service service, dnsmxrec_args args)\n\n\n\n\n\n\n\n\n\n\nMethod Missing\n\n\n\n\n\n\nauthenticationnegotiatepolicy\n\n\n\n\n\n\n(base_response) unset(nitro_service session, String[] args, String name)' is missing in\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nMethod missing\n\n\n\n\n\n\nauthenticationnegotiatepolicy\n\n\n\n\n\n\n(base_response) unset(authenticationnegotiatepolicy obj, nitro_service session, String[] args)\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\nAttribute missing in method\n\n\n\n\n\n\nnsconfig\n\n\n\n\n\n\n(base_response) update(nsconfig obj, nitro_service session)\n\n\n'nwfwmode' attribute is missing in this method.\n\n\n\n\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\nLimitations\n\n\nThe section lists the NetScaler operations that cannot be performed by using NITRO API.\n\n\nNote:\n These operations can be performed on the NetScaler CLI or the GUI.\n\n\n\n\ninstall API (supported from NetScaler 11.1 onwards)\ndiff API on nsconfig resource (supported from NetScaler 10.5 onwards)\n\n\nUI-internal APIs (update, unset, and get)\n\n\nshow ns info\n\n\nshutdown\n\n\nApplication firewall API\n\n\nimportwsdl\n\n\nimportcustom\n\n\nimportxmlschema\n\n\nimportxmlerrorpage\n\n\nimporthtmlerrorpage\n\n\nrmcustom\n\n\nrmxmlschema\n\n\nrmxmlerrorpage\n\n\nrmhtmlerrorpage\n\n\nCLI-specific API\n\n\nstart nstrace/stop nstrace/show nstrace\n\n\nscp\n\n\nconfigaudit\n\n\nshow defaults\n\n\nshow permission\n\n\nbatch\n\n\nsource", 
            "title": "Before you begin"
        }, 
        {
            "location": "/before-you-begin/#before-you-begin", 
            "text": "This section covers the prerequisites for using the NITRO APIs, NITRO changes across releases, and limitations.", 
            "title": "Before you Begin"
        }, 
        {
            "location": "/before-you-begin/#prerequisites", 
            "text": "To use NITRO, you must have a basic understanding of the NetScaler appliance and you must make sure that the client application has one of the following:    Access to a NetScaler appliance.    To use REST APIs through HTTP, you must have a system to generate HTTP or HTTPS requests (payload in JSON format) to the NetScaler appliance. You can use any programming language or tool.    For Java clients, you must have a system where Java Development Kit (JDK) 1.5 or later is available. The JDK can be downloaded from http://www.oracle.com/technetwork/java/javase/downloads/index.html.  The NITRO library (available in \\ /lib) must be installed on the client path. For installation instructions, read the \\ /README.txt file.    For .NET clients, you must have a system with .NET framework 3.5 or later installed. The .NET framework can be downloaded from http://www.microsoft.com/downloads/en/default.aspx.   The NITRO library (available in \\ /lib) must be installed on the client path. For installation instructions, read the \\ /README.txt file.    For Python clients, you must have a system with Python 2.7 or above version.  The Python SDK is available from NetScaler 10.5 onwards. The NITRO library (available in \\ /lib) must be installed on the client path. For installation instructions, read the \\ /README.txt file.    Obtaining the NITRO SDK Package  The NITRO package is available as a tar file on the Downloads page of the configuration utility of the NetScaler appliance. You must download and untar the file to a folder on your local system. This folder is referred to as \\  in this documentation.  The folder contains the NITRO libraries in the lib subfolder. The libraries must be added to the client application classpath to access NITRO functionality. The \\  folder also provides samples and documentation that can help you understand the NITRO SDK.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/before-you-begin/#nitro-changes-across-releases", 
            "text": "Some NITRO API have changed across releases. This topic details information which can help you avoid compatibility issues in your application. The changes are categorized as:", 
            "title": "NITRO Changes Across Releases"
        }, 
        {
            "location": "/before-you-begin/#changes-made-from-111-533-120-48x", 
            "text": "Changes across NITRO flavors  The NITRO changes that were made in NetScaler 12.0-48.x when compared with NetScaler 11.1-53.3.      Type of change    Resource    Method    Attribute        Resource removed    vpath, vpathparam    ALL    All resources and parameters related to vpath feature.        Attribute removed      l3param      -    Icmperrgenerate  This attribute is related to vpath for which the support is removed in 12.0.      Attribute removed       qos_stats      -    ipcpe2qosfailedrate   Note : Some of the counters under this resource are removed. For new definitions, see http://docs.citrix.com/en-us/netscaler/12/nitro-api/nitro-rest/api-reference/statistics/qos/qos.html      Attribute removed       vrid_interface_binding    -    trackifnum  New resources (vrid_trackifnum_binding and vrid6_trackifnum_binding) are introduced to deal with track interfaces.        Attribute removed       vrid_interface_binding      -    ifaces is replaced with ifnum.  Previously, ifaces parameter was used in the response and ifnum was used in the input.  Now both POST and GET are consistent and use the same attribute name.        Attribute removed       sslprofile_sslciphersuite_binding      -    cipheraliasname  cipheraliasname is a redundant parameter. The required information is provided by ciphername parameter.      Attribute removed       nslicense      -    Ispooledlicensing  Ispooledlicensing Is replaced with a new parameter licensingmode which returns if the license of \"Local\"/\"Pooled\"/\"CICO\" type.      Attribute removed       lbmonitor_sslcertkey_binding      DELETE    crlcheck        Changes specific to NITRO SDKs  The SDK-specific changes that were made in NetScaler 12.0-48.x when compared with NetScaler 11.1-53.3.      Type of change    Class    Method/Attribute    Remarks        Attribute type changed    pcpmap    pcpprotocol    Datatype changed from double to string.      Class removed       mediaclassification_stats    -    -      Method removed       vxlan_iptunnel_binding      add(vxlan_iptunnel_binding obj, nitro_service session)  delete(vxlan_iptunnel_binding obj, nitro_service session)    Feature is deprecated, use bridgetable with broadcast mac option.        Method removed       inatsession_stats      get(inatsession obj, nitro_service session)    -", 
            "title": "Changes Made from 11.1-53.3 -&gt; 12.0-48.x"
        }, 
        {
            "location": "/before-you-begin/#changes-made-from-105-57x-110", 
            "text": "All NITRO Flavors - Changes from 10.5 57.x to 11.0  The NITRO changes that were made in NetScaler 11.0 when compared with NetScaler 10.5 Build 57.x.      Type of Change    Resource    Attribute        Attribute removed    nstrace    doruntimemerge      Attribute removed    nstrace    tcpdump      Attribute removed    cacheobject    force      NITRO SDKs - Changes from 10.5 57.x to 11.0  The SDK-specific changes that were made in NetScaler 11.0 when compared with NetScaler 10.5 Build 57.x.      Type of Change    Class    Method    Replace with        Attribute missing in method    cacheobject    (base_response) flush(cacheobject obj, nitro_service session)  'force' attribute missing in this method.    -      Method missing    clustersync    (base_response) Force(clustersync obj, nitro_service session)    (base_response) Force(nitro_service session)      Method missing    shutdown    (base_response) Shutdown(shutdown obj, nitro_service session)    (base_response) Shutdown(nitro_service session)      Method missing    systemfile    (systemfile) get(systemfile obj, nitro_service session)    -      Method missing    sslfips    (base_response) reset(sslfips obj, nitro_service session)    (base_response) reset(nitro_service session)", 
            "title": "Changes Made from 10.5 57.x -&gt; 11.0"
        }, 
        {
            "location": "/before-you-begin/#changes-made-from-93-101105", 
            "text": "Note.  No changes are introduced from NetScaler 10.1 to NetScaler 10.5. Therefore, you should not face any compatibility issues when migrating from NetScaler 10.1 to 10.5.  All NITRO Flavors - Changes from 9.3 to 10.1/10.5  The NITRO changes that were made in NetScaler 10.1/10.5 when compared with NetScaler 9.3.      Type of Change    Resource    Method    Attribute        Resource removed    lbmonitor_lbmetrictable_binding  Replaced with the resource 'lbmonitor_metric_binding'.    -    -      Method removed    vserver    GET  Perform the GET operation on specific virtual server types such as lb/cr/cs.    -      Method removed    filterpolicy    POST with 'action=unset'  This method is removed as unsetting the attributes('action') of a policy makes it invalid.    -      Method removed    auditsyslogpolicy    POST with 'action=unset'  This method is removed as unsetting the attributes('action') of a policy makes it invalid.    -      Method removed    auditnslogpolicy    POST with 'action=unset'  This method is removed as unsetting the attributes('action') of a policy makes it invalid.    -      Method removed    authorizationpolicy    POST with 'action=unset'  This method is removed as unsetting the attributes('action') of a policy makes it invalid.    -      Return-type changed    snmpengineid    GET  Return type changed to an array.    -      Return-type changed    nshostname    GET  Return type changed to an array.    -      Attribute-type changed    appfwpolicy_lbvserver_binding    -    activepolicy  Data type changed from Boolean to Integer.      Attribute-type changed    appfwpolicy_appfwglobal_binding    -    activepolicy  Data type changed from Boolean to Integer.      Attribute-type changed    vlan    -    portbitmap  Data type changed from uint to ulong.      Attribute-type changed    vlan    -    tagbitmap  Data type changed from uint to ulong.      Attribute removed    policypatset_pattern_binding    -    indextype  This attribute is moved to 'policypatset' resource as this attribute is applicable at patset level.      Attribute removed    system_stats    -    powersupply1failure  Replaced with 'powersupply1status'.  Note: Change is applicable from NetScaler 9.3 Build 65.8.      Attribute removed    system_stats    -    powersupply2failure  Replaced with 'powersupply2status'.  Note: Change is applicable from NetScaler 9.3 Build 65.8.      Attribute removed    server_servicegroup_binding    -    servicetype  Replaced with 'svctype'.      Attribute removed    server_service_binding    -    servicetype  Replaced with 'svctype'.      Attribute removed    crvserver    -    hits  Hits are calculated per policy binding hence moved this parameter to binding resources.      Attribute removed    crvserver    -    dstvsvr  Replaced with 'destinationvserver'.      Attribute removed    crvserver    -    destvserver  Replaced with 'domain'.      Attribute removed    crvserver    -    dnsvserver  Replaced with 'dnsvservername'.      Attribute removed    appflowpolicylabel    -    type  Replaced with 'policylabeltype'.      Attribute removed    sslcipher    -    ciphgrpals  Replaced with 'ciphergroupname'.      Attribute removed    csvserver_cspolicy_binding    -    targetvserver  Replaced with 'targetlbvserver'.  Note: This change is applicable for the 'sslcipher_*_binding' resources also.      Attribute removed    csvserver_cspolicy_binding    -    targetvserver  Replaced with 'targetlbvserver'.      Attribute removed    rewriteaction    -    allow_unsafe_pi1, allow_unsafe_pi  Replaced with 'bypassSafetyCheck'.      Attribute removed    nsconfig    -    nwfwmode  Marked as a hidden attribute.      NITRO SDKs - Changes from 9.3 to 10.1/10.5  The SDK-specific changes that were made in NetScaler 10.1/10.5 when compared with NetScaler 9.3.      Type of Change    Class    Method    Replace with        Class removed    Routerbgp    -    This class is removed as all router configurations are deprecated in 9.2.      Method signature changed    dnsptrrec    get(dnsptrrec obj, nitro_service session)    get(nitro_service session, String reversedomain)      Method signature changed    dnsaddrec    get(dnsaddrec obj, nitro_service session)    get(nitro_service session, String hostname)      Method signature changed    dnsnsrec    get(dnsnsrec obj, nitro_service session)    get(nitro_service session, String domain)      Method signature changed    snmpengineid    unset(nitro_service session, String[] args)    unset(nitro_service session, snmpengineid resource, String[] args)      Method signature changed    arp    arp.get(nitro_service session, String ipaddress)    arp.get(nitro_service session, arp resource)      Method signature changed    nsip    get(nitro_service session, String ipaddress)    get(nitro_service client, nsip resource)      Method signature changed    nsip6    get(nitro_service session, String ipv6address)    get(nitro_service session, nsip6 resource)      Method signature changed    dnsmxrec    dnsmxrec.get(dnsmxrec obj, nitro_service session)    dnsmxrec[] get(nitro_service service, dnsmxrec_args args)      Method Missing    authenticationnegotiatepolicy    (base_response) unset(nitro_service session, String[] args, String name)' is missing in    -      Method missing    authenticationnegotiatepolicy    (base_response) unset(authenticationnegotiatepolicy obj, nitro_service session, String[] args)    -      Attribute missing in method    nsconfig    (base_response) update(nsconfig obj, nitro_service session)  'nwfwmode' attribute is missing in this method.    -", 
            "title": "Changes made from 9.3 -&gt; 10.1/10.5"
        }, 
        {
            "location": "/before-you-begin/#limitations", 
            "text": "The section lists the NetScaler operations that cannot be performed by using NITRO API.  Note:  These operations can be performed on the NetScaler CLI or the GUI.   install API (supported from NetScaler 11.1 onwards)\ndiff API on nsconfig resource (supported from NetScaler 10.5 onwards)  UI-internal APIs (update, unset, and get)  show ns info  shutdown  Application firewall API  importwsdl  importcustom  importxmlschema  importxmlerrorpage  importhtmlerrorpage  rmcustom  rmxmlschema  rmxmlerrorpage  rmhtmlerrorpage  CLI-specific API  start nstrace/stop nstrace/show nstrace  scp  configaudit  show defaults  show permission  batch  source", 
            "title": "Limitations"
        }, 
        {
            "location": "/performing-basic-netscaler-operations/", 
            "text": "Performing Basic NetScaler Operations\n\n\nThis section covers procedures for performing the following basic NetScaler operations using NITRO APIs.\n\n\n\n\nConnecting to the NetScaler Appliance\n\n\nEnabling NetScaler Features and Modes\n\n\nSaving NetScaler Configurations\n\n\nKilling a System Session\n\n\nDisconnecting from the NetScaler Appliance\n\n\n\n\nConnecting to the NetScaler Appliance\n\n\nThe first step towards using NITRO is to establish a session with the NetScaler appliance and then authenticate the session by using the NetScaler administrator's credentials.\n\n\nSome points to note with regards to session timeout for NetScaler 10.5 and later versions:\n\n\n\n\nWhen restricted timeout param is enabled, NITRO, by default, uses the timeout value that is configured for the logged in user. You can customize this value but it must be limited to the value specified for the user. If no value is specified for the user, the default timeout value of 15 minutes is used.\n\n\nWhen restricted timeout param is not enabled, NITRO uses the default value of 30 minutes as session timeout.\n\n\n\n\nUsing REST APIs through HTTP\n\n\nYou must specify the username and password in the login object. The session ID that is created must be specified in the request header of all further operations in the session.\n\n\nNote.\n\n\n\n\nYou must have a user account on the appliance to log on to it. The configuration operations that you can perform are limited by the administrative roles assigned to your account.\n\n\nTo ensure secure communication, use the HTTPS protocol in NITRO requests.\n\n\nInstead of creating a NITRO session, you can log on to the NetScaler appliance while performing individual operations. To do this, you must specify the username and password in the request header of the NITRO request as follows:\n\n\nX-NITRO-USER:\\\n\n\nX-NITRO-PASS:\\\n \n\n\nContent-Type:application/json\n\n\n\n\n\n\n\n\nFor example, to connect and create a session with a NetScaler appliance with NSIP address 10.102.29.60 by using the HTTP protocol:\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://10.102.29.60/nitro/v1/config/login\n\n\nRequest Headers:\n Content-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nlogin\n:\n \n    \n{\n \n    \nusername\n:\nadmin\n,\n \n    \npassword\n:\nverysecret\n     \n    \n}\n \n\n}\n     \n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nResponse Header:\n\n\nSet-Cookie:NITRO_AUTH_TOKEN=\\\ntokenvalue\n;\n  \n\npath=/nitro/v\n1\n   \n\n\n\n\n\nUsing REST APIs through SDKs\n\n\nYou must create an object of the com.citrix.netscaler.nitro.service.nitro_service class by specifying the NetScaler IP (NSIP) address and the protocol to connect to the appliance (HTTP or HTTPS). You then use this object and log on to the appliance by specifying the user name and the password of the NetScaler administrator.\n\n\nNote:\n\n\n\n\nFor the python SDK, the package path is of the form nssrc.com.citrix.netscaler...\n\n\nYou must have a user account on that appliance. The configuration operations that you perform are limited by the administrative roles assigned to your account.\n\n\n\n\nThe following sample code establishes a session with a NetScaler appliance with IP address 10.102.29.60 by using the HTTPS protocol and also sets a session timeout period (in seconds) of 60 minutes.\n\n\nJava - Sample code to establish session\n\n\n//Specify the NetScaler appliance IP address and protocol\n\n\nnitro_service\n \nns_session\n \n=\n \nnew\n \nnitro_service\n(\n10.102.29.60\n,\nhttps\n);\n\n\n\n//Specify the login credentials\n\n\nns_session\n.\nlogin\n(\nadmin\n,\nverysecret\n,\n3600\n);\n\n\n\n\n\n\n.NET - Sample code to establish session\n\n\n//Specify the NetScaler appliance IP address and protocol\n\n\nnitro_service\n \nns_session\n \n=\n \nnew\n \nnitro_service\n(\n10.102.29.60\n,\nhttps\n);\n\n\n\n//Specify the login credentials\n\n\nns_session\n.\nlogin\n(\nadmin\n,\nverysecret\n,\n3600\n);\n\n\n\n\n\n\nPython - Sample code to establish session\n\n\n#Specify the NetScaler appliance IP address and protocol\n\n\nns_session\n \n=\n \nnitro_service\n(\n10.102.29.60\n,\nhttps\n)\n\n\n\n#Specify the login credentials\n\n\nns_session\n.\nlogin\n(\nadmin\n,\nverysecret\n,\n3600\n)\n\n\n\n\n\n\nDisable SSL Checks\n\n\nWhen using HTTPS, you must make sure that the root CA is added to the truststore. By default, NITRO validates the SSL certificate and verifies the hostname. \n\n\nUsing REST APIs through SDKs\n\n\nDisable these validations as shown in the following sample codes.\n\n\nJava - Sample code for disabling SSL checks\n\n\nns_session\n.\nset_certvalidation\n(\nfalse\n);\n \n\nns_session\n.\nset_hostnameverification\n(\nfalse\n);\n\n\n\n\n\n\n.NET - Sample code for disabling SSL checks\n\n\nns_session\n.\ncertvalidation\n \n=\n \nfalse\n;\n \n\nns_session\n.\nhostnameverification\n \n=\n \nfalse\n;\n\n\n\n\n\n\nPython - Sample code for disabling SSL checks\n\n\nns_session\n.\ncertvalidation\n \n=\n \nfalse\n \n\nns_session\n.\nhostnameverification\n \n=\n \nfalse\n\n\n\n\n\n\nEnabling NetScaler Features and Modes\n\n\nSome NetScaler features and modes are disabled by default and therefore must be enabled before they can be configured. To enable a NetScaler feature or mode, specify the action as \"enable\" in the URL query string, and in the request payload, specify the feature or mode to be enabled.\n\n\nUsing REST APIs through HTTP\n\n\nTo disable a feature or mode, in the URL query string, specify the action as \"disable\".\n\n\nFor example, to enable the load balancing and content switching features:\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/nsfeature?action=enable\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json    \n\n\nRequest Payload:\n\n\n{\n \n    \nnsfeature\n:\n  \n    \n{\n \n        \nfeature\n:\n  \n        \n[\n \n            \nLB\n,\n \n            \nCS\n \n        \n]\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nTo enable the L2 and fast ramp modes:\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/nsmode?action=enable\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nnsmode\n:\n \n    \n{\n \n        \nmode\n:\n \n        \n[\n \n            \nL2\n,\n \n            \nFR\n \n        \n]\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nSaving NetScaler Configurations\n\n\nTo make sure that the configurations persist on rebooting the appliance, you must save the NetScaler configurations. To save the configurations, specify the action as \"save\" in the URL query string.\n\n\nUsing REST APIs through HTTP\n\n\nTo save the configurations:\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/nsconfig?action=save\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nnsconfig\n:\n \n    \n{}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nKilling a System Session\n\n\nA NetScaler administrator can kill any system session by specifying the action as \"kill\" in the URL query string and by specifying the required system session ID in the request payload.\n\n\nUsing REST APIs through HTTP\n\n\nFor example, to kill a system session that has ID as 311:\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/systemsession?action=kill\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nsystemsession\n:\n \n    \n{\n \n    \nsid\n:\n311\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error. \n\n\nDisconnecting from the NetScaler Appliance\n\n\nBefore disconnecting (logging out) from the NetScaler appliance, make sure that you have saved the NetScaler configurations.\n\n\nUsing REST APIs through HTTP\n\n\nTo logout of the NetScaler appliance:\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/logout\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nlogout\n:{}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.", 
            "title": "Performing Basic NetScaler Operations"
        }, 
        {
            "location": "/performing-basic-netscaler-operations/#performing-basic-netscaler-operations", 
            "text": "This section covers procedures for performing the following basic NetScaler operations using NITRO APIs.   Connecting to the NetScaler Appliance  Enabling NetScaler Features and Modes  Saving NetScaler Configurations  Killing a System Session  Disconnecting from the NetScaler Appliance", 
            "title": "Performing Basic NetScaler Operations"
        }, 
        {
            "location": "/performing-basic-netscaler-operations/#connecting-to-the-netscaler-appliance", 
            "text": "The first step towards using NITRO is to establish a session with the NetScaler appliance and then authenticate the session by using the NetScaler administrator's credentials.  Some points to note with regards to session timeout for NetScaler 10.5 and later versions:   When restricted timeout param is enabled, NITRO, by default, uses the timeout value that is configured for the logged in user. You can customize this value but it must be limited to the value specified for the user. If no value is specified for the user, the default timeout value of 15 minutes is used.  When restricted timeout param is not enabled, NITRO uses the default value of 30 minutes as session timeout.   Using REST APIs through HTTP  You must specify the username and password in the login object. The session ID that is created must be specified in the request header of all further operations in the session.  Note.   You must have a user account on the appliance to log on to it. The configuration operations that you can perform are limited by the administrative roles assigned to your account.  To ensure secure communication, use the HTTPS protocol in NITRO requests.  Instead of creating a NITRO session, you can log on to the NetScaler appliance while performing individual operations. To do this, you must specify the username and password in the request header of the NITRO request as follows:  X-NITRO-USER:\\  X-NITRO-PASS:\\    Content-Type:application/json     For example, to connect and create a session with a NetScaler appliance with NSIP address 10.102.29.60 by using the HTTP protocol:  Request  HTTP Method:  POST  URL:  http://10.102.29.60/nitro/v1/config/login  Request Headers:  Content-Type:application/json  Request Payload:  {  \n     login :  \n     {  \n     username : admin ,  \n     password : verysecret      \n     }   }        Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Response Header:  Set-Cookie:NITRO_AUTH_TOKEN=\\ tokenvalue ;    path=/nitro/v 1      Using REST APIs through SDKs  You must create an object of the com.citrix.netscaler.nitro.service.nitro_service class by specifying the NetScaler IP (NSIP) address and the protocol to connect to the appliance (HTTP or HTTPS). You then use this object and log on to the appliance by specifying the user name and the password of the NetScaler administrator.  Note:   For the python SDK, the package path is of the form nssrc.com.citrix.netscaler...  You must have a user account on that appliance. The configuration operations that you perform are limited by the administrative roles assigned to your account.   The following sample code establishes a session with a NetScaler appliance with IP address 10.102.29.60 by using the HTTPS protocol and also sets a session timeout period (in seconds) of 60 minutes.  Java - Sample code to establish session  //Specify the NetScaler appliance IP address and protocol  nitro_service   ns_session   =   new   nitro_service ( 10.102.29.60 , https );  //Specify the login credentials  ns_session . login ( admin , verysecret , 3600 );   .NET - Sample code to establish session  //Specify the NetScaler appliance IP address and protocol  nitro_service   ns_session   =   new   nitro_service ( 10.102.29.60 , https );  //Specify the login credentials  ns_session . login ( admin , verysecret , 3600 );   Python - Sample code to establish session  #Specify the NetScaler appliance IP address and protocol  ns_session   =   nitro_service ( 10.102.29.60 , https )  #Specify the login credentials  ns_session . login ( admin , verysecret , 3600 )", 
            "title": "Connecting to the NetScaler Appliance"
        }, 
        {
            "location": "/performing-basic-netscaler-operations/#disable-ssl-checks", 
            "text": "When using HTTPS, you must make sure that the root CA is added to the truststore. By default, NITRO validates the SSL certificate and verifies the hostname.   Using REST APIs through SDKs  Disable these validations as shown in the following sample codes.  Java - Sample code for disabling SSL checks  ns_session . set_certvalidation ( false );   ns_session . set_hostnameverification ( false );   .NET - Sample code for disabling SSL checks  ns_session . certvalidation   =   false ;   ns_session . hostnameverification   =   false ;   Python - Sample code for disabling SSL checks  ns_session . certvalidation   =   false   ns_session . hostnameverification   =   false", 
            "title": "Disable SSL Checks"
        }, 
        {
            "location": "/performing-basic-netscaler-operations/#enabling-netscaler-features-and-modes", 
            "text": "Some NetScaler features and modes are disabled by default and therefore must be enabled before they can be configured. To enable a NetScaler feature or mode, specify the action as \"enable\" in the URL query string, and in the request payload, specify the feature or mode to be enabled.  Using REST APIs through HTTP  To disable a feature or mode, in the URL query string, specify the action as \"disable\".  For example, to enable the load balancing and content switching features:  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/nsfeature?action=enable  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json      Request Payload:  {  \n     nsfeature :   \n     {  \n         feature :   \n         [  \n             LB ,  \n             CS  \n         ]  \n     }   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  To enable the L2 and fast ramp modes:  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/nsmode?action=enable  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     nsmode :  \n     {  \n         mode :  \n         [  \n             L2 ,  \n             FR  \n         ]  \n     }   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.", 
            "title": "Enabling NetScaler Features and Modes"
        }, 
        {
            "location": "/performing-basic-netscaler-operations/#saving-netscaler-configurations", 
            "text": "To make sure that the configurations persist on rebooting the appliance, you must save the NetScaler configurations. To save the configurations, specify the action as \"save\" in the URL query string.  Using REST APIs through HTTP  To save the configurations:  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/nsconfig?action=save  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     nsconfig :  \n     {}   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.", 
            "title": "Saving NetScaler Configurations"
        }, 
        {
            "location": "/performing-basic-netscaler-operations/#killing-a-system-session", 
            "text": "A NetScaler administrator can kill any system session by specifying the action as \"kill\" in the URL query string and by specifying the required system session ID in the request payload.  Using REST APIs through HTTP  For example, to kill a system session that has ID as 311:  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/systemsession?action=kill  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     systemsession :  \n     {  \n     sid : 311  \n     }   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.", 
            "title": "Killing a System Session"
        }, 
        {
            "location": "/performing-basic-netscaler-operations/#disconnecting-from-the-netscaler-appliance", 
            "text": "Before disconnecting (logging out) from the NetScaler appliance, make sure that you have saved the NetScaler configurations.  Using REST APIs through HTTP  To logout of the NetScaler appliance:  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/logout  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     logout :{}   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.", 
            "title": "Disconnecting from the NetScaler Appliance"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/", 
            "text": "Performing NetScaler Resource Operations\n\n\nNetScaler resources are organized into a set of packages or namespaces. Each package or namespace corresponds to a NetScaler feature. For example, all load-balancing related resources, such as load balancing virtual server, load balancing group, and load balancing monitor are available in com.citrix.netscaler.nitro.resource.config.lb.\n\n\nSimilarly, all application firewall related resources, such as application firewall policy and application firewall archive are available in com.citrix.netscaler.nitro.resource.config.appfw.\n\n\nEach NetScaler resource is represented by a class. For example, the class that represents a load balancing virtual server is called lbvserver (in com.citrix.netscaler.nitro.resource.config.lb). The state of a resource is represented by properties of a class. You can get and set the properties of the class.\n\n\nThe setter and getter properties are always executed locally on the client. They do not involve any network interaction with the NITRO web service. All properties have basic simple types: integer, long, boolean, and string.\n\n\nAdding a NetScaler Resource\n\n\nThis topic covers adding a NetScaler resource by using REST APIs through HTTP or SDKs. \n\n\nUsing REST APIs through HTTP\n\n\nTo create a new resource (for example, an lbvserver) on the appliance, specify the resource name and other related arguments in the specific resource object.\n\n\nFor example, to create an load balancing virtual server named MyFirstLbVServer:\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nlbvserver\n:\n \n    \n{\n \n    \nname\n:\nMyFirstLbVServer\n,\n \n    \nservicetype\n:\nhttp\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nTo create a new resource, instantiate the resource class, configure the resource by setting its properties locally, and then upload the new resource instance to the NetScaler appliance.\n\n\nThe following sample code creates a load balancing virtual server.\n\n\nJava - Sample code to add a NetScaler resource\n\n\n//Create an instance of the lbvserver class \n\n\n\nlbvserver\n \nnew_lbvserver_obj\n \n=\n \nnew\n \nlbvserver\n();\n \n\n\n//Set the properties of the resource locally \n\n\n\nnew_lbvserver_obj\n.\nset_name\n(\nMyFirstLbVServer\n);\n \n\nnew_lbvserver_obj\n.\nset_ipv46\n(\n10.102.29.88\n);\n \n\nnew_lbvserver_obj\n.\nset_port\n(\n88\n);\n \n\nnew_lbvserver_obj\n.\nset_servicetype\n(\nHTTP\n);\n \n\nnew_lbvserver_obj\n.\nset_lbmethod\n(\nROUNDROBIN\n);\n \n\n\n//Upload the resource to NetScaler \n\n\n\nlbvserver\n.\nadd\n(\nns_session\n,\nnew_lbvserver_obj\n);\n\n\n\n\n\n\n.NET - Sample code to add a NetScaler resource\n\n\n//Create an instance of the lbvserver class \n\n\n\nlbvserver\n \nnew_lbvserver_obj\n \n=\n \nnew\n \nlbvserver\n();\n  \n\n\n//Set the properties of the resource locally \n\n\n\nnew_lbvserver_obj\n.\nname\n \n=\n \nMyFirstLbVServer\n;\n \n\nnew_lbvserver_obj\n.\nipv46\n \n=\n \n10.102.29.88\n;\n \n\nnew_lbvserver_obj\n.\nport\n \n=\n \n88\n;\n \n\nnew_lbvserver_obj\n.\nservicetype\n \n=\n \nHTTP\n;\n \n\nnew_lbvserver_obj\n.\nlbmethod\n \n=\n \nROUNDROBIN\n;\n \n\n\n//Upload the resource to NetScaler \n\n\n\nlbvserver\n.\nadd\n(\nns_session\n,\nnew_lbvserver_obj\n);\n\n\n\n\n\n\nPython - Sample code to add a NetScaler resource\n\n\n#Create an instance of the lbvserver class\n\n\n\nnew_lbvserver_obj\n \n=\n \nlbvserver\n()\n\n\n\n#Set the properties of the resource locally\n\n\n\nnew_lbvserver_obj\n.\nname\n \n=\n \nMyFirstLbVServer\n\n\nnew_lbvserver_obj\n.\nipv46\n \n=\n \n10.102.29.88\n\n\nnew_lbvserver_obj\n.\nport\n \n=\n \n88\n\n\nnew_lbvserver_obj\n.\nservicetype\n \n=\n \nHTTP\n\n\nnew_lbvserver_obj\n.\nlbmethod\n \n=\n \nROUNDROBIN\n\n\n\n#Upload the resource to NetScaler\n\n\n\nlbvserver\n.\nadd\n(\nns_session\n,\n \nnew_lbvserver_obj\n)\n\n\n\n\n\n\nEnabling a NetScaler Resource\n\n\nThis topic covers enabling a NetScaler resource by using REST APIs through HTTP or SDKs. \n\n\nUsing REST APIs through HTTP\n\n\nTo enable a resource on the NetScaler appliance, specify the action as \"enable\" in the URL query string, and in the request payload, specify the resource to be enabled. To disable a resource, in the URL query string, specify the action as \"disable\".\n\n\nFor example, to enable a load balancing virtual server named MyFirstLbVServer.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver?action=enable\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nlbvserver\n:\n \n    \n{\n \n    \nname\n:\nMyFirstLbVServer\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nTo enable a resource, invoke the enable() method and to disable, invoke the disable() method.\n\n\nThe following sample code enables a load balancing virtual server named lb_vip.\n\n\nJava - Sample code to enable a NetScaler resource\n\n\nlbvserver\n \nobj\n \n=\n \nnew\n \nlbvserver\n();\n\n\n\nobj\n.\nset_name\n(\nlb_vip\n);\n\n\n\nlbvserver\n.\nenable\n(\nns_session\n,\n \nobj\n);\n\n\n\n\n\n\n.NET - Sample code to enable a NetScaler resource\n\n\nlbvserver\n \nobj\n \n=\n \nnew\n \nlbvserver\n();\n \n\n\nobj\n.\nname\n \n=\n \nlb_vip\n;\n \n\n\nlbvserver\n.\nenable\n(\nns_session\n,\n \nobj\n);\n\n\n\n\n\n\nPython - Sample code to enable a NetScaler resource\n\n\nobj\n \n=\n \nlbvserver\n()\n\n\n\nobj\n.\nname\n \n=\n \nlb_vip\n\n\n\nlbvserver\n.\nenable\n(\nns_session\n,\n \nobj\n)\n\n\n\n\n\n\nRetrieving Properties of NetScaler Resources\n\n\nThis topic covers retrieving properties of a NetScaler resource by using REST APIs through HTTP or SDKs. \n\n\nUsing REST APIs through HTTP\n\n\nNITRO provides multiple approaches using which you can retrieve resources and their relevant details. The following table explains each of these approaches with the required URL.\n\n\n\n    \nRetrieving all details of all resources of a specific type\n\n    \n\n    \nIn the URL, specify the type of resource for which you want to retrieve the details.\n\n    \nFor example, to retrieve all details of load balancing virtual servers available on a NetScaler appliance.\n\n    \nhttp://\nnetscaler-ip-address\n/nitro/v1/config/lbvserver\n\n    \n\n    \nRetrieving all details of a specific resource\n\n    \n\n    \nIn the URL, specify the name of resource for which you want to retrieve the details.\n\n    \nFor example, to retrieve all details of a load balancing virtual server named MyFirstLbVServer:\n\n    \nhttp://\nnetscaler-ip-address\n/nitro/v1/config/lbvserver/MyFirstLbVServer\n\n    \n\n    \nRetrieving summary or detailed view of resources\n\n    \n\n    \nIn the URL, use the \"\nview\n\" query parameter to specify whether you want to view the summary (mandatory parameters) or detail (all parameters).\n\n    \nFor example, to view the mandatory parameters for all load balancing virtual servers:\n\n    \nhttp://\nnetscaler-ip-address\n/nitro/v1/config/lbvserver?view=summary\nNote:\n By default, the retrieved results are displayed in detail view (?view=detail).\n\n    \n\n    \n\n    \nRetrieving all details of resources that have multiple unique identifiers\n\n    \n\n    \nIn the URL, specify the type of resource and use the \"\nargs\n\" query parameter to specify the unique attributes and the values for those attributes.\n\n    \nFor example, to get the application firewall profiles that have unique identifiers \"name\" and \"starturl\" as appfw1 and aa respectively.\n\n    \nhttp://\nnetscaler-ip-address\n/nitro/v1/config/appfwprofile?args=name:appfw1,starturl:aa\n\n    \n\n    \nRetrieving specific details of all resources of a specific type\n\n    \n\n    \nIn the URL, specify the type of the resource and use the \"\nattrs\n\" query parameter to specify the resource details that you want to retrieve.\n\n    \nFor example, to retrieve the \"name\" and \"lbmethod\" of all load balancing virtual servers:\n\n    \nhttp://\nnetscaler-ip-address\n/nitro/v1/config/lbvserver?attrs=name,lbmethod\n\n    \n\n    \nRetrieving specific details of a specific resource\n\n    \n\n    \nIn the URL, specify the type and name of the resource and use the \"\nattrs\n\" query parameter to specify the resource details that you want to retrieve.\n\n    \nFor example, to retrieve the \"name\" and \"lbmethod\" of a load balancing virtual server named \"MyFirstLbVServer\":\n\n    \nhttp://\nnetscaler-ip-address\n/nitro/v1/config/lbvserver/MyFirstLbVServer?attrs=name,lbmethod\n\n    \n\n    \nFiltering the retrieved resources\n\n    \n\n    \nIn the URL, specify the type of resource and use the \"\nfilter\n\" query parameter to specify the attribute(s) and the value(s) of the attributes. The resources fetched will be filtered based on the filter criteria.\n\n    \nNote:\n The filter query parameter supports the use of PCRE regular expressions.\n\n    \n\n    \nFor example, to filter the load balancing virtual servers where the \"lbmethod\" is ROUNDROBIN.\n\n    \nhttp://\nnetscaler-ip-address\n/nitro/v1/config/lbvserver?filter=lbmethod:ROUNDROBIN\n\n    \n\n    \nRetrieving resources in paginated manner\n\n    \n\n    \nIf the request is likely to result in a large number of resources, you can divide the results into pages and retrieve them page by page (paginated). For example, if you are retrieving all the 53 load balancing virtual servers of a NetScaler appliance, instead of retrieving all 53 in one response, you can configure the results to be divided into 6 pages each having 10 results.\n\n    \nIn the URL, specify the name of the resource and use the following query parameters:\n\n    \n\"\npageno\n\" - The page number to be displayed.\n\n    \n\"\npagesize\n\" - The number of resources to be displayed in each page.\n\n    \n\n    \n\n    \nFor example, to retrieve the load balancing virtual servers in a paginated form, first get a count (using the \"count\" query parameter shown in below row) of the load balancing virtual servers. Then, accordingly specify the number of results for each page and then specify the page number to be displayed.\n\n    \nhttp://\nnetscaler-ip-address\n/nitro/v1/config/lbvserver?pagesize=10\npageno=3\n\n    \n\n    \n\n    \n\n\n\nFor example, to retrieve only the name and load balancing method of all load balancing virtual servers on a NetScaler.\n\n\nRequest\n\n\nHTTP Method:\n GET\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver?attrs=name,lbmethod\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nAccept:application/json\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nResponse Header:\n\n\nContent-Type:application/json\n\n\nResponse Payload:\n\n\n{\n \n    \nlbvserver:\n \n    \n{\n \n        \nname:\n \ntest\n,\n \n        \nlbmethod:\n \nLEASTCONNECTION\n \n    \n}\n \n    \n{\n \n        \nname:\n \ntest1\n,\n \n        \nlbmethod:\n \nLEASTCONNECTION\n \n    \n}\n \n\n}\n\n\n\n\n\n\nUsing REST APIs through SDKs\n\n\nTo retrieve the properties of a resource, you retrieve the resource object from the NetScaler appliance. Once the object is retrieved, you can extract the required properties of the resource locally, without further network traffic.\n\n\nThe following sample code retrieves the details of a load balancing virtual server.\n\n\nJava - Sample code to get details of resource\n\n\n//Retrieve the resource object from the NetScaler \n\n\n\nnew_lbvserver_obj\n \n=\n \nlbvserver\n.\nget\n(\nns_session\n,\nMyFirstLbVServer\n);\n \n\n\n//Extract the properties of the resource from the object locally \n\n\n\nSystem\n.\nout\n.\nprintln\n(\nnew_lbvserver_obj\n.\nget_name\n());\n \n\nSystem\n.\nout\n.\nprintln\n(\nnew_lbvserver_obj\n.\nget_servicetype\n());\n\n\n\n\n\n\n.NET - Sample code to get details of resource\n\n\n//Retrieve the resource object from the NetScaler \n\n\n\nnew_lbvserver_obj\n \n=\n \nlbvserver\n.\nget\n(\nns_session\n,\nMyFirstLbVServer\n);\n \n\n\n//Extract the properties of the resource from the object locally \n\n\n\nConsole\n.\nWriteLine\n(\nnew_lbvserver_obj\n.\nname\n);\n \n\nConsole\n.\nWriteLine\n(\nnew_lbvserver_obj\n.\nservicetype\n);\n\n\n\n\n\n\nPython - Sample code to get details of resource\n\n\n#Retrieve the resource object from the NetScaler\n\n\n\nnew_lbvserver_obj\n \n=\n \nlbvserver\n.\nget\n(\nns_session\n,\nMyFirstLbVServer\n)\n\n\n\n#Extract the properties of the resource from the object locally\n\n\n\nprint\n(\nnew_lbvserver_obj\n.\nname\n)\n\n\nprint\n(\nnew_lbvserver_obj\n.\nservicetype\n)\n\n\n\n\n\n\nFiltering Results\n\n\nThis topic covers retrieving filtered information of a resource by using REST APIs through SDKs. \n\n\nUsing REST APIs through SDKs\n\n\nYou can also retrieve resources by specifying a filter on the value of their properties by using the com.citrix.netscaler.nitro.util.filtervalue class.\n\n\nFor example, you can retrieve all the load balancing virtual servers that have their port set to 80 and servicetype to HTTP.\n\n\nJava - Sample code to get filtered results\n\n\nfiltervalue\n[]\n \nfilter\n \n=\n \nnew\n \nfiltervalue\n[\n2\n];\n\n\nfilter\n[\n0\n]\n \n=\n \nnew\n \nfiltervalue\n(\nport\n,\n80\n);\n\n\nfilter\n[\n1\n]\n \n=\n \nnew\n \nfiltervalue\n(\nservicetype\n,\nHTTP\n);\n\n\nlbvserver\n[]\n \nresult\n \n=\n \nlbvserver\n.\nget_filtered\n(\nns_session\n,\nfilter\n);\n\n\n\n\n\n\n.NET - Sample code to get filtered results\n\n\nfiltervalue\n[]\n \nfilter\n \n=\n \nnew\n \nfiltervalue\n[\n2\n];\n \n\nfilter\n[\n0\n]\n \n=\n \nnew\n \nfiltervalue\n(\nport\n,\n80\n);\n \n\nfilter\n[\n1\n]\n \n=\n \nnew\n \nfiltervalue\n(\nservicetype\n,\nHTTP\n);\n \n\nlbvserver\n[]\n \nresult\n \n=\n \nlbvserver\n.\nget_filtered\n(\nns_session\n,\nfilter\n);\n\n\n\n\n\n\nPython - Sample code to get filtered results\n\n\nfilter_params\n \n=\n \n[]\n\n\n      \nfilter_params\n \n=\n \n[\n \nfiltervalue\n()\n \nfor\n \n_\n \nin\n \nrange\n(\n2\n)]\n\n\n      \nfilter_params\n[\n0\n]\n \n=\n \nfiltervalue\n(\nservicetype\n,\nHTTP\n)\n\n\n      \nfilter_params\n[\n1\n]\n \n=\n \nfiltervalue\n(\nport\n,\n80\n)\n\n\n      \nresult\n \n=\n \nlbvserver\n.\nget_filtered\n(\nns_session1\n,\n \nfilter_params\n)\n\n\n\n\n\n\nRetrieving Statistics of NetScaler Resources\n\n\nThe NetScaler appliance collects statistics about the usage of its features and the corresponding resources. NITRO can retrieve these statistics. Not all NetScaler features and resources have statistic objects associated with them.\n\n\nUsing REST APIs through HTTP\n\n\nTo get statistics of a feature, the URL format must be: http://\\\n/nitro/v1/stat/\\\n.\n\n\nTo get statistics of a resource, the URL format must be: http://\\\n/nitro/v1/stat/\\\n/\\\n.\n\n\nTo get statistics of the services and service groups that are bound to a load balancing virtual server, the URL format must be: http://\\\n/nitro/v1/stat/lbvserver/\\\n?statbindings=yes*.\n\n\nRequest\n\n\nHTTP Method:\n GET\n\n\nURL:\n http://\\\n/nitro/v1/stat/lbvserver/MyFirstLbVServer\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nAccept:application/json\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nResponse Payload:\n\n\n{\n\n\n    \nlbvserver\n:\n\n\n    \n[\n\n\n        \n{\n\n\n            \nname\n:\nMyFirstLbVServer\n,\n\n\n            \nestablishedconn\n:\n0\n,\n\n\n            \nvslbhealth\n:\n0\n,\n\n\n            \nprimaryipaddress\n:\n0.0.0.0\n,\n\n\n            \n...\n\n\n        \n}\n\n\n    \n]\n\n\n\n}\n\n\n\n\n\n\nTo get statistics of the bound entities, use statbindings=yes.\nFor example, to get the statistics of the services that are bound to a load balancing virtual server named MyFirstLbVServer.\n\n\nRequest\n\n\nHTTP Method:\n GET\n\n\nURL:\n http://\\\n/nitro/v1/stat/lbvserver/MyFirstLbVServer?statbindings=yes\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nAccept:application/json\n\n\nResponse\n\n\nHTTP Status code on success:\n 200 OK  \n\n\nHTTP Status code on failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.   \n\n\nResponse Header:\n\n\nContent-Type:application/json\n\n\nResponse Payload:\n\n\n{\n\n\n\n\nlbvserver\n:\n \n[{\n\n\n\n    \nname\n:\n \nMyFirstLbVServer\n,\n\n\n\n    \nsortorder\n:\n \ndescending\n,\n\n\n\n    \nvsvrsurgecount\n:\n \n0\n,\n\n\n\n    \nestablishedconn\n:\n \n0\n,\n\n\n    \n...\n\n\n    \nservice\n:\n \n[{\n\n\n\n        \nname\n:\n \ns1\n,\n\n\n\n        \nthroughput\n:\n \n0\n,\n\n\n\n        \nthroughputrate\n:\n \n0\n,\n\n\n\n        \navgsvrttfb\n:\n \n0\n,\n  \n\n\n        \nprimaryipaddress\n:\n \n1.2.3.5\n,\n\n\n\n        \nprimaryport\n:\n \n80\n,\n\n\n\n        \nservicetype\n:\n \nHTTP\n,\n\n\n\n        \nstate\n:\n \nDOWN\n,\n\n\n\n            \ntotalrequests\n:\n \n0\n,\n\n\n\n            \nrequestsrate\n:\n \n0\n,\n\n\n            \n...\n\n\n            \n}]\n\n    \n}]\n\n\n\n}\n\n\n\n\n\n\nUsing REST APIs through SDKs\n\n\nThe NetScaler appliance collects statistics about the usage of its features and the corresponding resources. You can retrieve these statistics by using NITRO API. The statistics APIs are available in different packages from the configuration APIs.\n\n\nFor example, the API to retrieve statistics of the load balancing virtual server are available in \ncom.citrix.netscaler.nitro.resource.stat.lb.\n\n\nNote.\n\n\n For the python SDK, the package path is of the form nssrc.com.citrix.netscaler......\n\n Not all NetScaler features and resources have statistic objects associated with them.\n\n\nThe following sample code retrieves the statistics of a load balancing virtual server and displays some of the statistics returned.\n\n\nJava - Sample code to get feature statistics\n\n\nlbvserver_stats\n \nstats\n \n=\n \nlbvserver_stats\n.\nget\n(\nns_session\n,\nMyFirstLbVServer\n);\n \n\n\nSystem\n.\nout\n.\nprintln\n(\nstats\n.\nget_curclntconnections\n());\n \n\n\nSystem\n.\nout\n.\nprintln\n(\nstats\n.\nget_deferredreqrate\n());\n\n\n\n\n\n\n.NET - Sample code to get feature statistics\n\n\nlbvserver_stats\n \nstats\n \n=\n \nlbvserver_stats\n.\nget\n(\nns_session\n,\nMyFirstLbVServer\n);\n\n\n\nConsole\n.\nWriteLine\n(\nstats\n.\ncurclntconnections\n);\n\n\n\nConsole\n.\nWriteLine\n(\nstats\n.\ndeferredreqrate\n);\n\n\n\n\n\n\nPython - Sample code to get feature statistics\n\n\nstats\n \n=\n \nlbvserver_stats\n.\nget\n(\nns_session\n,\nMyFirstLbVServer\n)\n\n\n\nprint\n(\nstats\n.\ncurclntconnections\n)\n\n\n\nprint\n(\nstats\n.\ndeferredreqrate\n)\n\n\n\n\n\n\nRetrieving Statistics of NetScaler Resources\n\n\nThe NetScaler appliance collects statistics about the usage of its features and the corresponding resources. NITRO can retrieve these statistics. Not all NetScaler features and resources have statistic objects associated with them.\n\n\nUsing REST APIs through HTTP\n\n\nTo get statistics of a feature, the URL format must be: http://\\\n/nitro/v1/stat/\\\n.\n\n\nTo get statistics of a resource, the URL format must be: http://\\\n/nitro/v1/stat/\\\n/\\\n.\n\n\nTo get statistics of the services and service groups that are bound to a load balancing virtual server, the URL format must be: http://\\\n/nitro/v1/stat/lbvserver/\\\n?statbindings=yes*.\n\n\nRequest\n\n\nHTTP Method:\n GET\n\n\nURL:\n http://\\\n/nitro/v1/stat/lbvserver/MyFirstLbVServer\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nAccept:application/json\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nResponse Payload:\n\n\n{\n\n\n    \nlbvserver\n:\n\n\n    \n[\n\n\n        \n{\n\n\n            \nname\n:\nMyFirstLbVServer\n,\n\n\n            \nestablishedconn\n:\n0\n,\n\n\n            \nvslbhealth\n:\n0\n,\n\n\n            \nprimaryipaddress\n:\n0.0.0.0\n,\n\n\n            \n...\n\n\n        \n}\n\n\n    \n]\n\n\n\n}\n\n\n\n\n\n\nTo get statistics of the bound entities, use statbindings=yes.\nFor example, to get the statistics of the services that are bound to a load balancing virtual server named MyFirstLbVServer.\n\n\nRequest\n\n\nHTTP Method:\n GET\n\n\nURL:\n http://\\\n/nitro/v1/stat/lbvserver/MyFirstLbVServer?statbindings=yes\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nAccept:application/json\n\n\nResponse\n\n\nHTTP Status code on success:\n 200 OK  \n\n\nHTTP Status code on failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.   \n\n\nResponse Header:\n\n\nContent-Type:application/json\n\n\nResponse Payload:\n\n\n{\n\n\n\n\nlbvserver\n:\n \n[{\n\n\n\n    \nname\n:\n \nMyFirstLbVServer\n,\n\n\n\n    \nsortorder\n:\n \ndescending\n,\n\n\n\n    \nvsvrsurgecount\n:\n \n0\n,\n\n\n\n    \nestablishedconn\n:\n \n0\n,\n\n\n    \n...\n\n\n    \nservice\n:\n \n[{\n\n\n\n        \nname\n:\n \ns1\n,\n\n\n\n        \nthroughput\n:\n \n0\n,\n\n\n\n        \nthroughputrate\n:\n \n0\n,\n\n\n\n        \navgsvrttfb\n:\n \n0\n,\n  \n\n\n        \nprimaryipaddress\n:\n \n1.2.3.5\n,\n\n\n\n        \nprimaryport\n:\n \n80\n,\n\n\n\n        \nservicetype\n:\n \nHTTP\n,\n\n\n\n        \nstate\n:\n \nDOWN\n,\n\n\n\n            \ntotalrequests\n:\n \n0\n,\n\n\n\n            \nrequestsrate\n:\n \n0\n,\n\n\n            \n...\n\n\n            \n}]\n\n    \n}]\n\n\n\n}\n\n\n\n\n\n\nUsing REST APIs through SDKs\n\n\nThe NetScaler appliance collects statistics about the usage of its features and the corresponding resources. You can retrieve these statistics by using NITRO API. The statistics APIs are available in different packages from the configuration APIs.\n\n\nFor example, the API to retrieve statistics of the load balancing virtual server are available in \ncom.citrix.netscaler.nitro.resource.stat.lb.\n\n\nNote:\n\n\n For the python SDK, the package path is of the form nssrc.com.citrix.netscaler......\n\n Not all NetScaler features and resources have statistic objects associated with them.\n\n\nThe following sample code retrieves the statistics of a load balancing virtual server and displays some of the statistics returned.\n\n\nJava - Sample code to get feature statistics\n\n\nlbvserver_stats\n \nstats\n \n=\n \nlbvserver_stats\n.\nget\n(\nns_session\n,\nMyFirstLbVServer\n);\n \n\n\nSystem\n.\nout\n.\nprintln\n(\nstats\n.\nget_curclntconnections\n());\n \n\n\nSystem\n.\nout\n.\nprintln\n(\nstats\n.\nget_deferredreqrate\n());\n\n\n\n\n\n\n.NET - Sample code to get feature statistics\n\n\nlbvserver_stats\n \nstats\n \n=\n \nlbvserver_stats\n.\nget\n(\nns_session\n,\nMyFirstLbVServer\n);\n\n\n\nConsole\n.\nWriteLine\n(\nstats\n.\ncurclntconnections\n);\n\n\n\nConsole\n.\nWriteLine\n(\nstats\n.\ndeferredreqrate\n);\n\n\n\n\n\n\nPython - Sample code to get feature statistics\n\n\nstats\n \n=\n \nlbvserver_stats\n.\nget\n(\nns_session\n,\nMyFirstLbVServer\n)\n\n\n\nprint\n(\nstats\n.\ncurclntconnections\n)\n\n\n\nprint\n(\nstats\n.\ndeferredreqrate\n)\n\n\n\n\n\n\nUpdating a NetScaler Resource\n\n\nYou can modify the properties of a resource after creating it.\n\n\nSome properties in some NetScaler resources are not allowed to be modified after creation. The port number or the service type (protocol) of a load balancing virtual server or a service, are examples of such properties. Even though the update method appears to succeed, these properties retain their original values on the appliance.\n\n\nUsing REST APIs through HTTP\n\n\nTo update the details of an existing resource on the NetScaler appliance, specify the name of the resource in the URL, and in the request payload,within the specific resource object, specify the name and the updated details of the resource.\n\n\nFor example, to change the load balancing method to ROUNDROBIN and update the comment property for a load balancing virtual server named MyFirstLbVServer:\n\n\nRequest\n\n\nHTTP Method:\n PUT\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver/MyFirstLbVServer\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nlbvserver\n:\n \n    \n{\n \n        \nname\n:\nMyFirstLbVServer\n,\n \n        \nlbmethod\n:\nROUNDROBIN\n,\n \n        \ncomment\n:\nUpdated comments\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nTo update the properties of a resource, instantiate the resource class, specify the name of the resource to be updated, configure the resource by updating its properties locally, and then upload the updated resource instance to the NetScaler appliance.\n\n\nThe following sample code updates the service type and load balancing method of a load balancing virtual server.\n\n\nJava - Sample code to update a NetScaler resource\n\n\n//Create an instance of the lbvserver class \n\n\n\nlbvserver\n \nupdate_lb\n \n=\n \nnew\n \nlbvserver\n();\n \n\n\n//Specify the name of the lbvserver to be updated \n\n\n\nupdate_lb\n.\nset_name\n(\nMyFirstLbVServer\n);\n \n\n\n//Specify the updated service type and lb method \n\n\n\nupdate_lb\n.\nset_servicetype\n(\nhttps\n);\n \n\nupdate_lb\n.\nset_lbmethod\n(\nLEASTRESPONSETIME\n);\n \n\n\n//Upload the resource to NetScaler \n\n\n\nlbvserver\n.\nupdate\n(\nns_session\n,\nupdate_lb\n);\n\n\n\n\n\n\n.NET - Sample code to update a NetScaler resource\n\n\n//Create an instance of the lbvserver class \n\n\n\nlbvserver\n \nupdate_lb\n \n=\n \nnew\n \nlbvserver\n();\n \n\n\n//Specify the name of the lbvserver to be updated \n\n\n\nupdate_lb\n.\nname\n \n=\n \nMyFirstLbVServer\n;\n \n\n\n//Specify the updated service type and lb method \n\n\n\nupdate_lb\n.\nservicetype\n \n=\n \nhttps\n;\n \n\nupdate_lb\n.\nlbmethod\n \n=\n \nLEASTRESPONSETIME\n;\n \n\n\n//Upload the resource to NetScaler \n\n\n\nlbvserver\n.\nupdate\n(\nns_session\n,\n \nupdate_lb\n);\n\n\n\n\n\n\nPython - Sample code to update a NetScaler resource\n\n\n#Create an instance of the lbvserver class\n\n\n\nupdate_lb\n \n=\n \nlbvserver\n()\n\n\n\n#Specify the name of the lbvserver to be updated\n\n\n\nupdate_lb\n.\nname\n \n=\n \nMyFirstLbVServer\n\n\n\n#Specify the updated service type and lb method\n\n\n\nupdate_lb\n.\nservicetype\n \n=\n \nhttps\n\n\nupdate_lb\n.\nlbmethod\n \n=\n \nLEASTRESPONSETIME\n\n\n\n#Upload the resource to the NetScaler\n\n\n\nlbvserver\n.\nupdate\n(\nns_session\n,\n \nupdate_lb\n)\n\n\n\n\n\n\nBinding NetScaler Resources\n\n\nNetScaler resources form relationships with each other through the process of binding. This is how services are associated with a load balancing virtual server, or how policies are bound to a load balancing virtual server. Each binding relationship is represented by its own object.\n\n\nA binding resource has properties representing the name of each NetScaler resource in the binding relationship. It can also have other properties related to that relationship (for example, the weight of the binding between an lbvserver resource and a service resource).\n\n\nUsing REST APIs through HTTP\n\n\nTo bind one NetScaler resource to another, you must instantiate the appropriate binding class (for example, to bind a service to a load balancing virtual server, you must instantiate the lbvserver_service_binding class) and add it to the NetScaler configuration (by using the static add() method on this class).\n\n\nTo unbind a resource, use the DELETE method and specify an \"args\" query string parameter in the URL that contains the attribute name and value in the relationship resource that designates the secondary resource.\n\n\nThe following example binds a service named svc_prod to a load balancing virtual server named MyFirstLbVServer and specify a weight for the binding.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver_service_binding\n\n\nRequest Headers:\n\nCookie:NITRO_AUTH_TOKEN=\\\n \nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n\nlbvserver_service_binding\n:\n \n    \n{\n \n    \nservicename\n:\nsvc_prod\n,\n \n    \nweight\n:\n20\n,\n \n    \nname\n:\nMyFirstLbVServer\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n  4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nThe following example binds a policy to a policy label.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/authenticationpolicylabel_authenticationpolicy_binding\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n\nauthenticationpolicylabel_authenticationpolicy_binding\n:\n \n    \n{\n \n    \npolicyname\n:\np1\n,\n \n    \npriority\n:\n100\n,\n \n    \ngotopriorityexpression\n:\nEND\n,\n \n    \nlabelname\n:\npl1\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nThe following example unbinds the service svc_prod from the load balancing virtual server MyFirstLbVServer.\n\n\nRequest\n\n\nHTTP Method:\n DELETE\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver_service_binding/MyFirstLbVServer?args=servicename:svc_prod\n\n\nRequest Header:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nTo bind one NetScaler resource to another, you must instantiate the appropriate binding class (for example, to bind a service to a load balancing virtual server, you must instantiate the lbvserver_service_binding class) and add it to the NetScaler configuration (by using the static add() method on this class).\n\n\nTo unbind a resource from another, invoke the delete() method from the resource binding class, by passing the name of the two resources.\n\n\nThe following sample code binds a service to a load balancing virtual server, by specifying a certain weight for the binding.\n\n\nJava - Sample code for binding\n \n\n\nlbvserver_service_binding\n \nbindObj\n \n=\n \nnew\n \nlbvserver_service_binding\n();\n \n\nbindObj\n.\nset_name\n(\nMyFirstLbVServer\n);\n \n\nbindObj\n.\nset_servicename\n(\nsvc_prod\n);\n \n\nbindObj\n.\nset_weight\n(\n20\n);\n \n\nlbvserver_service_binding\n.\nadd\n(\nns_session\n,\nbindObj\n);\n\n\n\n\n\n\n.NET - Sample code for binding\n\n\nlbvserver_service_binding\n \nbindObj\n \n=\n \nnew\n \nlbvserver_service_binding\n();\n \n\nbindObj\n.\nname\n \n=\n \nMyFirstLbVServer\n;\n \n\nbindObj\n.\nservicename\n \n=\n \nsvc_prod\n;\n \n\nbindObj\n.\nweight\n \n=\n \n20\n;\n \n\nlbvserver_service_binding\n.\nadd\n(\nns_session\n,\nbindObj\n);\n\n\n\n\n\n\nPython - Sample code for binding\n\n\nbindObj\n \n=\n \nlbvserver_service_binding\n()\n\n\nbindObj\n.\nname\n \n=\n \nMyFirstLbVServer\n\n\nbindObj\n.\nservicename\n \n=\n \nsvc_prod\n\n\nbindObj\n.\nweight\n \n=\n \n20\n\n\nlbvserver_service_binding\n.\nadd\n(\nns_session\n,\n \nbindObj\n)\n\n\n\n\n\n\nThe following code sample unbinds a service from a server.\n\n\nJava - Sample Code for unbinding\n\n\nlbvserver_service_binding\n \nbindObj\n \n=\n \nnew\n \nlbvserver_service_binding\n();\n \n\nbindObj\n.\nset_name\n(\nMyFirstLbVServer\n);\n \n\nbindObj\n.\nset_servicename\n(\nsvc_prod\n);\n \n\nlbvserver_service_binding\n.\ndelete\n(\nns_session\n,\nbindObj\n);\n\n\n\n\n\n\n.NET - Sample code for unbinding\n\n\nlbvserver_service_binding\n \nbindObj\n \n=\n \nnew\n \nlbvserver_service_binding\n();\n \n\nbindObj\n.\nname\n(\nMyFirstLbVServer\n);\n \n\nbindObj\n.\nservicename\n(\nsvc_prod\n);\n \n\nlbvserver_service_binding\n.\ndelete\n(\nns_session\n,\nbindObj\n);\n\n\n\n\n\n\nPython - Sample code for unbinding\n\n\nbindObj\n \n=\n \nlbvserver_service_binding\n()\n\n\nbindObj\n.\nname\n \n=\n \nMyFirstLbVServer\n\n\nbindObj\n.\nservicename\n \n=\n \nsvc_prod\n\n\nlbvserver_service_binding\n.\ndelete\n(\nns_session\n,\n \nbindObj\n)\n\n\n\n\n\n\nGlobally Binding NetScaler Resources\n\n\nSome NetScaler resources can be bound globally to affect the whole system. For example, a compression policy can be bound to an load balancing virtual server, in which case the policy affects only the traffic on that load balancing virtual server. However, if bound globally, it can affect any traffic on the appliance, regardless of which virtual servers handle the traffic.\n\n\nThe names of NITRO resources that can be used to bind resources globally have the pattern \n\\\nglobal_\\\n_binding\n. For example, the object \naaaglobal_aaapreauthenticationpolicy_binding\n is used to bind preauthentication policies globally.\n\n\nUsing REST APIs through HTTP\n\n\nThe following example binds the policy named preautpol1 globally at priority 200.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n \n\n\nhttp://\\\n/nitro/v1/config/aaaglobal_aaapreauthenticationpolicy_binding/preautpol1\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n\naaaglobal_aaapreauthenticationpolicy_binding\n:\n \n    \n{\n \n    \npolicy\n:\npreautpol1\n,\n \n    \npriority\n:\n200\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nThe following example unbinds the policy named preautpol1.\n\n\nRequest\n\n\nHTTP Method:\n DELETE\n\n\nURL:\n \n\n\nhttp://\\\n/nitro/v1/config/aaaglobal_aaapreauthenticationpolicy_binding?args=policy:preautpol1\n\n\nRequest Header:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe following sample code creates a preauthentication action and a preauthentication policy that uses that action, and then binds the policy globally at priority 200.\n\n\nJava - Sample code\n\n\naaapreauthenticationaction\n \npreauth_act1\n;\n \n\n\naaapreauthenticationpolicy\n \npreauth_pol1\n;\n \n\n\naaaglobal_aaapreauthenticationpolicy_binding\n \nglob_binding\n;\n \n\n\npreauth_act1\n \n=\n \nnew\n \naaapreauthenticationaction\n();\n \n\n\npreauth_act1\n.\nset_name\n(\npreauth_act1\n);\n \n\n\npreauth_act1\n.\nset_preauthenticationaction\n(\nALLOW\n);\n \n\n\naaapreauthenticationaction\n.\nadd\n(\nns_session\n,\npreauth_act1\n);\n \n\n\npreauth_pol1\n \n=\n \nnew\n \naaapreauthenticationpolicy\n();\n \n\n\npreauth_pol1\n.\nset_name\n(\npreauth_pol1\n);\n \n\n\npreauth_pol1\n.\nset_rule\n(\nCLIENT.APPLICATION.PROCESS(antivirus.exe) EXISTS\n);\n \n\n\npreauth_pol1\n.\nset_reqaction\n(\npreauth_act1\n);\n \n\n\naaapreauthenticationpolicy\n.\nadd\n(\nns_session\n,\npreauth_pol1\n);\n \n\n\n \nglob_binding\n \n=\n \nnew\n \naaaglobal_aaapreauthenticationpolicy_binding\n();\n \n\n\nglob_binding\n.\nset_policy\n(\npreauth_pol1\n);\n \n\n\nglob_binding\n.\nset_priority\n(\n200\n);\n \n\n\naaaglobal_aaapreauthenticationpolicy_binding\n.\nadd\n(\nns_session\n,\nglob_binding\n);\n\n\n\n\n\n\n.NET - Sample code\n\n\naaapreauthenticationaction\n \npreauth_act1\n;\n \n\n\naaapreauthenticationpolicy\n \npreauth_pol1\n;\n \n\n\naaaglobal_aaapreauthenticationpolicy_binding\n \nglob_binding\n;\n \n\n\npreauth_act1\n \n=\n \nnew\n \naaapreauthenticationaction\n();\n \n\n\npreauth_act1\n.\nname\n \n=\n \npreauth_act1\n;\n \n\n\npreauth_act1\n.\npreauthenticationaction\n \n=\n \nALLOW\n;\n \n\n\naaapreauthenticationaction\n.\nadd\n(\nns_session\n,\n \npreauth_act1\n);\n \n\n\n\n\npreauth_pol1\n \n=\n \nnew\n \naaapreauthenticationpolicy\n();\n \n\n\npreauth_pol1\n.\nname\n \n=\n \npreauth_pol1\n;\n \n\n\npreauth_pol1\n.\nrule\n \n=\n \nCLIENT.APPLICATION.PROCESS(antivirus.exe) EXISTS\n;\n \n\n\npreauth_pol1\n.\nreqaction\n \n=\n \npreauth_act1\n;\n \n\n\naaapreauthenticationpolicy\n.\nadd\n(\nns_session\n,\n \npreauth_pol1\n);\n \n\n\n\n\nglob_binding\n \n=\n \nnew\n \naaaglobal_aaapreauthenticationpolicy_binding\n();\n \n\n\nglob_binding\n.\npolicy\n \n=\n \npreauth_pol1\n;\n  \n\n\nglob_binding\n.\npriority\n \n=\n \n200\n;\n \n\n\naaaglobal_aaapreauthenticationpolicy_binding\n.\nadd\n(\nns_session\n,\nglob_binding\n);\n\n\n\n\n\n\nPython - Sample code\n\n\npreauth_act1\n \n=\n \naaapreauthenticationaction\n()\n\n\n\npreauth_act1\n.\nname\n \n=\n \npreauth_act1\n\n\n\npreauth_act1\n.\npreauthenticationaction\n \n=\n \nALLOW\n\n\n\naaapreauthenticationaction\n.\nadd\n(\nns_session\n,\n \npreauth_act1\n)\n\n\n\n\npreauth_pol1\n \n=\n \naaapreauthenticationpolicy\n()\n\n\n\npreauth_pol1\n.\nname\n \n=\n \npreauth_pol1\n\n\n\npreauth_pol1\n.\nrule\n \n=\n \nCLIENT.APPLICATION.PROCESS(antivirus.exe) EXISTS\n\n\n\npreauth_pol1\n.\nreqaction\n \n=\n \npreauth_act1\n\n\n\naaapreauthenticationpolicy\n.\nadd\n(\nns_session\n,\n \npreauth_pol1\n)\n\n\n\n\nglob_binding\n \n=\n \naaaglobal_aaapreauthenticationpolicy_binding\n()\n\n\n\nglob_binding\n.\npolicy\n \n=\n \npreauth_pol1\n\n\n\nglob_binding\n.\npriority\n \n=\n \n200\n\n\n\naaaglobal_aaapreauthenticationpolicy_binding\n.\nadd\n(\nns_session\n,\n \nglob_binding\n)\n\n\n\n\n\n\nDeleting a NetScaler Resource\n\n\nThe usage of the delete operation depends on the unique identifiers (UIDs) of the resource being deleted.\n\n\nDeleting Resource with Single UID. To delete a NetScaler resource that can be identified by a single identifier, specify the resource name.\nDeleting Resource with Multiple UIDs. To delete a NetScaler resource that is identified using multiple identifiers, use the \"args\" query parameter to specify the unique attributes along with their values.\n\n\nUsing REST APIs through HTTP\n\n\nThe following example deletes a load balancing virtual server named MyFirstLbVServer.\n\n\nRequest\n\n\nHTTP Method:\n DELETE\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver/MyFirstLbVServer\n\n\nRequest Header:\n Cookie:NITRO_AUTH_TOKEN=\\\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nThe following example deletes a resource with multiple UIDs. Consider a SNIP (10.102.29.71) that belongs to two traffic domains (TDs) 123 and 110. To delete the SNIP from one of the traffic domains, specify the IP address and the relevant TD in the URL as follows:\n\n\nRequest\n\n\nHTTP Method:\n DELETE\n\n\nURL:\n \n\n\nhttp://\\\n/nitro/v1/config/nsip?args=ipaddress:10.102.29.71,td:123\n\n\nRequest Header:\n Cookie:NITRO_AUTH_TOKEN=\\\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nTo delete an existing resource, invoke the static method delete() on the resource class, by passing the name of the resource.\n\n\nThe following sample code deletes a load balancing virtual server with name MyFirstLbVServer.\n\n\nJava - Sample code to delete a NetScaler resource\n\n\nlbvserver\n \nremove_lb\n \n=\n \nnew\n \nlbvserver\n();\n \n\nremove_lb\n.\nset_name\n(\nMyFirstLbVServer\n);\n \n\nlbvserver\n.\ndelete\n(\nns_session\n,\n \nremove_lb\n);\n\n\n\n\n\n\n.NET - Sample code to delete a NetScaler resource\n\n\nlbvserver\n \nremove_lb\n \n=\n \nnew\n \nlbvserver\n();\n \n\nremove_lb\n.\nname\n(\nMyFirstLbVServer\n);\n \n\nlbvserver\n.\ndelete\n(\nns_session\n,\n \nremove_lb\n);\n\n\n\n\n\n\nPython - Sample code to delete a NetScaler resource\n\n\nremove_lb\n \n=\n \nlbvserver\n()\n\n\nremove_lb\n.\nname\n \n=\n \nMyFirstLbVServer\n\n\nlbvserver\n.\ndelete\n(\nns_session\n,\n \nremove_lb\n)\n\n\n\n\n\n\nPerforming Bulk Operations\n\n\nYou can create, retrieve, update, and delete multiple resources simultaneously and thus minimize network traffic. For example, you can add multiple load balancing virtual servers in the same operation. \n\n\nTo account for the failure of some operations within the bulk operation, NITRO allows you to configure one of the following behaviors while establishing a connection with the appliance.\n\n\n\n\nExit\n. When the first error is encountered, the execution stops. The commands that were executed before the error are committed.\n\n\nRollback\n. When the first error is encountered, the execution stops. The commands that were executed before the error are rolled back. Rollback is only supported for add and bind commands.\n\n\nContinue\n. All the commands in the list are executed even if some commands fail.\n\n\n\n\nUsing REST APIs through HTTP\n\n\nTo perform a bulk operation, specify the required parameters in the same request payload. You must specify the behavior of the bulk operation in the request header using the X-NITRO-ONERROR parameter.\n\n\nThe following example adds two load balancing virtual servers in one operation. The operation continues even if one of the add operation fails.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nlbvserver\n:\n \n    \n[\n \n        \n{\n \n        \nname\n:\nnew_lbvserver1\n,\n \n        \nservicetype\n:\nhttp\n \n        \n},\n \n\n        \n{\n \n        \nname\n:\nnew_lbvserver2\n,\n \n        \nservicetype\n:\nhttp\n \n        \n}\n \n    \n]\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n\n201 Created for the add operation and 200 OK for the update operation.\n\n\nHTTP Status Code on Failure:\n\n207 Multi Status with error details in the response payload.\n\n\nThe following example enables multiple load balancing virtual servers in the same operation.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver?action=enable\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n\n            \nlbvserver\n:\n\n    \n[\n\n        \n{\n\n            \nname\n:\nv1\n,\n\n        \n},\n\n\n        \n{\n\n            \nname\n:\nv2\n,\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created for the add operation and 200 OK for the update operation.\n\n\nHTTP Status Code on Failure:\n 207 Multi Status with error details in the response payload. \n\n\nUsing REST APIs through SDKs\n\n\nTo perform a bulk operation, you instantiate an array of the resource class, configure the properties of all the instances locally, and then upload all the instances to the NetScaler with one command.\n\n\nThe following sample code specifies bulk operation behavior.\n\n\nJava - Sample code to specify bulk operation behavior\n\n\nnitro_service\n \nns_session\n \n=\n \nnew\n \nnitro_service\n(\n10.102.29.60\n,\nhttp\n);\n \n\nns_session\n.\nset_onerror\n(\nOnerrorEnum\n.\nCONTINUE\n);\n \n\nns_session\n.\nlogin\n(\nadmin\n,\nverysecret\n);\n\n\n\n\n\n\n.NET - Sample code to specify bulk operation behavior\n\n\nnitro_service\n \nns_session\n \n=\n \nnew\n \nnitro_service\n(\n10.102.29.60\n,\nhttp\n);\n \n\nns_session\n.\nonerror\n \n=\n \nOnerrorEnum\n.\nCONTINUE\n;\n \n\nns_session\n.\nlogin\n(\nadmin\n,\nverysecret\n);\n\n\n\n\n\n\nPython - Sample code to specify bulk operation behavior\n\n\nns_session\n \n=\n \nnitro_service\n(\n10.102.29.60\n,\nhttp\n)\n\n\nns_session\n.\nonerror\n \n=\n \nOnerrorEnum\n.\nCONTINUE\n\n\nns_session\n.\nlogin\n(\nadmin\n,\nverysecret\n)\n\n\n\n\n\n\nThe following sample code creates two load balancing virtual servers.\n\n\nJava - Sample code for bulk creation\n\n\n//Create an array of lbvserver instances \n\n\n\nlbvserver\n[]\n \nlbs\n \n=\n \nnew\n \nlbvserver\n[\n2\n];\n \n\n\n//Specify properties of the first lbvserver \n\n\n\nlbs\n[\n0\n]\n \n=\n \nnew\n \nlbvserver\n();\n \n\nlbs\n[\n0\n].\nset_name\n(\nlbvserv1\n);\n \n\nlbs\n[\n0\n].\nset_servicetype\n(\nhttp\n);\n \n\nlbs\n[\n0\n].\nset_ipv46\n(\n10.70.136.5\n);\n \n\nlbs\n[\n0\n].\nset_port\n(\n80\n);\n \n\n\n//Specify properties of the second lbvserver \n\n\n\nlbs\n[\n1\n]\n \n=\n \nnew\n \nlbvserver\n();\n \n\nlbs\n[\n1\n].\nset_name\n(\nlbvserv2\n);\n \n\nlbs\n[\n1\n].\nset_servicetype\n(\nhttps\n);\n \n\nlbs\n[\n1\n].\nset_ipv46\n(\n10.70.136.5\n);\n \n\nlbs\n[\n1\n].\nset_port\n(\n443\n);\n \n\n\n//Upload the properties of the two lbvservers to the NetScaler \n\n\n\nlbvserver\n.\nadd\n(\nns_session\n,\nlbs\n);\n\n\n\n\n\n\n.NET - Sample code for bulk creation\n\n\n//Create an array of lbvserver instances \n\n\nlbvserver\n[]\n \nlbs\n \n=\n \nnew\n \nlbvserver\n[\n2\n];\n \n\n\n//Specify details of first lbvserver \n\n\n\nlbs\n[\n0\n]\n \n=\n \nnew\n \nlbvserver\n();\n \n\nlbs\n[\n0\n].\nname\n \n=\n \nlbvserv1\n;\n \n\nlbs\n[\n0\n].\nservicetype\n \n=\n \nhttp\n;\n \n\nlbs\n[\n0\n].\nipv46\n \n=\n \n10.70.136.5\n;\n \n\nlbs\n[\n0\n].\nport\n \n=\n \n80\n;\n \n\n\n//Specify details of second lbvserver \n\n\n\nlbs\n[\n1\n]\n \n=\n \nnew\n \nlbvserver\n();\n \n\nlbs\n[\n1\n].\nname\n \n=\n \nlbvserv2\n;\n \n\nlbs\n[\n1\n].\nservicetype\n \n=\n \nhttps\n;\n \n\nlbs\n[\n1\n].\nipv46\n \n=\n \n10.70.136.5\n;\n \n\nlbs\n[\n1\n].\nport\n \n=\n \n443\n;\n \n\n\n//upload the details of the lbvservers to the NITRO server \n\n\n\nlbvserver\n.\nadd\n(\nns_session\n,\nlbs\n);\n\n\n\n\n\n\nPython - Sample code for bulk creation\n\n\n#Create an array of lbvserver instances\n\n\n\nlbs\n \n=\n \nlbvserver\n[\n2\n]\n\n\n\n#Specify properties of the first lbvserver\n\n\n\nlbs\n[\n0\n]\n \n=\n \nlbvserver\n()\n\n\nlbs\n[\n0\n]\n.\nname\n \n=\n \nlbvserv1\n\n\nlbs\n[\n0\n]\n.\nservicetype\n \n=\n \nhttp\n\n\nlbs\n[\n0\n]\n.\nipv46\n \n=\n \n10.70.136.5\n\n\nlbs\n[\n0\n]\n.\nport\n \n=\n \n80\n\n\n\n#Specify properties of the second lbvserver\n\n\n\nlbs\n[\n1\n]\n \n=\n \nlbvserver\n()\n\n\nlbs\n[\n1\n]\n.\nname\n \n=\n \nlbvserv2\n\n\nlbs\n[\n1\n]\n.\nservicetype\n \n=\n \nhttps\n\n\nlbs\n[\n1\n]\n.\nipv46\n \n=\n \n10.70.136.5\n\n\nlbs\n[\n1\n]\n.\nport\n \n=\n \n443\n\n\n\n#Upload the properties of the two lbvservers to the NetScaler\n\n\n\nlbvserver\n.\nadd\n(\nns_session\n,\n \nlbs\n)\n\n\n\n\n\n\nGetting the Count of NetScaler Resources\n\n\nThis topic covers getting the count of a type of NetScaler resource present in a NetScaler appliance by using REST APIs through HTTP. \n\n\nUsing REST APIs through HTTP\n\n\nTo get a count of a specific resource type, in the URL specify the count query parameter as \"yes\".\n\n\nFor example, to get a count of all the load balancing virtual servers.\n\n\nRequest\n\n\nHTTP Method:\n GET\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver?count=yes\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nAccept:application/json\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nResponse Header:\n\n\nContent-Type:application/json\n\n\nResponse Payload:\n\n\n{\n \n    \nlbvserver\n:\n \n    \n[\n \n        \n{\n \n            \n__count\n:\n \n4\n \n        \n}\n \n    \n]\n \n\n}\n\n\n\n\n\n\nRenaming a NetScaler Resource\n\n\nThis topic covers renaming a NetScaler resource by using REST APIs through HTTP. \n\n\nUsing REST APIs through HTTP\n\n\nTo change the name of an existing resource, specify the action as \"rename\" in the URL query string, and in the request payload, specify the existing name and the new name.\n\n\nFor example, to change the name of a load balancing virtual server from MyFirstLbVServer to MyServer:\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver?action=rename\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nlbvserver\n:\n \n    \n{\n \n        \nname\n:\nMyFirstLbVServer\n,\n \n        \nnewname\n:\nMyServer\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nPerforming File Operations\n\n\nNetScaler operations such as configuring SSL certificates requires the input files to be available locally on the NetScaler appliance. NITRO allows you to perform file operations such as uploading files, retrieving files, retrieving file content, and deleting files of types: txt, cert, req, xml, lic, and key.\n\n\nNotes\n\n\n\n\nFile size must be less than or equal to 2 MB.\n\n\nUse the \"BASE64\" value for the fileencoding attribute in the request payload. This is the only valid encoding currently supported.\n\n\nThe filelocation path must be URL encoded. For example, if the path is /nsconfig/ssl, encode the / and use the file location as %2Fnsconfig%2Fssl.\n\n\nWhen uploading a file, make sure that each directory of the file path has the 755 (read, write, execute) permission. For example, to upload a file to the \"/nsconfig/ssl/\" directory, the following directories must have the 755 permission:\nflash (because the \"/nsconfig\" folder is actually a link to \"/flash/nsconfig/\" directory)\n\n\nnsconfig\n\n\nssl\n\n\n\n\n\n\n\n\nUploading a File\n\n\nTo upload a file to the NetScaler, specify a name for the file, the location where the file must be created on the NetScaler, and the content of the file.\n\n\nUsing REST APIs through HTTP\n\n\nFor example, to upload a file named cert1.crt in the /nsconfig/ssl/ directory:\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/systemfile\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n        \nsystemfile\n:\n \n        \n{\n \n            \nfilename\n:\n \ncert1.crt\n,\n \n            \nfilelocation\n:\n \n/nsconfig/ssl/\n,\n        \n            \nfilecontent\n:\nVGhpcyBpcyBteSBmaWxl\n,\n \n            \nfileencoding\n:\n \nBASE64\n \n        \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nRetrieving the Files\n\n\nTo retrieve the files from a specific NetScaler directory, specify the directory path in the URL.\n\n\nUsing REST APIs through HTTP\n\n\nFor example, to retrieve the files from the /nsconfig/ssl directory.\n\n\nRequest\n\n\nHTTP Method:\n GET\n\n\nURL:\n\n\nhttp://\\\n/nitro/v1/config/systemfile?args=filelocation:%2Fnsconfig%2Fssl\n\n\nRequest Header:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nAccept:application/json\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nResponse Header:\n\n\nContent-Type:application/json\n\n\nResponse Payload:\n\n\n{\n \n    \nsystemfile\n:\n  \n    \n[\n  \n            \nfilename\n:\n \nns-root.key\n,\n  \n            \nfilelocation\n:\n \n/nsconfig/ssl\n,\n  \n            \nfileaccesstime\n:\n \nTue Jan 14 19:27:01 2014\n,\n  \n            \nfilemodifiedtime\n:\n \nTue Nov  5 17:16:00 2013\n \n        \n}\n,\n  \n        \n{\n \n        \n{\n  \n            \nfilename\n:\n \nns-root.req\n,\n  \n            \nfilelocation\n:\n \n/nsconfig/ssl\n,\n  \n            \nfileaccesstime\n:\n \nTue Jan 14 19:27:01 2014\n,\n  \n            \nfilemodifiedtime\n:\n \nTue Nov  5 17:16:00 2013\n  \n        \n}\n \n    \n]\n \n\n}\n \n\n\n\n\n\nRetrieving Contents of a Specific File\n\n\nTo retrieve the contents of a file, specify the filename and its directory path in the URL.\n\n\nUsing REST APIs through HTTP\n\n\nFor example, to retrieve the contents of the ns-root.key file from the /nsconfig/ssl directory.\n\n\nRequest\n\n\nHTTP Method:\n GET\n\n\nURL:\n http://\\\n/nitro/v1/config/systemfile/ns-root.key?args=filelocation:%2Fnsconfig%2Fssl\n\n\nRequest Header:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nAccept:application/json\n\n\nResponse\n\n\nHTTP Status Code on Success:\n\n\n200 OK\n\n\nHTTP Status Code on Failure:\n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for \nNetScaler-specific errors). The response payload provides details of the error.\n\n\nResponse Header:\n\n\nContent-Type:application/json\n\n\nResponse Payload:\n\n\n{\n \n    \nsystemfile\n:\n  \n    \n[\n  \n        \n{\n  \n            \nfilename\n:\n \nns-root.key\n,\n  \n            \nfilelocation\n:\n \n/nsconfig/ssl\n,\n  \n            \nfilecontent\n:\n \nLS0tLS1CRUdJTiBSU0EgUFJJVkFU0tLQo=\n,\n  \n            \nfileencoding\n:\n \nBASE64\n,\n  \n            \nfileaccesstime\n:\n \nTue Jan 14 19:27:01 2014\n,\n  \n            \nfilemodifiedtime\n:\n \nTue Nov  5 17:16:00 2013\n  \n        \n}\n  \n    \n]\n  \n\n}\n\n\n\n\n\n\nDeleting a File\n\n\nTo delete a file from the NetScaler appliance, specify the filename and the directory path in the URL.\n\n\nUsing REST APIs through HTTP\n\n\nFor example, to delete the ns-root.key file from the /nsconfig/ssl directory.\n\n\nRequest:\n\n\nHTTP Method:\n DELETE\n\n\nURL:\n https://\\\n/nitro/v1/config/systemfile/ns-root.key?args=filelocation:%2Fnsconfig%2Fssl\n\n\nRequest Header:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n \n\n\n4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.", 
            "title": "Performing NetScaler Resource Operations"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#performing-netscaler-resource-operations", 
            "text": "NetScaler resources are organized into a set of packages or namespaces. Each package or namespace corresponds to a NetScaler feature. For example, all load-balancing related resources, such as load balancing virtual server, load balancing group, and load balancing monitor are available in com.citrix.netscaler.nitro.resource.config.lb.  Similarly, all application firewall related resources, such as application firewall policy and application firewall archive are available in com.citrix.netscaler.nitro.resource.config.appfw.  Each NetScaler resource is represented by a class. For example, the class that represents a load balancing virtual server is called lbvserver (in com.citrix.netscaler.nitro.resource.config.lb). The state of a resource is represented by properties of a class. You can get and set the properties of the class.  The setter and getter properties are always executed locally on the client. They do not involve any network interaction with the NITRO web service. All properties have basic simple types: integer, long, boolean, and string.", 
            "title": "Performing NetScaler Resource Operations"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#adding-a-netscaler-resource", 
            "text": "This topic covers adding a NetScaler resource by using REST APIs through HTTP or SDKs.   Using REST APIs through HTTP  To create a new resource (for example, an lbvserver) on the appliance, specify the resource name and other related arguments in the specific resource object.  For example, to create an load balancing virtual server named MyFirstLbVServer:  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/lbvserver  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     lbvserver :  \n     {  \n     name : MyFirstLbVServer ,  \n     servicetype : http  \n     }   }   Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  To create a new resource, instantiate the resource class, configure the resource by setting its properties locally, and then upload the new resource instance to the NetScaler appliance.  The following sample code creates a load balancing virtual server.  Java - Sample code to add a NetScaler resource  //Create an instance of the lbvserver class   lbvserver   new_lbvserver_obj   =   new   lbvserver ();   //Set the properties of the resource locally   new_lbvserver_obj . set_name ( MyFirstLbVServer );   new_lbvserver_obj . set_ipv46 ( 10.102.29.88 );   new_lbvserver_obj . set_port ( 88 );   new_lbvserver_obj . set_servicetype ( HTTP );   new_lbvserver_obj . set_lbmethod ( ROUNDROBIN );   //Upload the resource to NetScaler   lbvserver . add ( ns_session , new_lbvserver_obj );   .NET - Sample code to add a NetScaler resource  //Create an instance of the lbvserver class   lbvserver   new_lbvserver_obj   =   new   lbvserver ();    //Set the properties of the resource locally   new_lbvserver_obj . name   =   MyFirstLbVServer ;   new_lbvserver_obj . ipv46   =   10.102.29.88 ;   new_lbvserver_obj . port   =   88 ;   new_lbvserver_obj . servicetype   =   HTTP ;   new_lbvserver_obj . lbmethod   =   ROUNDROBIN ;   //Upload the resource to NetScaler   lbvserver . add ( ns_session , new_lbvserver_obj );   Python - Sample code to add a NetScaler resource  #Create an instance of the lbvserver class  new_lbvserver_obj   =   lbvserver ()  #Set the properties of the resource locally  new_lbvserver_obj . name   =   MyFirstLbVServer  new_lbvserver_obj . ipv46   =   10.102.29.88  new_lbvserver_obj . port   =   88  new_lbvserver_obj . servicetype   =   HTTP  new_lbvserver_obj . lbmethod   =   ROUNDROBIN  #Upload the resource to NetScaler  lbvserver . add ( ns_session ,   new_lbvserver_obj )", 
            "title": "Adding a NetScaler Resource"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#enabling-a-netscaler-resource", 
            "text": "This topic covers enabling a NetScaler resource by using REST APIs through HTTP or SDKs.   Using REST APIs through HTTP  To enable a resource on the NetScaler appliance, specify the action as \"enable\" in the URL query string, and in the request payload, specify the resource to be enabled. To disable a resource, in the URL query string, specify the action as \"disable\".  For example, to enable a load balancing virtual server named MyFirstLbVServer.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/lbvserver?action=enable  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     lbvserver :  \n     {  \n     name : MyFirstLbVServer  \n     }   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  To enable a resource, invoke the enable() method and to disable, invoke the disable() method.  The following sample code enables a load balancing virtual server named lb_vip.  Java - Sample code to enable a NetScaler resource  lbvserver   obj   =   new   lbvserver ();  obj . set_name ( lb_vip );  lbvserver . enable ( ns_session ,   obj );   .NET - Sample code to enable a NetScaler resource  lbvserver   obj   =   new   lbvserver ();   obj . name   =   lb_vip ;   lbvserver . enable ( ns_session ,   obj );   Python - Sample code to enable a NetScaler resource  obj   =   lbvserver ()  obj . name   =   lb_vip  lbvserver . enable ( ns_session ,   obj )", 
            "title": "Enabling a NetScaler Resource"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#retrieving-properties-of-netscaler-resources", 
            "text": "This topic covers retrieving properties of a NetScaler resource by using REST APIs through HTTP or SDKs.   Using REST APIs through HTTP  NITRO provides multiple approaches using which you can retrieve resources and their relevant details. The following table explains each of these approaches with the required URL.  \n     Retrieving all details of all resources of a specific type \n     \n     In the URL, specify the type of resource for which you want to retrieve the details. \n     For example, to retrieve all details of load balancing virtual servers available on a NetScaler appliance. \n     http:// netscaler-ip-address /nitro/v1/config/lbvserver \n     \n     Retrieving all details of a specific resource \n     \n     In the URL, specify the name of resource for which you want to retrieve the details. \n     For example, to retrieve all details of a load balancing virtual server named MyFirstLbVServer: \n     http:// netscaler-ip-address /nitro/v1/config/lbvserver/MyFirstLbVServer \n     \n     Retrieving summary or detailed view of resources \n     \n     In the URL, use the \" view \" query parameter to specify whether you want to view the summary (mandatory parameters) or detail (all parameters). \n     For example, to view the mandatory parameters for all load balancing virtual servers: \n     http:// netscaler-ip-address /nitro/v1/config/lbvserver?view=summary Note:  By default, the retrieved results are displayed in detail view (?view=detail). \n     \n     \n     Retrieving all details of resources that have multiple unique identifiers \n     \n     In the URL, specify the type of resource and use the \" args \" query parameter to specify the unique attributes and the values for those attributes. \n     For example, to get the application firewall profiles that have unique identifiers \"name\" and \"starturl\" as appfw1 and aa respectively. \n     http:// netscaler-ip-address /nitro/v1/config/appfwprofile?args=name:appfw1,starturl:aa \n     \n     Retrieving specific details of all resources of a specific type \n     \n     In the URL, specify the type of the resource and use the \" attrs \" query parameter to specify the resource details that you want to retrieve. \n     For example, to retrieve the \"name\" and \"lbmethod\" of all load balancing virtual servers: \n     http:// netscaler-ip-address /nitro/v1/config/lbvserver?attrs=name,lbmethod \n     \n     Retrieving specific details of a specific resource \n     \n     In the URL, specify the type and name of the resource and use the \" attrs \" query parameter to specify the resource details that you want to retrieve. \n     For example, to retrieve the \"name\" and \"lbmethod\" of a load balancing virtual server named \"MyFirstLbVServer\": \n     http:// netscaler-ip-address /nitro/v1/config/lbvserver/MyFirstLbVServer?attrs=name,lbmethod \n     \n     Filtering the retrieved resources \n     \n     In the URL, specify the type of resource and use the \" filter \" query parameter to specify the attribute(s) and the value(s) of the attributes. The resources fetched will be filtered based on the filter criteria. \n     Note:  The filter query parameter supports the use of PCRE regular expressions. \n     \n     For example, to filter the load balancing virtual servers where the \"lbmethod\" is ROUNDROBIN. \n     http:// netscaler-ip-address /nitro/v1/config/lbvserver?filter=lbmethod:ROUNDROBIN \n     \n     Retrieving resources in paginated manner \n     \n     If the request is likely to result in a large number of resources, you can divide the results into pages and retrieve them page by page (paginated). For example, if you are retrieving all the 53 load balancing virtual servers of a NetScaler appliance, instead of retrieving all 53 in one response, you can configure the results to be divided into 6 pages each having 10 results. \n     In the URL, specify the name of the resource and use the following query parameters: \n     \" pageno \" - The page number to be displayed. \n     \" pagesize \" - The number of resources to be displayed in each page. \n     \n     \n     For example, to retrieve the load balancing virtual servers in a paginated form, first get a count (using the \"count\" query parameter shown in below row) of the load balancing virtual servers. Then, accordingly specify the number of results for each page and then specify the page number to be displayed. \n     http:// netscaler-ip-address /nitro/v1/config/lbvserver?pagesize=10 pageno=3 \n     \n     \n      For example, to retrieve only the name and load balancing method of all load balancing virtual servers on a NetScaler.  Request  HTTP Method:  GET  URL:  http://\\ /nitro/v1/config/lbvserver?attrs=name,lbmethod  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Accept:application/json  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Response Header:  Content-Type:application/json  Response Payload:  {  \n     lbvserver:  \n     {  \n         name:   test ,  \n         lbmethod:   LEASTCONNECTION  \n     }  \n     {  \n         name:   test1 ,  \n         lbmethod:   LEASTCONNECTION  \n     }   }   Using REST APIs through SDKs  To retrieve the properties of a resource, you retrieve the resource object from the NetScaler appliance. Once the object is retrieved, you can extract the required properties of the resource locally, without further network traffic.  The following sample code retrieves the details of a load balancing virtual server.  Java - Sample code to get details of resource  //Retrieve the resource object from the NetScaler   new_lbvserver_obj   =   lbvserver . get ( ns_session , MyFirstLbVServer );   //Extract the properties of the resource from the object locally   System . out . println ( new_lbvserver_obj . get_name ());   System . out . println ( new_lbvserver_obj . get_servicetype ());   .NET - Sample code to get details of resource  //Retrieve the resource object from the NetScaler   new_lbvserver_obj   =   lbvserver . get ( ns_session , MyFirstLbVServer );   //Extract the properties of the resource from the object locally   Console . WriteLine ( new_lbvserver_obj . name );   Console . WriteLine ( new_lbvserver_obj . servicetype );   Python - Sample code to get details of resource  #Retrieve the resource object from the NetScaler  new_lbvserver_obj   =   lbvserver . get ( ns_session , MyFirstLbVServer )  #Extract the properties of the resource from the object locally  print ( new_lbvserver_obj . name )  print ( new_lbvserver_obj . servicetype )", 
            "title": "Retrieving Properties of NetScaler Resources"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#filtering-results", 
            "text": "This topic covers retrieving filtered information of a resource by using REST APIs through SDKs.   Using REST APIs through SDKs  You can also retrieve resources by specifying a filter on the value of their properties by using the com.citrix.netscaler.nitro.util.filtervalue class.  For example, you can retrieve all the load balancing virtual servers that have their port set to 80 and servicetype to HTTP.  Java - Sample code to get filtered results  filtervalue []   filter   =   new   filtervalue [ 2 ];  filter [ 0 ]   =   new   filtervalue ( port , 80 );  filter [ 1 ]   =   new   filtervalue ( servicetype , HTTP );  lbvserver []   result   =   lbvserver . get_filtered ( ns_session , filter );   .NET - Sample code to get filtered results  filtervalue []   filter   =   new   filtervalue [ 2 ];   filter [ 0 ]   =   new   filtervalue ( port , 80 );   filter [ 1 ]   =   new   filtervalue ( servicetype , HTTP );   lbvserver []   result   =   lbvserver . get_filtered ( ns_session , filter );   Python - Sample code to get filtered results  filter_params   =   [] \n\n       filter_params   =   [   filtervalue ()   for   _   in   range ( 2 )] \n\n       filter_params [ 0 ]   =   filtervalue ( servicetype , HTTP ) \n\n       filter_params [ 1 ]   =   filtervalue ( port , 80 ) \n\n       result   =   lbvserver . get_filtered ( ns_session1 ,   filter_params )", 
            "title": "Filtering Results"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#retrieving-statistics-of-netscaler-resources", 
            "text": "The NetScaler appliance collects statistics about the usage of its features and the corresponding resources. NITRO can retrieve these statistics. Not all NetScaler features and resources have statistic objects associated with them.  Using REST APIs through HTTP  To get statistics of a feature, the URL format must be: http://\\ /nitro/v1/stat/\\ .  To get statistics of a resource, the URL format must be: http://\\ /nitro/v1/stat/\\ /\\ .  To get statistics of the services and service groups that are bound to a load balancing virtual server, the URL format must be: http://\\ /nitro/v1/stat/lbvserver/\\ ?statbindings=yes*.  Request  HTTP Method:  GET  URL:  http://\\ /nitro/v1/stat/lbvserver/MyFirstLbVServer  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\  Accept:application/json  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Response Payload:  { \n\n     lbvserver : \n\n     [ \n\n         { \n\n             name : MyFirstLbVServer , \n\n             establishedconn : 0 , \n\n             vslbhealth : 0 , \n\n             primaryipaddress : 0.0.0.0 , \n\n             ... \n\n         } \n\n     ]  }   To get statistics of the bound entities, use statbindings=yes.\nFor example, to get the statistics of the services that are bound to a load balancing virtual server named MyFirstLbVServer.  Request  HTTP Method:  GET  URL:  http://\\ /nitro/v1/stat/lbvserver/MyFirstLbVServer?statbindings=yes  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\  Accept:application/json  Response  HTTP Status code on success:  200 OK    HTTP Status code on failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.     Response Header:  Content-Type:application/json  Response Payload:  {  lbvserver :   [{ \n\n\n     name :   MyFirstLbVServer , \n\n\n     sortorder :   descending , \n\n\n     vsvrsurgecount :   0 , \n\n\n     establishedconn :   0 , \n\n     ... \n\n     service :   [{ \n\n\n         name :   s1 , \n\n\n         throughput :   0 , \n\n\n         throughputrate :   0 , \n\n\n         avgsvrttfb :   0 ,   \n\n\n         primaryipaddress :   1.2.3.5 , \n\n\n         primaryport :   80 , \n\n\n         servicetype :   HTTP , \n\n\n         state :   DOWN , \n\n\n             totalrequests :   0 , \n\n\n             requestsrate :   0 , \n\n             ... \n\n             }] \n     }]  }   Using REST APIs through SDKs  The NetScaler appliance collects statistics about the usage of its features and the corresponding resources. You can retrieve these statistics by using NITRO API. The statistics APIs are available in different packages from the configuration APIs.  For example, the API to retrieve statistics of the load balancing virtual server are available in \ncom.citrix.netscaler.nitro.resource.stat.lb.  Note.   For the python SDK, the package path is of the form nssrc.com.citrix.netscaler......  Not all NetScaler features and resources have statistic objects associated with them.  The following sample code retrieves the statistics of a load balancing virtual server and displays some of the statistics returned.  Java - Sample code to get feature statistics  lbvserver_stats   stats   =   lbvserver_stats . get ( ns_session , MyFirstLbVServer );   System . out . println ( stats . get_curclntconnections ());   System . out . println ( stats . get_deferredreqrate ());   .NET - Sample code to get feature statistics  lbvserver_stats   stats   =   lbvserver_stats . get ( ns_session , MyFirstLbVServer );  Console . WriteLine ( stats . curclntconnections );  Console . WriteLine ( stats . deferredreqrate );   Python - Sample code to get feature statistics  stats   =   lbvserver_stats . get ( ns_session , MyFirstLbVServer )  print ( stats . curclntconnections )  print ( stats . deferredreqrate )", 
            "title": "Retrieving Statistics of NetScaler Resources"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#retrieving-statistics-of-netscaler-resources_1", 
            "text": "The NetScaler appliance collects statistics about the usage of its features and the corresponding resources. NITRO can retrieve these statistics. Not all NetScaler features and resources have statistic objects associated with them.  Using REST APIs through HTTP  To get statistics of a feature, the URL format must be: http://\\ /nitro/v1/stat/\\ .  To get statistics of a resource, the URL format must be: http://\\ /nitro/v1/stat/\\ /\\ .  To get statistics of the services and service groups that are bound to a load balancing virtual server, the URL format must be: http://\\ /nitro/v1/stat/lbvserver/\\ ?statbindings=yes*.  Request  HTTP Method:  GET  URL:  http://\\ /nitro/v1/stat/lbvserver/MyFirstLbVServer  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\  Accept:application/json  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Response Payload:  { \n\n     lbvserver : \n\n     [ \n\n         { \n\n             name : MyFirstLbVServer , \n\n             establishedconn : 0 , \n\n             vslbhealth : 0 , \n\n             primaryipaddress : 0.0.0.0 , \n\n             ... \n\n         } \n\n     ]  }   To get statistics of the bound entities, use statbindings=yes.\nFor example, to get the statistics of the services that are bound to a load balancing virtual server named MyFirstLbVServer.  Request  HTTP Method:  GET  URL:  http://\\ /nitro/v1/stat/lbvserver/MyFirstLbVServer?statbindings=yes  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\  Accept:application/json  Response  HTTP Status code on success:  200 OK    HTTP Status code on failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.     Response Header:  Content-Type:application/json  Response Payload:  {  lbvserver :   [{ \n\n\n     name :   MyFirstLbVServer , \n\n\n     sortorder :   descending , \n\n\n     vsvrsurgecount :   0 , \n\n\n     establishedconn :   0 , \n\n     ... \n\n     service :   [{ \n\n\n         name :   s1 , \n\n\n         throughput :   0 , \n\n\n         throughputrate :   0 , \n\n\n         avgsvrttfb :   0 ,   \n\n\n         primaryipaddress :   1.2.3.5 , \n\n\n         primaryport :   80 , \n\n\n         servicetype :   HTTP , \n\n\n         state :   DOWN , \n\n\n             totalrequests :   0 , \n\n\n             requestsrate :   0 , \n\n             ... \n\n             }] \n     }]  }   Using REST APIs through SDKs  The NetScaler appliance collects statistics about the usage of its features and the corresponding resources. You can retrieve these statistics by using NITRO API. The statistics APIs are available in different packages from the configuration APIs.  For example, the API to retrieve statistics of the load balancing virtual server are available in \ncom.citrix.netscaler.nitro.resource.stat.lb.  Note:   For the python SDK, the package path is of the form nssrc.com.citrix.netscaler......  Not all NetScaler features and resources have statistic objects associated with them.  The following sample code retrieves the statistics of a load balancing virtual server and displays some of the statistics returned.  Java - Sample code to get feature statistics  lbvserver_stats   stats   =   lbvserver_stats . get ( ns_session , MyFirstLbVServer );   System . out . println ( stats . get_curclntconnections ());   System . out . println ( stats . get_deferredreqrate ());   .NET - Sample code to get feature statistics  lbvserver_stats   stats   =   lbvserver_stats . get ( ns_session , MyFirstLbVServer );  Console . WriteLine ( stats . curclntconnections );  Console . WriteLine ( stats . deferredreqrate );   Python - Sample code to get feature statistics  stats   =   lbvserver_stats . get ( ns_session , MyFirstLbVServer )  print ( stats . curclntconnections )  print ( stats . deferredreqrate )", 
            "title": "Retrieving Statistics of NetScaler Resources"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#updating-a-netscaler-resource", 
            "text": "You can modify the properties of a resource after creating it.  Some properties in some NetScaler resources are not allowed to be modified after creation. The port number or the service type (protocol) of a load balancing virtual server or a service, are examples of such properties. Even though the update method appears to succeed, these properties retain their original values on the appliance.  Using REST APIs through HTTP  To update the details of an existing resource on the NetScaler appliance, specify the name of the resource in the URL, and in the request payload,within the specific resource object, specify the name and the updated details of the resource.  For example, to change the load balancing method to ROUNDROBIN and update the comment property for a load balancing virtual server named MyFirstLbVServer:  Request  HTTP Method:  PUT  URL:  http://\\ /nitro/v1/config/lbvserver/MyFirstLbVServer  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     lbvserver :  \n     {  \n         name : MyFirstLbVServer ,  \n         lbmethod : ROUNDROBIN ,  \n         comment : Updated comments  \n     }   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  To update the properties of a resource, instantiate the resource class, specify the name of the resource to be updated, configure the resource by updating its properties locally, and then upload the updated resource instance to the NetScaler appliance.  The following sample code updates the service type and load balancing method of a load balancing virtual server.  Java - Sample code to update a NetScaler resource  //Create an instance of the lbvserver class   lbvserver   update_lb   =   new   lbvserver ();   //Specify the name of the lbvserver to be updated   update_lb . set_name ( MyFirstLbVServer );   //Specify the updated service type and lb method   update_lb . set_servicetype ( https );   update_lb . set_lbmethod ( LEASTRESPONSETIME );   //Upload the resource to NetScaler   lbvserver . update ( ns_session , update_lb );   .NET - Sample code to update a NetScaler resource  //Create an instance of the lbvserver class   lbvserver   update_lb   =   new   lbvserver ();   //Specify the name of the lbvserver to be updated   update_lb . name   =   MyFirstLbVServer ;   //Specify the updated service type and lb method   update_lb . servicetype   =   https ;   update_lb . lbmethod   =   LEASTRESPONSETIME ;   //Upload the resource to NetScaler   lbvserver . update ( ns_session ,   update_lb );   Python - Sample code to update a NetScaler resource  #Create an instance of the lbvserver class  update_lb   =   lbvserver ()  #Specify the name of the lbvserver to be updated  update_lb . name   =   MyFirstLbVServer  #Specify the updated service type and lb method  update_lb . servicetype   =   https  update_lb . lbmethod   =   LEASTRESPONSETIME  #Upload the resource to the NetScaler  lbvserver . update ( ns_session ,   update_lb )", 
            "title": "Updating a NetScaler Resource"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#binding-netscaler-resources", 
            "text": "NetScaler resources form relationships with each other through the process of binding. This is how services are associated with a load balancing virtual server, or how policies are bound to a load balancing virtual server. Each binding relationship is represented by its own object.  A binding resource has properties representing the name of each NetScaler resource in the binding relationship. It can also have other properties related to that relationship (for example, the weight of the binding between an lbvserver resource and a service resource).  Using REST APIs through HTTP  To bind one NetScaler resource to another, you must instantiate the appropriate binding class (for example, to bind a service to a load balancing virtual server, you must instantiate the lbvserver_service_binding class) and add it to the NetScaler configuration (by using the static add() method on this class).  To unbind a resource, use the DELETE method and specify an \"args\" query string parameter in the URL that contains the attribute name and value in the relationship resource that designates the secondary resource.  The following example binds a service named svc_prod to a load balancing virtual server named MyFirstLbVServer and specify a weight for the binding.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/lbvserver_service_binding  Request Headers: \nCookie:NITRO_AUTH_TOKEN=\\  \nContent-Type:application/json  Request Payload:  {   lbvserver_service_binding :  \n     {  \n     servicename : svc_prod ,  \n     weight : 20 ,  \n     name : MyFirstLbVServer  \n     }   }   Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:   4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  The following example binds a policy to a policy label.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/authenticationpolicylabel_authenticationpolicy_binding  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {   authenticationpolicylabel_authenticationpolicy_binding :  \n     {  \n     policyname : p1 ,  \n     priority : 100 ,  \n     gotopriorityexpression : END ,  \n     labelname : pl1  \n     }   }   Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  The following example unbinds the service svc_prod from the load balancing virtual server MyFirstLbVServer.  Request  HTTP Method:  DELETE  URL:  http://\\ /nitro/v1/config/lbvserver_service_binding/MyFirstLbVServer?args=servicename:svc_prod  Request Header:  Cookie:NITRO_AUTH_TOKEN=\\  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  To bind one NetScaler resource to another, you must instantiate the appropriate binding class (for example, to bind a service to a load balancing virtual server, you must instantiate the lbvserver_service_binding class) and add it to the NetScaler configuration (by using the static add() method on this class).  To unbind a resource from another, invoke the delete() method from the resource binding class, by passing the name of the two resources.  The following sample code binds a service to a load balancing virtual server, by specifying a certain weight for the binding.  Java - Sample code for binding    lbvserver_service_binding   bindObj   =   new   lbvserver_service_binding ();   bindObj . set_name ( MyFirstLbVServer );   bindObj . set_servicename ( svc_prod );   bindObj . set_weight ( 20 );   lbvserver_service_binding . add ( ns_session , bindObj );   .NET - Sample code for binding  lbvserver_service_binding   bindObj   =   new   lbvserver_service_binding ();   bindObj . name   =   MyFirstLbVServer ;   bindObj . servicename   =   svc_prod ;   bindObj . weight   =   20 ;   lbvserver_service_binding . add ( ns_session , bindObj );   Python - Sample code for binding  bindObj   =   lbvserver_service_binding ()  bindObj . name   =   MyFirstLbVServer  bindObj . servicename   =   svc_prod  bindObj . weight   =   20  lbvserver_service_binding . add ( ns_session ,   bindObj )   The following code sample unbinds a service from a server.  Java - Sample Code for unbinding  lbvserver_service_binding   bindObj   =   new   lbvserver_service_binding ();   bindObj . set_name ( MyFirstLbVServer );   bindObj . set_servicename ( svc_prod );   lbvserver_service_binding . delete ( ns_session , bindObj );   .NET - Sample code for unbinding  lbvserver_service_binding   bindObj   =   new   lbvserver_service_binding ();   bindObj . name ( MyFirstLbVServer );   bindObj . servicename ( svc_prod );   lbvserver_service_binding . delete ( ns_session , bindObj );   Python - Sample code for unbinding  bindObj   =   lbvserver_service_binding ()  bindObj . name   =   MyFirstLbVServer  bindObj . servicename   =   svc_prod  lbvserver_service_binding . delete ( ns_session ,   bindObj )", 
            "title": "Binding NetScaler Resources"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#globally-binding-netscaler-resources", 
            "text": "Some NetScaler resources can be bound globally to affect the whole system. For example, a compression policy can be bound to an load balancing virtual server, in which case the policy affects only the traffic on that load balancing virtual server. However, if bound globally, it can affect any traffic on the appliance, regardless of which virtual servers handle the traffic.  The names of NITRO resources that can be used to bind resources globally have the pattern  \\ global_\\ _binding . For example, the object  aaaglobal_aaapreauthenticationpolicy_binding  is used to bind preauthentication policies globally.  Using REST APIs through HTTP  The following example binds the policy named preautpol1 globally at priority 200.  Request  HTTP Method:  POST  URL:    http://\\ /nitro/v1/config/aaaglobal_aaapreauthenticationpolicy_binding/preautpol1  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {   aaaglobal_aaapreauthenticationpolicy_binding :  \n     {  \n     policy : preautpol1 ,  \n     priority : 200  \n     }   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  The following example unbinds the policy named preautpol1.  Request  HTTP Method:  DELETE  URL:    http://\\ /nitro/v1/config/aaaglobal_aaapreauthenticationpolicy_binding?args=policy:preautpol1  Request Header:  Cookie:NITRO_AUTH_TOKEN=\\  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The following sample code creates a preauthentication action and a preauthentication policy that uses that action, and then binds the policy globally at priority 200.  Java - Sample code  aaapreauthenticationaction   preauth_act1 ;   aaapreauthenticationpolicy   preauth_pol1 ;   aaaglobal_aaapreauthenticationpolicy_binding   glob_binding ;   preauth_act1   =   new   aaapreauthenticationaction ();   preauth_act1 . set_name ( preauth_act1 );   preauth_act1 . set_preauthenticationaction ( ALLOW );   aaapreauthenticationaction . add ( ns_session , preauth_act1 );   preauth_pol1   =   new   aaapreauthenticationpolicy ();   preauth_pol1 . set_name ( preauth_pol1 );   preauth_pol1 . set_rule ( CLIENT.APPLICATION.PROCESS(antivirus.exe) EXISTS );   preauth_pol1 . set_reqaction ( preauth_act1 );   aaapreauthenticationpolicy . add ( ns_session , preauth_pol1 );  \n\n\n  glob_binding   =   new   aaaglobal_aaapreauthenticationpolicy_binding ();   glob_binding . set_policy ( preauth_pol1 );   glob_binding . set_priority ( 200 );   aaaglobal_aaapreauthenticationpolicy_binding . add ( ns_session , glob_binding );   .NET - Sample code  aaapreauthenticationaction   preauth_act1 ;   aaapreauthenticationpolicy   preauth_pol1 ;   aaaglobal_aaapreauthenticationpolicy_binding   glob_binding ;   preauth_act1   =   new   aaapreauthenticationaction ();   preauth_act1 . name   =   preauth_act1 ;   preauth_act1 . preauthenticationaction   =   ALLOW ;   aaapreauthenticationaction . add ( ns_session ,   preauth_act1 );   preauth_pol1   =   new   aaapreauthenticationpolicy ();   preauth_pol1 . name   =   preauth_pol1 ;   preauth_pol1 . rule   =   CLIENT.APPLICATION.PROCESS(antivirus.exe) EXISTS ;   preauth_pol1 . reqaction   =   preauth_act1 ;   aaapreauthenticationpolicy . add ( ns_session ,   preauth_pol1 );   glob_binding   =   new   aaaglobal_aaapreauthenticationpolicy_binding ();   glob_binding . policy   =   preauth_pol1 ;    glob_binding . priority   =   200 ;   aaaglobal_aaapreauthenticationpolicy_binding . add ( ns_session , glob_binding );   Python - Sample code  preauth_act1   =   aaapreauthenticationaction ()  preauth_act1 . name   =   preauth_act1  preauth_act1 . preauthenticationaction   =   ALLOW  aaapreauthenticationaction . add ( ns_session ,   preauth_act1 )  preauth_pol1   =   aaapreauthenticationpolicy ()  preauth_pol1 . name   =   preauth_pol1  preauth_pol1 . rule   =   CLIENT.APPLICATION.PROCESS(antivirus.exe) EXISTS  preauth_pol1 . reqaction   =   preauth_act1  aaapreauthenticationpolicy . add ( ns_session ,   preauth_pol1 )  glob_binding   =   aaaglobal_aaapreauthenticationpolicy_binding ()  glob_binding . policy   =   preauth_pol1  glob_binding . priority   =   200  aaaglobal_aaapreauthenticationpolicy_binding . add ( ns_session ,   glob_binding )", 
            "title": "Globally Binding NetScaler Resources"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#deleting-a-netscaler-resource", 
            "text": "The usage of the delete operation depends on the unique identifiers (UIDs) of the resource being deleted.  Deleting Resource with Single UID. To delete a NetScaler resource that can be identified by a single identifier, specify the resource name.\nDeleting Resource with Multiple UIDs. To delete a NetScaler resource that is identified using multiple identifiers, use the \"args\" query parameter to specify the unique attributes along with their values.  Using REST APIs through HTTP  The following example deletes a load balancing virtual server named MyFirstLbVServer.  Request  HTTP Method:  DELETE  URL:  http://\\ /nitro/v1/config/lbvserver/MyFirstLbVServer  Request Header:  Cookie:NITRO_AUTH_TOKEN=\\  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  The following example deletes a resource with multiple UIDs. Consider a SNIP (10.102.29.71) that belongs to two traffic domains (TDs) 123 and 110. To delete the SNIP from one of the traffic domains, specify the IP address and the relevant TD in the URL as follows:  Request  HTTP Method:  DELETE  URL:    http://\\ /nitro/v1/config/nsip?args=ipaddress:10.102.29.71,td:123  Request Header:  Cookie:NITRO_AUTH_TOKEN=\\  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  To delete an existing resource, invoke the static method delete() on the resource class, by passing the name of the resource.  The following sample code deletes a load balancing virtual server with name MyFirstLbVServer.  Java - Sample code to delete a NetScaler resource  lbvserver   remove_lb   =   new   lbvserver ();   remove_lb . set_name ( MyFirstLbVServer );   lbvserver . delete ( ns_session ,   remove_lb );   .NET - Sample code to delete a NetScaler resource  lbvserver   remove_lb   =   new   lbvserver ();   remove_lb . name ( MyFirstLbVServer );   lbvserver . delete ( ns_session ,   remove_lb );   Python - Sample code to delete a NetScaler resource  remove_lb   =   lbvserver ()  remove_lb . name   =   MyFirstLbVServer  lbvserver . delete ( ns_session ,   remove_lb )", 
            "title": "Deleting a NetScaler Resource"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#performing-bulk-operations", 
            "text": "You can create, retrieve, update, and delete multiple resources simultaneously and thus minimize network traffic. For example, you can add multiple load balancing virtual servers in the same operation.   To account for the failure of some operations within the bulk operation, NITRO allows you to configure one of the following behaviors while establishing a connection with the appliance.   Exit . When the first error is encountered, the execution stops. The commands that were executed before the error are committed.  Rollback . When the first error is encountered, the execution stops. The commands that were executed before the error are rolled back. Rollback is only supported for add and bind commands.  Continue . All the commands in the list are executed even if some commands fail.   Using REST APIs through HTTP  To perform a bulk operation, specify the required parameters in the same request payload. You must specify the behavior of the bulk operation in the request header using the X-NITRO-ONERROR parameter.  The following example adds two load balancing virtual servers in one operation. The operation continues even if one of the add operation fails.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/lbvserver  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     lbvserver :  \n     [  \n         {  \n         name : new_lbvserver1 ,  \n         servicetype : http  \n         },  \n\n         {  \n         name : new_lbvserver2 ,  \n         servicetype : http  \n         }  \n     ]   }   Response  HTTP Status Code on Success: \n201 Created for the add operation and 200 OK for the update operation.  HTTP Status Code on Failure: \n207 Multi Status with error details in the response payload.  The following example enables multiple load balancing virtual servers in the same operation.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/lbvserver?action=enable  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\  Content-Type:application/json  Request Payload:  { \n             lbvserver : \n     [ \n         { \n             name : v1 , \n         }, \n\n         { \n             name : v2 , \n         } \n     ]  }   Response  HTTP Status Code on Success:  201 Created for the add operation and 200 OK for the update operation.  HTTP Status Code on Failure:  207 Multi Status with error details in the response payload.   Using REST APIs through SDKs  To perform a bulk operation, you instantiate an array of the resource class, configure the properties of all the instances locally, and then upload all the instances to the NetScaler with one command.  The following sample code specifies bulk operation behavior.  Java - Sample code to specify bulk operation behavior  nitro_service   ns_session   =   new   nitro_service ( 10.102.29.60 , http );   ns_session . set_onerror ( OnerrorEnum . CONTINUE );   ns_session . login ( admin , verysecret );   .NET - Sample code to specify bulk operation behavior  nitro_service   ns_session   =   new   nitro_service ( 10.102.29.60 , http );   ns_session . onerror   =   OnerrorEnum . CONTINUE ;   ns_session . login ( admin , verysecret );   Python - Sample code to specify bulk operation behavior  ns_session   =   nitro_service ( 10.102.29.60 , http )  ns_session . onerror   =   OnerrorEnum . CONTINUE  ns_session . login ( admin , verysecret )   The following sample code creates two load balancing virtual servers.  Java - Sample code for bulk creation  //Create an array of lbvserver instances   lbvserver []   lbs   =   new   lbvserver [ 2 ];   //Specify properties of the first lbvserver   lbs [ 0 ]   =   new   lbvserver ();   lbs [ 0 ]. set_name ( lbvserv1 );   lbs [ 0 ]. set_servicetype ( http );   lbs [ 0 ]. set_ipv46 ( 10.70.136.5 );   lbs [ 0 ]. set_port ( 80 );   //Specify properties of the second lbvserver   lbs [ 1 ]   =   new   lbvserver ();   lbs [ 1 ]. set_name ( lbvserv2 );   lbs [ 1 ]. set_servicetype ( https );   lbs [ 1 ]. set_ipv46 ( 10.70.136.5 );   lbs [ 1 ]. set_port ( 443 );   //Upload the properties of the two lbvservers to the NetScaler   lbvserver . add ( ns_session , lbs );   .NET - Sample code for bulk creation  //Create an array of lbvserver instances   lbvserver []   lbs   =   new   lbvserver [ 2 ];   //Specify details of first lbvserver   lbs [ 0 ]   =   new   lbvserver ();   lbs [ 0 ]. name   =   lbvserv1 ;   lbs [ 0 ]. servicetype   =   http ;   lbs [ 0 ]. ipv46   =   10.70.136.5 ;   lbs [ 0 ]. port   =   80 ;   //Specify details of second lbvserver   lbs [ 1 ]   =   new   lbvserver ();   lbs [ 1 ]. name   =   lbvserv2 ;   lbs [ 1 ]. servicetype   =   https ;   lbs [ 1 ]. ipv46   =   10.70.136.5 ;   lbs [ 1 ]. port   =   443 ;   //upload the details of the lbvservers to the NITRO server   lbvserver . add ( ns_session , lbs );   Python - Sample code for bulk creation  #Create an array of lbvserver instances  lbs   =   lbvserver [ 2 ]  #Specify properties of the first lbvserver  lbs [ 0 ]   =   lbvserver ()  lbs [ 0 ] . name   =   lbvserv1  lbs [ 0 ] . servicetype   =   http  lbs [ 0 ] . ipv46   =   10.70.136.5  lbs [ 0 ] . port   =   80  #Specify properties of the second lbvserver  lbs [ 1 ]   =   lbvserver ()  lbs [ 1 ] . name   =   lbvserv2  lbs [ 1 ] . servicetype   =   https  lbs [ 1 ] . ipv46   =   10.70.136.5  lbs [ 1 ] . port   =   443  #Upload the properties of the two lbvservers to the NetScaler  lbvserver . add ( ns_session ,   lbs )", 
            "title": "Performing Bulk Operations"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#getting-the-count-of-netscaler-resources", 
            "text": "This topic covers getting the count of a type of NetScaler resource present in a NetScaler appliance by using REST APIs through HTTP.   Using REST APIs through HTTP  To get a count of a specific resource type, in the URL specify the count query parameter as \"yes\".  For example, to get a count of all the load balancing virtual servers.  Request  HTTP Method:  GET  URL:  http://\\ /nitro/v1/config/lbvserver?count=yes  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Accept:application/json  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Response Header:  Content-Type:application/json  Response Payload:  {  \n     lbvserver :  \n     [  \n         {  \n             __count :   4  \n         }  \n     ]   }", 
            "title": "Getting the Count of NetScaler Resources"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#renaming-a-netscaler-resource", 
            "text": "This topic covers renaming a NetScaler resource by using REST APIs through HTTP.   Using REST APIs through HTTP  To change the name of an existing resource, specify the action as \"rename\" in the URL query string, and in the request payload, specify the existing name and the new name.  For example, to change the name of a load balancing virtual server from MyFirstLbVServer to MyServer:  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/lbvserver?action=rename  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     lbvserver :  \n     {  \n         name : MyFirstLbVServer ,  \n         newname : MyServer  \n     }   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.", 
            "title": "Renaming a NetScaler Resource"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#performing-file-operations", 
            "text": "NetScaler operations such as configuring SSL certificates requires the input files to be available locally on the NetScaler appliance. NITRO allows you to perform file operations such as uploading files, retrieving files, retrieving file content, and deleting files of types: txt, cert, req, xml, lic, and key.  Notes   File size must be less than or equal to 2 MB.  Use the \"BASE64\" value for the fileencoding attribute in the request payload. This is the only valid encoding currently supported.  The filelocation path must be URL encoded. For example, if the path is /nsconfig/ssl, encode the / and use the file location as %2Fnsconfig%2Fssl.  When uploading a file, make sure that each directory of the file path has the 755 (read, write, execute) permission. For example, to upload a file to the \"/nsconfig/ssl/\" directory, the following directories must have the 755 permission:\nflash (because the \"/nsconfig\" folder is actually a link to \"/flash/nsconfig/\" directory)  nsconfig  ssl", 
            "title": "Performing File Operations"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#uploading-a-file", 
            "text": "To upload a file to the NetScaler, specify a name for the file, the location where the file must be created on the NetScaler, and the content of the file.  Using REST APIs through HTTP  For example, to upload a file named cert1.crt in the /nsconfig/ssl/ directory:  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/systemfile  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n         systemfile :  \n         {  \n             filename :   cert1.crt ,  \n             filelocation :   /nsconfig/ssl/ ,         \n             filecontent : VGhpcyBpcyBteSBmaWxl ,  \n             fileencoding :   BASE64  \n         }   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.", 
            "title": "Uploading a File"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#retrieving-the-files", 
            "text": "To retrieve the files from a specific NetScaler directory, specify the directory path in the URL.  Using REST APIs through HTTP  For example, to retrieve the files from the /nsconfig/ssl directory.  Request  HTTP Method:  GET  URL:  http://\\ /nitro/v1/config/systemfile?args=filelocation:%2Fnsconfig%2Fssl  Request Header:  Cookie:NITRO_AUTH_TOKEN=\\  Accept:application/json  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Response Header:  Content-Type:application/json  Response Payload:  {  \n     systemfile :   \n     [   \n             filename :   ns-root.key ,   \n             filelocation :   /nsconfig/ssl ,   \n             fileaccesstime :   Tue Jan 14 19:27:01 2014 ,   \n             filemodifiedtime :   Tue Nov  5 17:16:00 2013  \n         } ,   \n         {  \n         {   \n             filename :   ns-root.req ,   \n             filelocation :   /nsconfig/ssl ,   \n             fileaccesstime :   Tue Jan 14 19:27:01 2014 ,   \n             filemodifiedtime :   Tue Nov  5 17:16:00 2013   \n         }  \n     ]   }", 
            "title": "Retrieving the Files"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#retrieving-contents-of-a-specific-file", 
            "text": "To retrieve the contents of a file, specify the filename and its directory path in the URL.  Using REST APIs through HTTP  For example, to retrieve the contents of the ns-root.key file from the /nsconfig/ssl directory.  Request  HTTP Method:  GET  URL:  http://\\ /nitro/v1/config/systemfile/ns-root.key?args=filelocation:%2Fnsconfig%2Fssl  Request Header:  Cookie:NITRO_AUTH_TOKEN=\\  Accept:application/json  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for \nNetScaler-specific errors). The response payload provides details of the error.  Response Header:  Content-Type:application/json  Response Payload:  {  \n     systemfile :   \n     [   \n         {   \n             filename :   ns-root.key ,   \n             filelocation :   /nsconfig/ssl ,   \n             filecontent :   LS0tLS1CRUdJTiBSU0EgUFJJVkFU0tLQo= ,   \n             fileencoding :   BASE64 ,   \n             fileaccesstime :   Tue Jan 14 19:27:01 2014 ,   \n             filemodifiedtime :   Tue Nov  5 17:16:00 2013   \n         }   \n     ]    }", 
            "title": "Retrieving Contents of a Specific File"
        }, 
        {
            "location": "/performing-netscaler-resource-operations/#deleting-a-file", 
            "text": "To delete a file from the NetScaler appliance, specify the filename and the directory path in the URL.  Using REST APIs through HTTP  For example, to delete the ns-root.key file from the /nsconfig/ssl directory.  Request:  HTTP Method:  DELETE  URL:  https://\\ /nitro/v1/config/systemfile/ns-root.key?args=filelocation:%2Fnsconfig%2Fssl  Request Header:  Cookie:NITRO_AUTH_TOKEN=\\  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:    4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.", 
            "title": "Deleting a File"
        }, 
        {
            "location": "/usecases/", 
            "text": "Use Cases and Samples\n\n\nThis section covers some use case scenarios to certain resources and scenarios. More scenarios will be added in future updates to this section.\n\n\nManaging a NetScaler Cluster\n\n\nFor managing clusters, you can add or remove a cluster instance or an individual node and perform a few other instance or node operations such as viewing instance or node properties. You can also configure the cluster IP address. Other cluster-management tasks include joining a NetScaler appliance to the cluster and configuring a linkset. For detailed information and best practices, see Clustering.\n\n\nCluster Instance Operations\n\n\nThis topic covers cluster instance operations by using REST APIs through HTTP or SDKs. \n\n\nUsing REST APIs through HTTP\n\n\nAll operations on a cluster instance must be performed on the clusterinstance object.\n\n\nFor example, to create a cluster instance with ID 1, connect to the NetScaler appliance that you are first adding to the cluster.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/clusterinstance\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nclusterinstance\n:\n \n    \n{\n \n    \nclid\n:\n1\n,\n \n    \npreemption\n:\nENABLED\n \n    \n}\n \n\n}\n \n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe com.citrix.netscaler.nitro.resource.config.cluster.clusterinstance class provides APIs to manage a cluster instance.\n\n\nThe following sample code creates a cluster instance with ID 1.\n\n\nJava - Sample code to create a cluster instance\n\n\nclusterinstance\n \nnew_cl_inst_obj\n \n=\n \nnew\n \nclusterinstance\n();\n \n\n\n//Set the properties of the cluster instance locally \n\n\n\nnew_cl_inst_obj\n.\nset_clid\n(\n1\n);\n \n\nnew_cl_inst_obj\n.\nset_preemption\n(\nENABLED\n);\n \n\n\n//Upload the cluster instance \n\n\n\nclusterinstance\n.\nadd\n(\nns_session\n,\nnew_cl_inst_obj\n);\n\n\n\n\n\n\n.NET - Sample code to create a cluster instance\n\n\nclusterinstance\n \nnew_cl_inst_obj\n \n=\n \nnew\n \nclusterinstance\n();\n \n\n\n//Set the properties of the cluster instance locally \n\n\n\nnew_cl_inst_obj\n.\nclid\n \n=\n \n1\n;\n \n\n\nnew_cl_inst_obj\n.\npreemption\n \n=\n \nENABLED\n;\n \n\n\n\n\n//Upload the cluster instance \n\n\n\nclusterinstance\n.\nadd\n(\nns_session\n,\nnew_cl_inst_obj\n);\n\n\n\n\n\n\nPython - Sample code to create a cluster instance\n\n\nnew_cl_inst_obj\n \n=\n \nclusterinstance\n()\n \n\n\n\n\n#Set the properties of the cluster instance locally \n\n\n\nnew_cl_inst_obj\n.\nclid\n \n=\n \n1\n \n\n\n\n\n#Upload the cluster instance \n\n\n\nclusterinstance\n.\nadd\n(\nns_session\n,\n \nnew_cl_inst_obj\n)\n\n\n\n\n\n\nCluster Node Operations\n\n\nThis topic covers cluster node operations by using REST APIs through HTTP or SDKs. \n\n\nUsing REST APIs through HTTP\n\n\nAll operations on a cluster node must be performed on the clusternode object. For example, to add a NetScaler appliance with NSIP address 10.102.29.60 to the cluster.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/clusternode\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n\nclusternode\n:\n \n    \n{\n \n    \nnodeid\n:\n1\n,\n \n    \nipaddress\n:\n10.102.29.60\n,\n \n    \nstate\n:\nACTIVE\n,\n \n    \nbackplane\n:\n1/1/2\n \n    \n}\n \n\n}\n \n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe com.citrix.netscaler.nitro.resource.config.cluster.clusternode class provides APIs to manage cluster nodes.\n\n\nThe following sample code adds a cluster node with NSIP address 10.102.29.60.\n\n\nJava - Sample code to add a cluster node\n\n\nclusternode\n \nnew_cl_node_obj\n \n=\n \nnew\n \nclusternode\n();\n \n\n\n//Set the properties of the cluster node locally \n\n\n\nnew_cl_node_obj\n.\nset_nodeid\n(\n0\n);\n \n\n\nnew_cl_node_obj\n.\nset_ipaddress\n(\n10.102.29.60\n);\n \n\n\nnew_cl_node_obj\n.\nset_state\n(\nACTIVE\n);\n \n\n\nnew_cl_node_obj\n.\nset_backplane\n(\n0/1/1\n);\n \n\n\n\n\n//Upload the cluster node \n\n\n\nclusternode\n.\nadd\n(\nns_session\n,\nnew_cl_node_obj\n);\n\n\n\n\n\n\n.NET - Sample code to add a cluster node\n\n\nclusternode\n \nnew_cl_node_obj\n \n=\n \nnew\n \nclusternode\n();\n \n\n\n//Set the properties of the cluster node locally \n\n\n\nnew_cl_node_obj\n.\nnodeid\n \n=\n \n0\n;\n \n\n\nnew_cl_node_obj\n.\nipaddress\n \n=\n \n10.102.29.60\n;\n \n\n\nnew_cl_node_obj\n.\nstate\n \n=\n \nACTIVE\n;\n \n\n\nnew_cl_node_obj\n.\nbackplane\n \n=\n \n0/1/1\n;\n \n\n\n\n\n//Upload the cluster node \n\n\n\nclusternode\n.\nadd\n(\nns_session\n,\nnew_cl_node_obj\n);\n\n\n\n\n\n\nPython - Sample code to add a cluster node\n\n\nnew_cl_node_obj\n \n=\n \nclusternode\n()\n \n\n\n\n#Set the properties of the cluster node locally \n\n\n\nnew_cl_node_obj\n.\nnodeid\n \n=\n \n0\n \n\n\nnew_cl_node_obj\n.\nipaddress\n \n=\n \n10.102.29.60\n \n\n\nnew_cl_node_obj\n.\nstate\n \n=\n \nACTIVE\n \n\n\nnew_cl_node_obj\n.\nbackplane\n \n=\n \n0/1/1\n \n\n\n\n#Upload the cluster node \n\n\n\nclusternode\n.\nadd\n(\nns_session\n,\n \nnew_cl_node_obj\n)\n\n\n\n\n\n\nAdd a Cluster IP Address\n\n\nThis topic covers adding a cluster IP address by using REST APIs through HTTP or SDKs. \n\n\nUsing REST APIs through HTTP\n\n\nTo define a cluster IP address, specify the required parameters in the nsip object. For example, to configure a cluster IP address.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/nsip\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n\nnsip\n:\n \n    \n{\n \n    \nipaddress\n:\n10.102.29.61\n,\n  \n    \nnetmask\n:\n255.255.255.255\n,\n \n    \ntype\n:\nCLIP\n \n    \n}\n \n\n}\n \n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe com.citrix.netscaler.nitro.resource.config.ns.nsip class provides the add() API to configure an IP address. To configure the IP address as a cluster IP address, you must specify the type as CLIP.\n\n\nThe following sample code configures a cluster IP address on NetScaler appliance with IP address 10.102.29.60.\n\n\nJava - Sample code to add a cluster IP address\n\n\nnsip\n \nnew_nsip_obj\n \n=\n \nnew\n \nnsip\n();\n \n\n\n//Set the properties locally \n\n\n\nnew_nsip_obj\n.\nset_ipaddress\n(\n10.102.29.61\n);\n \n\n\nnew_nsip_obj\n.\nset_netmask\n(\n255.255.255.255\n);\n \n\n\nnew_nsip_obj\n.\nset_type\n(\nCLIP\n);\n \n\n\n\n\n//Upload the cluster node \n\n\n\nnsip\n.\nadd\n(\nns_session\n,\nnew_nsip_obj\n);\n\n\n\n\n\n\n.NET - Sample code to add a cluster IP address\n\n\nnsip\n \nnew_nsip_obj\n \n=\n \nnew\n \nnsip\n();\n \n\n\n//Set the properties locally \n\n\n\nnew_nsip_obj\n.\nipaddress\n \n=\n \n10.102.29.61\n;\n \n\n\nnew_nsip_obj\n.\nnetmask\n \n=\n \n255.255.255.255\n;\n \n\n\nnew_nsip_obj\n.\ntype\n \n=\n \nCLIP\n;\n \n\n\n\n\n//Upload the cluster node \n\n\n\nnsip\n.\nadd\n(\nns_session\n,\nnew_nsip_obj\n);\n\n\n\n\n\n\nPython - Sample code to add a cluster IP address\n\n\nnew_nsip_obj\n \n=\n \nnsip\n()\n \n\n\n\n#Set the properties locally \n\n\n\nnew_nsip_obj\n.\nipaddress\n \n=\n \n10.102.29.61\n \n\n\nnew_nsip_obj\n.\nnetmask\n \n=\n \n255.255.255.255\n \n\n\nnew_nsip_obj\n.\ntype\n \n=\n \nCLIP\n \n\n\n\n#Upload the cluster node \n\n\n\nnsip\n.\nadd\n(\nns_session\n,\n \nnew_nsip_obj\n)\n\n\n\n\n\n\nAdd a Spotted IP Address\n\n\nThis topic covers adding a spotted IP address by using REST APIs through HTTP or SDKs. \n\n\nUsing REST APIs through HTTP\n\n\nTo configure an IP address as spotted, specify the required parameters in the nsip object. This configuration must be done on the cluster IP address.\n\n\nFor example, to configure a spotted SNIP address on a node with ID 1.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/nsip\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n\nnsip\n:\n \n    \n{\n \n    \nipaddress\n:\n10.102.29.77\n,\n  \n    \nnetmask\n:\n255.255.255.0\n,\n \n    \ntype\n:\nSNIP\n,\n \n    \nownernode\n:\n1\n \n    \n}\n \n\n}\n \n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe com.citrix.netscaler.nitro.resource.config.ns.nsip class provides the add() API to configure an IP address. To configure the IP address as spotted, you must specify the ID of the node that must own the IP address. This configuration must be done on the cluster IP address.\n\n\nThe following sample code configures a spotted SNIP address on a node with ID 1.\n\n\nJava - Sample code to configure a spotted IP address\n\n\nnsip\n \nnew_nsip_obj\n \n=\n \nnew\n \nnsip\n();\n\n\n\n//Set the properties locally\n\n\n\nnew_nsip_obj\n.\nset_ipaddress\n(\n10.102.29.77\n);\n\n\n\nnew_nsip_obj\n.\nset_netmask\n(\n255.255.255.0\n);\n\n\n\nnew_nsip_obj\n.\nset_type\n(\nSNIP\n);\n\n\n\nnew_nsip_obj\n.\nset_ownernode\n(\n1\n);\n\n\n\n\n//Upload the cluster node\n\n\n\nnsip\n.\nadd\n(\nns_session\n,\nnew_nsip_obj\n);\n\n\n\n\n\n\n.NET - Sample code to configure a spotted IP address\n\n\nnsip\n \nnew_nsip_obj\n \n=\n \nnew\n \nnsip\n();\n \n\n\n//Set the properties locally \n\n\n\nnew_nsip_obj\n.\nipaddress\n \n=\n \n10.102.29.77\n;\n \n\n\nnew_nsip_obj\n.\nnetmask\n \n=\n \n255.255.255.0\n;\n \n\n\nnew_nsip_obj\n.\ntype\n \n=\n \nSNIP\n;\n \n\n\nnew_nsip_obj\n.\nownernode\n \n=\n \n1\n;\n \n\n\n\n\n//Upload the cluster node \n\n\n\nnsip\n.\nadd\n(\nns_session\n,\nnew_nsip_obj\n);\n\n\n\n\n\n\nPython - Sample code to configure a spotted IP address\n\n\n#Add a spotted IP address\n\n\n\nnew_nsip_obj\n \n=\n \nnsip\n()\n\n\n\n\n#Set the properties locally\n\n\n\nnew_nsip_obj\n.\nipaddress\n \n=\n \n10.102.29.77\n\n\n\nnew_nsip_obj\n.\nnetmask\n \n=\n \n255.255.255.0\n\n\n\nnew_nsip_obj\n.\ntype\n \n=\n \nSNIP\n\n\n\nnew_nsip_obj\n.\nownernode\n \n=\n \n1\n\n\n\n\n#Upload the cluster node\n\n\n\nnsip\n.\nadd\n(\nns_session\n,\n \nnew_nsip_obj\n)\n\n\n\n\n\n\nJoin NetScaler Appliance to Cluster\n\n\nThis topic covers adding a NetScaler appliance to a cluster by using REST APIs through HTTP or SDKs. \n\n\nUsing REST APIs through HTTP\n\n\nTo join an appliance to a cluster, specify the required parameters in the cluster object. For example, to join a NetScaler appliance to a cluster.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/cluster\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n\ncluster\n:\n \n    \n{\n \n    \nclip\n:\n10.102.29.61\n,\n \n    \npassword\n:\nverysecret\n \n    \n}\n \n\n}\n \n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe com.citrix.netscaler.nitro.resource.config.cluster.cluster class provides the join() API to join a NetScaler appliance to the cluster. You must specify the cluster IP address and the nsroot password of the configuration coordinator.\n\n\nThe following sample code joins a NetScaler appliance to a cluster.\n\n\nJava - Sample code to join an appliance to a cluster\n\n\ncluster\n \nnew_cl_obj\n \n=\n \nnew\n \ncluster\n();\n \n\n\n//Set the properties of the cluster  locally \n\n\n\nnew_cl_obj\n.\nset_clip\n(\n10.102.29.61\n);\n \n\n\nnew_cl_obj\n.\nset_password\n(\nverysecret\n);\n \n\n\n\n\n//Upload the cluster \n\n\n\ncluster\n.\nadd\n(\nns_session\n,\nnew_cl_obj\n);\n\n\n\n\n\n\n.NET - Sample code to join an appliance to a cluster\n\n\ncluster\n \nnew_cl_obj\n \n=\n \nnew\n \ncluster\n();\n \n\n\n//Set the properties of the cluster locally \n\n\n\nnew_cl_obj\n.\nclip\n \n=\n \n10.102.29.61\n;\n \n\n\nnew_cl_obj\n.\npassword\n \n=\n \nverysecret\n;\n \n\n\n\n//Upload the cluster node \n\n\n\ncluster\n.\nadd\n(\nns_session\n,\nnew_cl_node_obj\n);\n\n\n\n\n\n\nPython - Sample code to join an appliance to a cluster\n\n\nnew_cl_obj\n \n=\n \ncluster\n()\n\n\n\n\n#Set the properties of the cluster locally\n\n\n\nnew_cl_obj\n.\nclip\n \n=\n \n10.102.29.61\n\n\n\nnew_cl_obj\n.\npassword\n \n=\n \nverysecret\n\n\n\n\n#Upload the cluster\n\n\ncluster\n.\nadd\n(\nns_session\n,\n \nnew_cl_obj\n)\n\n\n\n\n\n\nLinkset Operations\n\n\nThis topic covers some linkset operations by using REST APIs through HTTP or SDKs. \n\n\nUsing REST APIs through HTTP\n\n\nTo configure a linkset, do the following:\n\n\nCreate a linkset by specifying the required parameters in the linkset object. For example, to add a linkset LS/1:\n\n\nRequest:\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/linkset\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload\n\n\n{\n \n\nlinkset\n:\n \n    \n{\n \n    \nid\n:\nLS/1\n \n\n}\n \n\n}\n \n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nBind the required interfaces to the linkset by specifying the interfaces in the linkset_interface_binding object.For example, to bind interfaces 1/1/2 and 2/1/2 to linkset LS/1.\n\n\nRequest\n\n\nHTTP Method:\n PUT\n\n\nURL:\n http://\\\n/nitro/v1/config/linkset_interface_binding/LS%2F1?action=bind\n\nNote.\n The linkset name (LS/1), must be URL encoded as LS%2F1.\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n\nlinkset_interface_binding\n:\n \n    \n{\n \n    \nid\n:\nLS/1\n,\n \n    \nifnum\n:\n1/1/2 2/1/2\n \n    \n}\n \n\n}\n \n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 Ok\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe com.citrix.netscaler.nitro.resource.config.network.linkset class provides the APIs to manage linksets.\n\n\nTo configure a linkset, do the following:\n\n\n\n\nAdd a linkset by invoking the add() method of the linkset class.\n\n\nBind the interfaces to the linkset using the add() method of the linkset_interface_binding class.\n\n\n\n\nThe following sample code creates a linkset LS/1 and bind interfaces 1/1/2 and 2/1/2 to it.\n\n\nJava - Sample code to configure linksets\n\n\nlinkset\n \nnew_linkset_obj\n \n=\n \nnew\n \nlinkset\n();\n \n\n\nnew_linkset_obj\n.\nset_id\n(\nLS/1\n);\n \n\n\nlinkset\n.\nadd\n(\nns_session\n,\nnew_linkset_obj\n);\n \n\n\n\n\n//Bind the interfaces to the linkset \n\n\n\nlinkset_interface_binding\n \nnew_linkif_obj\n \n=\n \nnew\n \nlinkset_interface_binding\n();\n \n\n\nnew_linkif_obj\n.\nset_id\n(\nLS/1\n);\n \n\n\nnew_linkif_obj\n.\nset_ifnum\n(\n1/1/2 2/1/2\n);\n \n\n\nlinkset_interface_binding\n.\nadd\n(\nns_session\n,\nnew_linkif_obj\n);\n\n\n\n\n\n\n.NET - Sample code to configure linksets\n\n\nlinkset\n \nnew_linkset_obj\n \n=\n \nnew\n \nlinkset\n();\n \n\n\nnew_linkset_obj\n.\nid\n \n=\n \nLS/1\n;\n \n\n\nlinkset\n.\nadd\n(\nns_session\n,\nnew_linkset_obj\n);\n \n\n\n\n//Bind the interfaces to the linkset \n\n\n\nlinkset_interface_binding\n \nnew_linkif_obj\n \n=\n \nnew\n \nlinkset_interface_binding\n();\n \n\n\nnew_linkif_obj\n.\nid\n \n=\n \nLS/1\n;\n \n\n\nnew_linkif_obj\n.\nifnum\n \n=\n \n1/1/2 2/1/2\n;\n \n\n\nlinkset_interface_binding\n.\nadd\n(\nns_session\n,\nnew_linkif_obj\n);\n \n\n\n\n\n\nPython - Sample code to configure linksets\n\n\n#Create a new linkset\n\n\n\nnew_linkset_obj\n \n=\n \nlinkset\n()\n\n\n\nnew_linkset_obj\n.\nid\n \n=\n \nLS/1\n\n\n\nlinkset\n.\nadd\n(\nns_session\n,\n \nnew_linkset_obj\n)\n\n\n\n\n\n#Bind the interfaces to the linkset\n\n\n\nnew_linkif_obj\n \n=\n \nlinkset_interface_binding\n()\n\n\n\nnew_linkif_obj\n.\nid\n \n=\n \nLS/1\n\n\n\nnew_linkif_obj\n.\nifnum\n \n=\n \n1/1/2 2/1/2\n\n\n\nlinkset_interface_binding\n.\nadd\n(\nns_session\n,\n \nnew_linkif_obj\n)\n\n\n\n\n\n\nConfiguring Admin Partitions\n\n\nTo create an admin partition, you must perform a set of operations on the default partition. To understand this procedure, let us consider a company that has two departments each of which has an application that requires the NetScaler functionality. The NetScaler admin wants to have a different partition for each department so that there is isolation of users and configurations. For detailed information and best practices, see Admin Partitions.\n\n\nCreating an Admin Partition\n\n\nWhile creating an admin partition, you must also specify the system resources that must be allocated to that partition.\n\n\nUsing REST APIs through HTTP\n\n\nThe following example creates an admin partition named partition-dept1.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/nspartition\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n\nnspartition\n:\n \n\n{\n \n    \npartitionname\n:\npartition-dept1\n,\n \n    \nmaxbandwidth\n:\n10240\n,\n  \n    \nminbandwidth\n:\n10240\n,\n \n    \nmaxconn\n:\n1024\n,\n \n    \nmaxmemlimit\n:\n10\n \n\n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe following sample code creates an admin partition named partition-dept1.\n\n\nJava - Sample code to create an admin partition\n\n\nnspartition\n \nnspartitionObject\n \n=\n \nnew\n \nnspartition\n();\n \n\n\nnspartitionObject\n.\nset_partitionname\n(\npartition-dept1\n);\n \n\n\nnspartitionObject\n.\nset_maxbandwidth\n(\n10240\n);\n \n\n\nnspartitionObject\n.\nset_maxconn\n(\n1024\n);\n \n\n\nnspartitionObject\n.\nset_maxmemlimit\n(\n10\n);\n \n\n\nnspartitionObject\n.\nset_minbandwidth\n(\n1240\n);\n \n\n\nbase_response\n \nresult\n \n=\n \nnspartition\n.\nadd\n(\nnitroService\n,\n \nnspartitionObject\n);\n\n\n\n\n\n\n.NET - Sample code to create an admin partition\n\n\nnspartition\n \nnspartitionObject\n \n=\n \nnew\n \nnspartition\n();\n \n\n\nnspartitionObject\n.\npartitionname\n \n=\n \npartition-dept1\n;\n \n\n\nnspartitionObject\n.\nmaxbandwidth\n \n=\n \n10240\n;\n \n\n\nnspartitionObject\n.\nmaxconn\n \n=\n \n1024\n;\n \n\n\nnspartitionObject\n.\nmaxmemlimit\n \n=\n \n10\n;\n \n\n\nnspartitionObject\n.\nminbandwidth\n \n=\n \n1240\n;\n \n\n\nbase_response\n \nresult\n \n=\n \nnspartition\n.\nadd\n(\nnitroService\n,\n \nnspartitionObject\n);\n\n\n\n\n\n\nPython - Sample code to create an admin partition\n\n\nnspartitionObject\n \n=\n \nnspartition\n()\n\n\n\nnspartitionObject\n.\npartitionname\n \n=\n \npartition-dept1\n\n\n\nnspartitionObject\n.\nmaxbandwidth\n \n=\n \n10240\n\n\n\nnspartitionObject\n.\nmaxconn\n \n=\n \n1024\n\n\n\nnspartitionObject\n.\nmaxmemlimit\n \n=\n \n10\n\n\n\nnspartitionObject\n.\nminbandwidth\n \n=\n \n1240\n\n\n\nresult\n \n=\n \nnspartition\n.\nadd\n(\nnitroService\n,\n \nnspartitionObject\n)\n\n\n\n\n\n\nAssociating Users with Partitions\n\n\nAssociate the appropriate users with the partition.\n\n\nUsing REST APIs through HTTP\n\n\nThe following example associates user1 to a partition named partition-dept1.\n\n\nRequest\n\n\nHTTP Method:\n PUT\n\n\nURL:\n http://\\\n/nitro/v1/config/systemuser_nspartition_binding/user1\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nsystemuser_nspartition_binding\n:\n \n    \n{\n \n    \nusername\n:\nuser1\n,\n  \n    \npartitionname\n:\npartition-dept1\n \n    \n}\n \n\n}\n   \n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe following sample code associates \"user1\" to a partition named \"partition-dept1\".\n\n\nJava - Sample code for associating user with partition\n\n\nsystemuser_nspartition_binding\n \nsystemuser_nspartition_binding_object\n \n=\n \nnew\n \nsystemuser_nspartition_binding\n();\n \n\n\nsystemuser_nspartition_binding_object\n.\nset_partitionname\n(\npartition-dept1\n);\n \n\n\nsystemuser_nspartition_binding_object\n.\nset_username\n(\nuser1\n);\n \n\n\nbase_response\n \nresult\n \n=\n \nsystemuser_nspartition_binding\n.\nadd\n(\nnitroService\n,\n \nsystemuser_nspartition_binding_object\n);\n\n\n\n\n\n\n.NET - Sample code for associating user with partition\n\n\nsystemuser_nspartition_binding\n \nsystemuser_nspartition_binding_object\n \n=\n \nnew\n \nsystemuser_nspartition_binding\n();\n \n\n\nsystemuser_nspartition_binding_object\n.\npartitionname\n \n=\n \npartition-dept1\n;\n \n\n\nsystemuser_nspartition_binding_object\n.\nusername\n \n=\n \nuser1\n;\n \n\n\nbase_response\n \nresult\n \n=\n \nsystemuser_nspartition_binding\n.\nadd\n(\nnitroService\n,\n \nsystemuser_nspartition_binding_object\n);\n\n\n\n\n\n\nPython - Sample code for associating user with partition\n\n\nsystemuser_nspartition_binding_object\n \n=\n  \nsystemuser_nspartition_binding\n()\n\n\n\nsystemuser_nspartition_binding_object\n.\npartitionname\n \n=\n \npartition-dept1\n\n\n\nsystemuser_nspartition_binding_object\n.\nusername\n \n=\n \nuser1\n\n\n\nresult\n \n=\n \nsystemuser_nspartition_binding\n.\nadd\n(\nnitroService\n,\n \nsystemuser_nspartition_binding_object\n)\n\n\n\n\n\n\nSpecifying Command Policy for Partition Users\n\n\nAssociate an appropriate command policy to the admin partition user.\n\n\nUsing REST APIs through HTTP\n\n\nThe following example associates the command policy partition-admin to user1.\n\n\nRequest\n\n\nHTTP Method:\n PUT\n\n\nURL:\n http://\\\n/nitro/v1/config/systemuser_systemcmdpolicy_binding/user1\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nsystemuser_systemcmdpolicy_binding\n:\n \n    \n{\n \n    \nusername\n:\nuser1\n,\n  \n    \npolicyname\n:\npartition-admin\n,\n \n    \npriority\n:\n1\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe following sample code associates the command policy \"partition-admin\" to \"user1\".\n\n\nJava - Sample code to specify command policy for partition user\n\n\nsystemuser_systemcmdpolicy_binding\n \nbinding_object\n \n=\n \nnew\n \nsystemuser_systemcmdpolicy_binding\n();\n\n\n\nbinding_object\n.\nset_username\n(\nuser1\n);\n\n\n\nbinding_object\n.\nset_policyname\n(\npartition-admin\n);\n\n\n\nbinding_object\n.\nset_priority\n(\n1\n);\n\n\n\nbase_response\n \nresult\n \n=\n \nsystemuser_systemcmdpolicy_binding\n.\nadd\n(\nnitroService\n,\nbinding_object\n);\n\n\n\n\n\n\n.NET - Sample code to specify command policy for partition user\n\n\nsystemuser_systemcmdpolicy_binding\n \nbinding_object\n \n=\n \nnew\n \nsystemuser_systemcmdpolicy_binding\n();\n\n\n\nbinding_object\n.\nusername\n \n=\n \nuser1\n;\n\n\n\nbinding_object\n.\npolicyname\n \n=\n \npartition-admin\n;\n\n\n\nbinding_object\n.\npriority\n \n=\n \n1\n;\n\n\n\nbase_response\n \nresult\n \n=\n \nsystemuser_systemcmdpolicy_binding\n.\nadd\n(\nnitroService\n,\nbinding_object\n);\n\n\n\n\n\n\nPython - Sample code to specify command policy for partition user\n\n\nbinding_object\n \n=\n \nsystemuser_systemcmdpolicy_binding\n()\n\n\n\nbinding_object\n.\nusername\n \n=\n \nuser1\n\n\n\nbinding_object\n.\npolicyname\n \n=\n \npartition-admin\n\n\n\nbinding_object\n.\npriority\n \n=\n \n1\n\n\n\nresult\n \n=\n \nsystemuser_systemcmdpolicy_binding\n.\nadd\n(\nnitroService\n,\nbinding_object\n)\n\n\n\n\n\n\nSpecifying the Admin Partition VLAN or Bridgegroup\n\n\nSpecify the VLANs or bridgegroups to be associated with the partition. This step ensures network isolation of the traffic. Traffic received on the interfaces of the VLAN or bridgegroup is isolated from the traffic of other partitions.\n\n\nUsing REST APIs through HTTP\n\n\nThe following example specifies a VLAN for an admin partition.\n\n\nRequest\n\n\nHTTP Method:\n PUT\n\n\nURL:\n http://\\\n/nitro/v1/config/nspartition_vlan_binding/partition-dept1\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nnspartition_vlan_binding\n:\n \n    \n{\n \n    \npartitionname\n:\npartition-dept1\n,\n \n    \nvlan\n:\n2\n \n    \n}\n \n\n}\n    \n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe following sample code specifies a VLAN for an admin partition.\n\n\nJava - Sample Code to specify the VLAN\n\n\nnspartition_vlan_binding\n \nnspartition_vlan_binding_object\n \n=\n \nnew\n \nnspartition_vlan_binding\n();\n\n\n\nnspartition_vlan_binding_object\n.\nset_vlan\n(\n2\n);\n\n\n\nnspartition_vlan_binding_object\n.\nset_partitionname\n(\npartition-dept1\n);\n\n\n\nbase_response\n \nresult\n \n=\n \nnspartition_vlan_binding\n.\nadd\n(\nnitroService\n,\n \nnspartition_vlan_binding_object\n);\n\n\n\n\n\n\n.NET - Sample code to specify the VLAN\n\n\nnspartition_vlan_binding\n \nnspartition_vlan_binding_object\n \n=\n \nnew\n \nnspartition_vlan_binding\n();\n\n\n\nnspartition_vlan_binding_object\n.\nvlan\n \n=\n \n2\n;\n\n\n\nnspartition_vlan_binding_object\n.\npartitionname\n \n=\n \npartition-dept1\n;\n\n\n\nbase_response\n \nresult\n \n=\n \nnspartition_vlan_binding\n.\nadd\n(\nnitroService\n,\n \nnspartition_vlan_binding_object\n);\n\n\n\n\n\n\nPython - Sample code to specify the VLAN\n\n\nnspartition_vlan_binding_object\n \n=\n \nnspartition_vlan_binding\n()\n\n\n\nnspartition_vlan_binding_object\n.\nvlan\n \n=\n \n2\n\n\n\nnspartition_vlan_binding_object\n.\npartitionname\n \n=\n \npartition-dept1\n\n\n\nresult\n \n=\n \nnspartition_vlan_binding\n.\nadd\n(\nnitroService\n,\n \nnspartition_vlan_binding_object\n)\n\n\n\n\n\n\nSwitching Partitions\n\n\nIf you are associated with multiple admin partitions, you can switch to the required partition.\n\n\nUsing REST APIs through HTTP\n\n\nThe following  example shows how to switch from current partition to a partition named partition-dept2.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/nspartition?action=Switch\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \nnspartition\n:\n \n    \n{\n \n    \npartitionname\n:\npartition-dept2\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nThe following sample code switches from current partition to a partition named \"partition-dept2\".\n\n\nJava - Sample code to switch partitions\n\n\nnspartition\n \nnspartitionObject\n \n=\n \nnew\n \nnspartition\n();\n \n\n\nvnspartitionObject\n.\nset_partitionname\n(\npartition-dept2\n);\n \n\n\nbase_response\n \nresult\n \n=\n \nnspartition\n.\nSwitch\n(\nnitroService\n,\n \nnspartitionObject\n);\n\n\n\n\n\n\n.NET - Sample code to switch partitions\n\n\nnspartition\n \nnspartitionObject\n \n=\n \nnew\n \nnspartition\n();\n \n\n\nnspartitionObject\n.\npartitionname\n \n=\n \npartition-dept2\n;\n \n\n\nbase_response\n \nresult\n \n=\n \nnspartition\n.\nSwitch\n(\nnitroService\n,\n \nnspartitionObject\n);\n\n\n\n\n\n\nPython - Sample code to switch partitions\n\n\nnspartitionObject\n \n=\n \nnspartition\n()\n\n\n\nnspartitionObject\n.\npartitionname\n \n=\n \npartition-dept2\n\n\n\nresult\n \n=\n \nnspartition\n.\nSwitch\n(\nnitroService\n,\n \nnspartitionObject\n)\n\n\n\n\n\n\nManaging AppExpert Applications\n\n\nThe following sections talks about exporting and importing an AppExpert application using NITRO APIs.\n\n\nExporting an AppExpert Application\n\n\nThis topic covers exporting an AppExpert application by using REST APIs through HTTP or SDKs. \n\n\nUsing REST APIs through HTTP\n\n\nTo export an AppExpert application, specify the parameters needed for the export operation in the apptemplateinfo object. Optionally, you can specify basic information about the AppExpert application template, such as the author of the configuration, a summary of the template functionality, and the template version number, in the template_info object. This information is stored as part of the template file that is created.\n\n\nFor example, to export an AppExpert application named MyApp1.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/apptemplateinfo?action=export\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \napptemplateinfo\n:\n \n    \n{\n \n        \nappname\n:\nMyApp1\n,\n \n        \napptemplatefilename\n:\nBizAp.xml\n,\n \n        \ntemplate_info\n:\n \n        \n{\n \n            \ntemplateversion_major\n:\n2\n,\n \n            \ntemplateversion_minor\n:\n1\n,\n \n            \nauthor\n:\nXYZ\n,\n \n            \nintroduction\n:\nIntro\n,\n \n            \nsummary\n:\nSummary\n \n        \n}\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nTo export an AppExpert application, you must do the following:\n\n\n\n\n\n\nInstantiate the com.citrix.netscaler.nitro.resource.config.app.application class.\n\n\nNote.\n For the python SDK, the package path is of the form nssrc.com.citrix.netscaler......\n\n\n\n\n\n\nConfigure the properties of the AppExpert locally.\n\n\n\n\nExport the AppExpert application.\n\n\n\n\nThe following samples export an AppExpert application named MyApp1.\n\n\nJAVA - sample code to export an AppExpert application\n\n\napplication\n \nmyapp\n \n=\n \nnew\n \napplication\n();\n \n\nmyapp\n.\nset_appname\n(\nMyApp1\n);\n \n\nmyapp\n.\nset_apptemplatefilename\n(\nmyapp_template\n);\n \n\napplication\n.\nexport\n(\nns_session\n,\nmyapp\n);\n\n\n\n\n\n\n.NET - sample code to export an AppExpert application\n\n\napplication\n \nmyapp\n \n=\n \nnew\n \napplication\n();\n \n\nmyapp\n.\nappname\n \n=\n \nMyApp1\n;\n \n\nmyapp\n.\napptemplatefilename\n \n=\n \nmyapp_template\n;\n \n\napplication\n.\nexport\n(\nns_session\n,\nmyapp\n);\n\n\n\n\n\n\nPython - sample code to export an AppExpert application\n\n\nmyapp\n \n=\n \napplication\n()\n\n\nmyapp\n.\nappname\n \n=\n \nMyApp1\n\n\nmyapp\n.\napptemplatefilename\n \n=\n \nmyapp_template\n\n\napplication\n.\nexport\n(\nns_session\n,\n \nmyapp\n)\n\n\n\n\n\n\nImporting an AppExpert Application\n\n\nThis topic covers importing an AppExpert application by using REST APIs through HTTP or SDKs.\n\n\nUsing REST APIs through HTTP\n\n\nTo import an AppExpert application, specify the parameters needed for the import operation in the apptemplateinfo object.\n\n\nFor example, to import an AppExpert application named MyApp1.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/apptemplateinfo?action=import\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n\napptemplateinfo\n:\n \n\n{\n \n    \napptemplatefilename\n:\nBizAp.xml\n,\n \n    \ndeploymentfilename\n:\nBizAp_deployment.xml\n,\n \n    \nappname\n:\nMyApp1\n \n\n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nTo import an AppExpert application by specifying different deployment settings.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/apptemplateinfo?action=import\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n \n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n \n    \napptemplateinfo\n:\n \n    \n{\n \n    \napptemplatefilename\n:\nBizAp.xml\n,\n \n    \nappname\n:\nMyapp2\n,\n \n    \ndeploymentinfo\n:\n \n    \n{\n \n        \nappendpoint\n:\n \n        \n[\n \n            \n{\n \n                \nipv46\n:\n11.2.3.8\n,\n \n                \nport\n:\n80\n,\n \n                \nservicetype\n:\nHTTP\n \n            \n}\n \n        \n],\n \n        \nservice\n:\n \n        \n[\n \n            \n{\n \n                \nip\n:\n12.3.3.15\n,\n   \n                \nport\n:\n80\n,\n \n                \nservicetype\n:\nSSL\n \n            \n},\n \n            \n{\n \n                \nip\n:\n14.5.5.16\n,\n   \n                \nport\n:\n443\n,\n \n                \nservicetype\n:\nSSL\n \n            \n}\n \n        \n]\n \n    \n}\n \n    \n}\n \n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nUsing REST APIs through SDKs\n\n\nTo import an AppExpert application, you must do the following:\n\n\n\n\n\n\nInstantiate the com.citrix.netscaler.nitro.resource.config.app.application class.\n\n\nNote\n. For the python SDK, the package path is of the form nssrc.com.citrix.netscaler......\n\n\n\n\n\n\nConfigure the properties of the AppExpert locally.\n\n\n\n\nImport the AppExpert application.\n\n\n\n\nThe following samples import an AppExpert application named MyApp1.\n\n\nJava - sample code to import an AppExpert application\n\n\napplication\n \nmyapp\n \n=\n \nnew\n \napplication\n();\n\n\nmyapp\n.\nset_appname\n(\nMyApp1\n);\n\n\nmyapp\n.\nset_apptemplatefilename\n(\nmyapp_template\n);\n\n\napplication\n.\nImport\n(\nns_session\n,\nmyapp\n);\n\n\n\n\n\n\n.NET - sample code to import an AppExpert application\n\n\napplication\n \nmyapp\n \n=\n \nnew\n \napplication\n();\n \n\nmyapp\n.\nappname\n \n=\n \nMyApp1\n;\n \n\nmyapp\n.\napptemplatefilename\n \n=\n \nmyapp_template\n;\n \n\napplication\n.\nImport\n(\nns_session\n,\nmyapp\n);\n\n\n\n\n\n\nPython - sample code to import an AppExpert application\n\n\nmyapp\n \n=\n \napplication\n()\n\n\nmyapp\n.\nappname\n \n=\n \nMyApp1\n\n\nmyapp\n.\napptemplatefilename\n \n=\n \nmyapp_template\n\n\napplication\n.\nImport\n(\nns_session\n,\n \nmyapp\n)\n\n\n\n\n\n\nAutomate NetScaler Upgrade and Downgrade with a Single API\n\n\nYou can use the \"install\" API to automate not just installation, but also an upgrade or a downgrade of the build on a NetScaler appliance. You can specify a local or remote location for the build file.\n\n\nUsing REST APIs through HTTP\n\n\nFor example, the following information describes a downgrade to NetScaler release 10.5 build 46, using a local  build file:\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/install\n\n\nRequest Headers:\n \n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nContent-Type: application/json\n\n\nRequest Payload:\n\n\n{\n\n\n\n\u201cinstall\u201d:\n\n\n\n{\n\n\n        \n\u201curl\u201d:\n \n\u201cfile:///var/tagma/build_tagma_46_nc.tgz\u201d\n\n\n\n    \n}\n                           \n\n\n}\n     \n\n\n\n\n\nResponse\n\n\nHTTP status Code on Success:\n\n\n201 Created\n\n\n209 Netscaler specific warning\n\n\nNote.\n when \u201cy\u201d option is not specified and warning is enabled, API returns \u201c1120 - The configuration must be saved and the system rebooted for these settings to take effect\u201d message in X-NITRO-WARNING.\n\n\nHTTP Status Code on Failure:\n 599 Netscaler specific error\n\n\nAdditional parameters available in the install API request payload\n\n\n\n\n\n\n\u201cy\u201d:\u201ctrue\u201d -  This option enables reboot on successful loading of kernel.\n\n\n\n\n\n\n\u201cL\u201d:\u201ctrue\u201d -  This option enables the callhome feature.\n\n\n\n\n\n\nSupported formats for the \"url\" parameter (specifies the location of the tar.gz file for the build)\n\n\n\n\nhttp://[user]:[password]@host/path/to/file\n\n\nhttps://[user]:[password]@host/path/to/file\n\n\nsftp://[user]:[password]@host/path/to/file\n\n\nscp://[user]:[password]@host/path/to/file\n\n\nftp://[user]:[password]@host/path/to/file\n\n\nfile://path/to/file\n\n\n\n\nPossible errors\n\n\n\n\nInstallation failed. [No space on file system. Please check the log file /var/tmp/install\u200b]\n\n\nInstallation failed. [File transfer failed]\n\n\nInstallation failed. [File does not exist]\n\n\nInstallation failed. [Failed to copy file to /var/tmp]\n\n\nInstallation failed. [Extraction failed, invalid tar archive?\u200b]\n\n\nInstallation failed. [Invalid file transfer protocol]\n\n\nInstallation failed. [Unable to create temporary directory]\n\n\nInstallation failed. [Please check the log file /var/tmp/install for more information]\n\n\n\n\nHandle Multiple NITRO Calls in a Single Request\n\n\nYou can use the \"macroapi\" API to create, update, and delete multiple resources simultaneously, and thereby minimize network traffic. For example, multiple load-balancing virtual servers can be added in a single API.\n\n\nTo account for the failure of some operations within the bulk operation, NITRO allows configuring one of the following behaviors.\n\n\n\n\nEXIT\n. When the first error is encountered, execution stops. The commands that were executed before the error are committed.\n\n\nROLLBACK\n. When the first error is encountered, execution stops. The commands that were executed before the error are rolled back. Rollback is supported for add and bind commands only.\n\n\nCONTINUE\n. All the commands in the request are executed even if some commands fail.\n\n\n\n\nYou must specify the behavior of the bulk operation in the request header, by using the X-NITRO-ONERROR parameter.\n\n\nAdvantages\n\n\nHeterogeneous resources can be configured with a single API. For example, multiple load balancing virtual servers and multiple services can be created, and services can be bound to load balancing virtual servers in a single API.\n\n\nLimitations\n\n\nOnly homogenous operation is supported in this API. For example, multiple load balancing virtual servers can be created but cannot be updated or deleted in the same API.\n\u201crollback\u201d is supported only on \u201cadd\u201d and \u201cbind\u201d operations.\n\n\nUsing REST APIs through HTTP\n\n\nTo add multiple load balancing resources in a single request:\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/macroapi\n\n\nRequest Headers:\n\n\nContent-Type: application/json\n\n\nCookie: NITRO_AUTH_TOKEN=\\\n\n\nX-NITRO-ONERROR: exit\n\n\nRequest Payload:\n\n\n{\n\n\n\nlbvserver\n:[\n  \n\n\n{\nname\n:\nlbv1\n,\nservicetype\n:\nhttp\n},\n\n\n\n{\nname\n:\nlbv2\n,\nservicetype\n:\nhttp\n}\n\n\n\n],\n\n\n\nserviceGroup\n:\n \n[\n\n\n\n{\n \nservicegroupname\n:\n \nsg1\n,\n \nservicetype\n:\n \nHTTP\n \n},\n\n\n\n{\n \nservicegroupname\n:\n \nsg2\n,\n \nservicetype\n:\n \nHTTP\n \n}\n\n\n\n],\n\n\n\nlbvserver_servicegroup_binding\n:[\n \n\n\n{\n \nname\n:\nlbv1\n,\n \nservicegroupname\n:\nsg1\n \n},\n\n\n\n{\n \nname\n:\nlbv2\n,\n \nservicegroupname\n:\nsg2\n \n}\n\n\n\n]\n\n\n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 201 Created for the add operation and 200 OK for the update operation.\n\n\nHTTP Status Code on Failure:\n 207 Multi Status with error details in the response payload. For more information, see Error Handling.\n\n\nFor deleting multiple resources using macroapi, use POST HTTP method with query parameter \u201caction=remove\u201d in the URI.\n\n\nSimplify Management Operations with an Idempotent API\n\n\nYou can add or update NetScaler resources seamlessly, with a single API. Previously, an attempt to add a resource that was already configured, or to update a resource that was not yet configured, caused an error.\n\n\nIf you enable the \u201cidempotent\u201d query parameter (\u201cidempotent=yes\u201d) in any POST request, NITRO executes the request in an idempotent manner. An idempotent HTTP method is an HTTP method that can be called many times without different results, and POST is desinged as a non-idempotent method.\n\n\nNote.\n Use POST request with \u201cidempotent\u201d option if you are unsure whether the resource in the request exists on NetScaler or not.\n\n\nThis API  hides the inconsistencies between parameter lists of POST and PUT operations. For some NITRO resources, certain parameters are accepted only on PUT not in POST, or vice versa. By using this idempotent API, you can overcome such challenges.\n\n\nLimitations\n\n\nIf a resource is already configured and you try to add the same resource again, the resource is  \"updated,\" but the arguments already present are not unset. For example, if a  load balancing virtual server named  \"V1\" is configured to use the round robin load balancing method, and you try to ADD an lbvserver named \"V1\" without specifying a value for \"lbmethod\" in the request, the NetScaler appliance does not  unset \"lbmethod\" to its default value of \"leastconnection.\"\n\n\nUsing REST APIs through HTTP\n\n\nIn the following example, \u201cpreferredntpserver\u201d is allowed only in PUT, but when given in POST request with idempotent=yes, NITRO internally adds the ntpserver and updates it with given properties.\n\n\nRequest\n\n\nHTTP Method:\n POST\n\n\nURL:\n http://\\\n/nitro/v1/config/ntpserver?idempotent=yes\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nContent-Type: application/json\n\n\nRequest Payload:\n\n\n{\n\n\n\n\u201cntpserver\u201d:{\u201cservername\u201d:\u201cntp1\u201d,\u201cminpoll\u201d:\u201c4,\n  \n\u201cpreferredntpserver\u201d:\n \n\u201cyes\u201d\n}\n\n\n\n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nRetrieve Bindings in Bulk\n\n\nThis topic covers retrieving bindings information in bulk by using REST APIs through HTTP.\n\n\nUsing REST APIs through HTTP\n\n\nYou can use a bulk GET API to fetch bindings of all the entities of a given entity type.\n\n\nFor example, you can fetch bindings of all the load balancing virtual servers in one call instead of by using multiple GET by \"name\" calls. In the examples below, the NetScaler appliance has the following configuration.\n\n\n\n\nadd lb vserver lbv1 http\n\n\nadd lb vserver lbv2 http\n\n\nadd service svc1 10.20.30.40 http 80\n\n\nadd servicegroup sg1 http\n\n\nbind lb vserver lbv1 svc1\n\n\nbind lb vserver lbv1 sg1\n\n\nbind lb vserver lbv2 svc1\n\n\nbind lb vserver lbv2 sg1\n\n\n\n\nExample - To fetch bindings of all lbvservers, in a single NITRO API\n\n\nRequest\n\n\nHTTP Method:\n GET\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver_binding?bulkbindings=yes\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nAccept: application/json\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nHTTP Status Code on Failure:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors). The response payload provides details of the error.\n\n\nResponse Header:\n Content-Type:application/json\n\n\nResponse Payload:\n\n\n{\n\n\n\nerrorcode\n:\n0\n,\n\n\n\nmessage\n:\nDone\n,\n\n\n\nseverity\n:\nNONE\n,\n\n\n\nlbvserver_binding\n:[\n\n\n\n{\n\n\n    \nname\n:\nlbv1\n,\n\n\n    \nlbvserver_service_binding\n:[\n\n\n    \n{\n\n\n        \nname\n:\nlbv1\n,\n\n\n        \nservicename\n:\nsvc1\n,\n\n\n        \nstateflag\n:\n536936451\n,\n\n\n        \nipv46\n:\n10.20.30.40\n,\n\n\n        \nport\n:\n80\n,\n\n\n        \nservicetype\n:\nHTTP\n,\n\n\n        \ncurstate\n:\nDOWN\n,\n\n\n        \nweight\n:\n1\n,\n\n\n        \ndynamicweight\n:\n0\n,\n\n\n        \ncookieipport\n:\n,\n\n\n        \nvserverid\n:\nmcw1\n,\n\n\n        \nvsvrbindsvcip\n:\n10.20.30.40\n,\n\n\n        \nvsvrbindsvcport\n:\n80\n,\n\n\n        \npreferredlocation\n:\n\n\n    \n}\n\n\n    \n],\n\n\n    \nlbvserver_servicegroup_binding\n:[\n\n\n    \n{\n\n\n        \nname\n:\nlbv1\n,\n\n\n        \nservicegroupname\n:\nsg1\n,\n\n\n        \nstateflag\n:\n536936464\n,\n\n\n        \nservicename\n:\nsg1\n\n\n    \n}\n\n\n    \n]\n\n\n\n},\n\n\n\n{\n\n\n    \nname\n:\nlbv2\n,\n\n\n    \nlbvserver_service_binding\n:[\n\n\n    \n{\n\n\n        \nname\n:\nlbv2\n,\n\n\n        \nservicename\n:\nsvc1\n,\n\n\n        \nstateflag\n:\n536936451\n,\n\n\n        \nipv46\n:\n10.20.30.40\n,\n\n\n        \nport\n:\n80\n,\n\n\n        \nservicetype\n:\nHTTP\n,\n\n\n        \ncurstate\n:\nDOWN\n,\n\n\n        \nweight\n:\n1\n,\n\n\n        \ndynamicweight\n:\n0\n,\n\n\n        \ncookieipport\n:\n,\n\n\n        \nvserverid\n:\nmcw2\n,\n\n\n        \nvsvrbindsvcip\n:\n10.20.30.40\n,\n\n\n        \nvsvrbindsvcport\n:\n80\n,\n\n\n        \npreferredlocation\n:\n\n\n    \n}\n        \n\n\n    \n],\n\n\n    \nlbvserver_servicegroup_binding\n:[\n\n\n    \n{\n\n\n        \nname\n:\nlbv2\n,\n\n\n        \nservicegroupname\n:\nsg1\n,\n\n\n        \nstateflag\n:\n536936464\n,\n\n\n        \nservicename\n:\nsg1\n\n\n    \n}\n        \n\n\n    \n]\n\n\n\n}\n\n\n\n\n]\n\n\n\n}\n\n\n\n\n\n\nExample - To fetch only \u201cservice\u201d bindings of all lbvservers\n\n\nRequest\n\n\nHTTP Method:\n GET\n\n\nURL:\n http://\\\n/nitro/v1/config/lbvserver_service_binding?bulkbindings=yes\n\n\nRequest Header:\n Content-Type:application/json\n\n\nResponse\n\n\nResponse Payload:\n\n\n{\n \n\n\nerrorcode\n:\n0\n,\n\n\n\nmessage\n:\nDone\n,\n\n\n\nseverity\n:\nNONE\n,\n\n\n\nlbvserver_service_binding\n:[\n \n\n    \n{\n \n\n        \nname\n:\nlbv1\n,\n\n\n        \nservicename\n:\nsvc1\n,\n\n\n        \nstateflag\n:\n536936451\n,\n\n\n        \nipv46\n:\n10.20.30.40\n,\n\n\n        \nport\n:\n80\n,\n\n\n        \nservicetype\n:\nHTTP\n,\n\n\n        \ncurstate\n:\nDOWN\n,\n\n\n        \nweight\n:\n1\n,\n\n\n        \ndynamicweight\n:\n0\n,\n\n\n        \ncookieipport\n:\n,\n\n\n        \nvserverid\n:\nmcw1\n,\n\n\n        \nvsvrbindsvcip\n:\n10.20.30.40\n,\n\n\n        \nvsvrbindsvcport\n:\n80\n,\n\n\n        \npreferredlocation\n:\n\n\n    \n},\n\n\n    \n{\n \n\n        \nname\n:\nlbv2\n,\n\n\n        \nservicename\n:\nsvc1\n,\n\n\n        \nstateflag\n:\n536936451\n,\n\n\n        \nipv46\n:\n10.20.30.40\n,\n\n\n        \nport\n:\n80\n,\n\n\n        \nservicetype\n:\nHTTP\n,\n\n\n        \ncurstate\n:\nDOWN\n,\n\n\n        \nweight\n:\n1\n,\n\n\n        \ndynamicweight\n:\n0\n,\n\n\n        \ncookieipport\n:\n,\n\n\n        \nvserverid\n:\nmcw2\n,\n\n\n        \nvsvrbindsvcip\n:\n10.20.30.40\n,\n\n\n        \nvsvrbindsvcport\n:\n80\n,\n\n\n        \npreferredlocation\n:\n\n\n    \n}\n   \n\n\n    \n]\n\n\n\n}\n\n\n\n\n\n\nView Individual Counter Information\n\n\nThis topic viewing individual counter information by using REST APIs through HTTP. \n\n\nUsing REST APIs through HTTP\n\n\nTo view global counters that are not otherwise shown by the NetScaler CLI or the GUI, you can now use the following URL format.\n\n\nURL\n: http://\\\n/nitro/v1/stat/nsglobalcntr?args=counters:\\\n;\\\n\n\nPreviously, these counter values could be viewed only through the \u201cnsconmsg\u201d Shell command.\n\n\nNote.\n You can view only global counters of type ULONG and only up to 12 counters in a single request.\n\n\nExample\n\n\nThis example shows how to view the individual counters http_tot_Requests and http_tot_Responses. Enter the details in the system or tool that you are using to generate HTTP or HTTPS requests.\n\n\nRequest\n\n\nHTTP Method:\n GET\n\n\nURL:\n http://\\\n/nitro/v1/stat/nsglobalcntr?args=counters:http_tot_Requests;http_tot_Responses\n\n\nResponse\n\n\n{\n\n\nerrorcode\n:\n \n0\n,\n\n\n\nmessage\n:\n \nDone\n,\n\n\n\nseverity\n:\n \nNONE\n,\n\n\n\nnsglobalcntr\n:\n \n    \n{\n\n    \nhttp_tot_Requests\n:\n \n5783\n,\n\n    \nhttp_tot_Responses\n:\n \n5783\n\n    \n}\n\n\n}\n\n\n\n\n\n\nPrevent XSS and CSRF Attacks by Disabling Basic Authentication\n\n\nAs an administrator or a root user, you can now prevent users from making API calls after using basic authentication (such as one-time credentials) to log on. You can use this feature to prevent Cross-Site Scripting (XSS), Cross-Site Request Forgery (CSRF), and other types of attacks.\n\n\nProcedure for Disabling Basic Authentication\n\n\nUse the following formats to enter the details in the system or tool that you are using to generate HTTP or HTTPS requests.\n\n\nUsing REST APIs through HTTP\n\n\nRequest\n\n\nURL:\n http://\\\n/nitro/v1/config/systemparameter\n\n\nHTTP Method:\n PUT\n\n\nRequest Headers:\n\n\nCookie:NITRO_AUTH_TOKEN=\\\n\n\nContent-Type:application/json\n\n\nRequest Payload:\n\n\n{\n\n    \nsystemparameter\n:{\n \nbasicauth\n:\ndisabled\n,}\n\n\n\n}\n\n\n\n\n\n\nResponse\n\n\nHTTP Status Code on Success:\n 200 OK\n\n\nAfter you disable the basic authentication, access to NetScaler through the one-time password is denied and an error message is displayed.\n\n\nExample\n\n\nThis example shows what happens if you make any API call after basic authentication has been disabled. \n\n\nRequest\n\n\nURL:\n http://10.102.201.159/nitro/v1/config/lbvserver\n\n\nHTTP Method:\n GET\n\n\nAfter you make a GET call, the a logon screen appears. If you click \nLog In\n after entering the logon credentials, then you get the following response, which shows an error message. \n\n\nResponse\n\n\n{\nerrorcode\n:\n \n1244\n,\nmessage\n:\n \nAuthentication Failed: Use of Basic Authentication is Disabled.\n,\nseverity\n:\n \nERROR\n\n\n}", 
            "title": "Use cases"
        }, 
        {
            "location": "/usecases/#use-cases-and-samples", 
            "text": "This section covers some use case scenarios to certain resources and scenarios. More scenarios will be added in future updates to this section.", 
            "title": "Use Cases and Samples"
        }, 
        {
            "location": "/usecases/#managing-a-netscaler-cluster", 
            "text": "For managing clusters, you can add or remove a cluster instance or an individual node and perform a few other instance or node operations such as viewing instance or node properties. You can also configure the cluster IP address. Other cluster-management tasks include joining a NetScaler appliance to the cluster and configuring a linkset. For detailed information and best practices, see Clustering.", 
            "title": "Managing a NetScaler Cluster"
        }, 
        {
            "location": "/usecases/#cluster-instance-operations", 
            "text": "This topic covers cluster instance operations by using REST APIs through HTTP or SDKs.   Using REST APIs through HTTP  All operations on a cluster instance must be performed on the clusterinstance object.  For example, to create a cluster instance with ID 1, connect to the NetScaler appliance that you are first adding to the cluster.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/clusterinstance  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     clusterinstance :  \n     {  \n     clid : 1 ,  \n     preemption : ENABLED  \n     }   }    Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The com.citrix.netscaler.nitro.resource.config.cluster.clusterinstance class provides APIs to manage a cluster instance.  The following sample code creates a cluster instance with ID 1.  Java - Sample code to create a cluster instance  clusterinstance   new_cl_inst_obj   =   new   clusterinstance ();   //Set the properties of the cluster instance locally   new_cl_inst_obj . set_clid ( 1 );   new_cl_inst_obj . set_preemption ( ENABLED );   //Upload the cluster instance   clusterinstance . add ( ns_session , new_cl_inst_obj );   .NET - Sample code to create a cluster instance  clusterinstance   new_cl_inst_obj   =   new   clusterinstance ();   //Set the properties of the cluster instance locally   new_cl_inst_obj . clid   =   1 ;   new_cl_inst_obj . preemption   =   ENABLED ;   //Upload the cluster instance   clusterinstance . add ( ns_session , new_cl_inst_obj );   Python - Sample code to create a cluster instance  new_cl_inst_obj   =   clusterinstance ()   #Set the properties of the cluster instance locally   new_cl_inst_obj . clid   =   1   #Upload the cluster instance   clusterinstance . add ( ns_session ,   new_cl_inst_obj )", 
            "title": "Cluster Instance Operations"
        }, 
        {
            "location": "/usecases/#cluster-node-operations", 
            "text": "This topic covers cluster node operations by using REST APIs through HTTP or SDKs.   Using REST APIs through HTTP  All operations on a cluster node must be performed on the clusternode object. For example, to add a NetScaler appliance with NSIP address 10.102.29.60 to the cluster.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/clusternode  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {   clusternode :  \n     {  \n     nodeid : 1 ,  \n     ipaddress : 10.102.29.60 ,  \n     state : ACTIVE ,  \n     backplane : 1/1/2  \n     }   }    Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The com.citrix.netscaler.nitro.resource.config.cluster.clusternode class provides APIs to manage cluster nodes.  The following sample code adds a cluster node with NSIP address 10.102.29.60.  Java - Sample code to add a cluster node  clusternode   new_cl_node_obj   =   new   clusternode ();   //Set the properties of the cluster node locally   new_cl_node_obj . set_nodeid ( 0 );   new_cl_node_obj . set_ipaddress ( 10.102.29.60 );   new_cl_node_obj . set_state ( ACTIVE );   new_cl_node_obj . set_backplane ( 0/1/1 );   //Upload the cluster node   clusternode . add ( ns_session , new_cl_node_obj );   .NET - Sample code to add a cluster node  clusternode   new_cl_node_obj   =   new   clusternode ();   //Set the properties of the cluster node locally   new_cl_node_obj . nodeid   =   0 ;   new_cl_node_obj . ipaddress   =   10.102.29.60 ;   new_cl_node_obj . state   =   ACTIVE ;   new_cl_node_obj . backplane   =   0/1/1 ;   //Upload the cluster node   clusternode . add ( ns_session , new_cl_node_obj );   Python - Sample code to add a cluster node  new_cl_node_obj   =   clusternode ()   #Set the properties of the cluster node locally   new_cl_node_obj . nodeid   =   0   new_cl_node_obj . ipaddress   =   10.102.29.60   new_cl_node_obj . state   =   ACTIVE   new_cl_node_obj . backplane   =   0/1/1   #Upload the cluster node   clusternode . add ( ns_session ,   new_cl_node_obj )", 
            "title": "Cluster Node Operations"
        }, 
        {
            "location": "/usecases/#add-a-cluster-ip-address", 
            "text": "This topic covers adding a cluster IP address by using REST APIs through HTTP or SDKs.   Using REST APIs through HTTP  To define a cluster IP address, specify the required parameters in the nsip object. For example, to configure a cluster IP address.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/nsip  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {   nsip :  \n     {  \n     ipaddress : 10.102.29.61 ,   \n     netmask : 255.255.255.255 ,  \n     type : CLIP  \n     }   }    Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The com.citrix.netscaler.nitro.resource.config.ns.nsip class provides the add() API to configure an IP address. To configure the IP address as a cluster IP address, you must specify the type as CLIP.  The following sample code configures a cluster IP address on NetScaler appliance with IP address 10.102.29.60.  Java - Sample code to add a cluster IP address  nsip   new_nsip_obj   =   new   nsip ();   //Set the properties locally   new_nsip_obj . set_ipaddress ( 10.102.29.61 );   new_nsip_obj . set_netmask ( 255.255.255.255 );   new_nsip_obj . set_type ( CLIP );   //Upload the cluster node   nsip . add ( ns_session , new_nsip_obj );   .NET - Sample code to add a cluster IP address  nsip   new_nsip_obj   =   new   nsip ();   //Set the properties locally   new_nsip_obj . ipaddress   =   10.102.29.61 ;   new_nsip_obj . netmask   =   255.255.255.255 ;   new_nsip_obj . type   =   CLIP ;   //Upload the cluster node   nsip . add ( ns_session , new_nsip_obj );   Python - Sample code to add a cluster IP address  new_nsip_obj   =   nsip ()   #Set the properties locally   new_nsip_obj . ipaddress   =   10.102.29.61   new_nsip_obj . netmask   =   255.255.255.255   new_nsip_obj . type   =   CLIP   #Upload the cluster node   nsip . add ( ns_session ,   new_nsip_obj )", 
            "title": "Add a Cluster IP Address"
        }, 
        {
            "location": "/usecases/#add-a-spotted-ip-address", 
            "text": "This topic covers adding a spotted IP address by using REST APIs through HTTP or SDKs.   Using REST APIs through HTTP  To configure an IP address as spotted, specify the required parameters in the nsip object. This configuration must be done on the cluster IP address.  For example, to configure a spotted SNIP address on a node with ID 1.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/nsip  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {   nsip :  \n     {  \n     ipaddress : 10.102.29.77 ,   \n     netmask : 255.255.255.0 ,  \n     type : SNIP ,  \n     ownernode : 1  \n     }   }    Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The com.citrix.netscaler.nitro.resource.config.ns.nsip class provides the add() API to configure an IP address. To configure the IP address as spotted, you must specify the ID of the node that must own the IP address. This configuration must be done on the cluster IP address.  The following sample code configures a spotted SNIP address on a node with ID 1.  Java - Sample code to configure a spotted IP address  nsip   new_nsip_obj   =   new   nsip ();  //Set the properties locally  new_nsip_obj . set_ipaddress ( 10.102.29.77 );  new_nsip_obj . set_netmask ( 255.255.255.0 );  new_nsip_obj . set_type ( SNIP );  new_nsip_obj . set_ownernode ( 1 );  //Upload the cluster node  nsip . add ( ns_session , new_nsip_obj );   .NET - Sample code to configure a spotted IP address  nsip   new_nsip_obj   =   new   nsip ();   //Set the properties locally   new_nsip_obj . ipaddress   =   10.102.29.77 ;   new_nsip_obj . netmask   =   255.255.255.0 ;   new_nsip_obj . type   =   SNIP ;   new_nsip_obj . ownernode   =   1 ;   //Upload the cluster node   nsip . add ( ns_session , new_nsip_obj );   Python - Sample code to configure a spotted IP address  #Add a spotted IP address  new_nsip_obj   =   nsip ()  #Set the properties locally  new_nsip_obj . ipaddress   =   10.102.29.77  new_nsip_obj . netmask   =   255.255.255.0  new_nsip_obj . type   =   SNIP  new_nsip_obj . ownernode   =   1  #Upload the cluster node  nsip . add ( ns_session ,   new_nsip_obj )", 
            "title": "Add a Spotted IP Address"
        }, 
        {
            "location": "/usecases/#join-netscaler-appliance-to-cluster", 
            "text": "This topic covers adding a NetScaler appliance to a cluster by using REST APIs through HTTP or SDKs.   Using REST APIs through HTTP  To join an appliance to a cluster, specify the required parameters in the cluster object. For example, to join a NetScaler appliance to a cluster.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/cluster  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {   cluster :  \n     {  \n     clip : 10.102.29.61 ,  \n     password : verysecret  \n     }   }    Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The com.citrix.netscaler.nitro.resource.config.cluster.cluster class provides the join() API to join a NetScaler appliance to the cluster. You must specify the cluster IP address and the nsroot password of the configuration coordinator.  The following sample code joins a NetScaler appliance to a cluster.  Java - Sample code to join an appliance to a cluster  cluster   new_cl_obj   =   new   cluster ();   //Set the properties of the cluster  locally   new_cl_obj . set_clip ( 10.102.29.61 );   new_cl_obj . set_password ( verysecret );   //Upload the cluster   cluster . add ( ns_session , new_cl_obj );   .NET - Sample code to join an appliance to a cluster  cluster   new_cl_obj   =   new   cluster ();   //Set the properties of the cluster locally   new_cl_obj . clip   =   10.102.29.61 ;   new_cl_obj . password   =   verysecret ;   //Upload the cluster node   cluster . add ( ns_session , new_cl_node_obj );   Python - Sample code to join an appliance to a cluster  new_cl_obj   =   cluster ()  #Set the properties of the cluster locally  new_cl_obj . clip   =   10.102.29.61  new_cl_obj . password   =   verysecret  #Upload the cluster  cluster . add ( ns_session ,   new_cl_obj )", 
            "title": "Join NetScaler Appliance to Cluster"
        }, 
        {
            "location": "/usecases/#linkset-operations", 
            "text": "This topic covers some linkset operations by using REST APIs through HTTP or SDKs.   Using REST APIs through HTTP  To configure a linkset, do the following:  Create a linkset by specifying the required parameters in the linkset object. For example, to add a linkset LS/1:  Request:  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/linkset  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload  {   linkset :  \n     {  \n     id : LS/1   }   }    Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Bind the required interfaces to the linkset by specifying the interfaces in the linkset_interface_binding object.For example, to bind interfaces 1/1/2 and 2/1/2 to linkset LS/1.  Request  HTTP Method:  PUT  URL:  http://\\ /nitro/v1/config/linkset_interface_binding/LS%2F1?action=bind Note.  The linkset name (LS/1), must be URL encoded as LS%2F1.  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {   linkset_interface_binding :  \n     {  \n     id : LS/1 ,  \n     ifnum : 1/1/2 2/1/2  \n     }   }    Response  HTTP Status Code on Success:  200 Ok  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The com.citrix.netscaler.nitro.resource.config.network.linkset class provides the APIs to manage linksets.  To configure a linkset, do the following:   Add a linkset by invoking the add() method of the linkset class.  Bind the interfaces to the linkset using the add() method of the linkset_interface_binding class.   The following sample code creates a linkset LS/1 and bind interfaces 1/1/2 and 2/1/2 to it.  Java - Sample code to configure linksets  linkset   new_linkset_obj   =   new   linkset ();   new_linkset_obj . set_id ( LS/1 );   linkset . add ( ns_session , new_linkset_obj );   //Bind the interfaces to the linkset   linkset_interface_binding   new_linkif_obj   =   new   linkset_interface_binding ();   new_linkif_obj . set_id ( LS/1 );   new_linkif_obj . set_ifnum ( 1/1/2 2/1/2 );   linkset_interface_binding . add ( ns_session , new_linkif_obj );   .NET - Sample code to configure linksets  linkset   new_linkset_obj   =   new   linkset ();   new_linkset_obj . id   =   LS/1 ;   linkset . add ( ns_session , new_linkset_obj );   //Bind the interfaces to the linkset   linkset_interface_binding   new_linkif_obj   =   new   linkset_interface_binding ();   new_linkif_obj . id   =   LS/1 ;   new_linkif_obj . ifnum   =   1/1/2 2/1/2 ;   linkset_interface_binding . add ( ns_session , new_linkif_obj );    Python - Sample code to configure linksets  #Create a new linkset  new_linkset_obj   =   linkset ()  new_linkset_obj . id   =   LS/1  linkset . add ( ns_session ,   new_linkset_obj )  #Bind the interfaces to the linkset  new_linkif_obj   =   linkset_interface_binding ()  new_linkif_obj . id   =   LS/1  new_linkif_obj . ifnum   =   1/1/2 2/1/2  linkset_interface_binding . add ( ns_session ,   new_linkif_obj )", 
            "title": "Linkset Operations"
        }, 
        {
            "location": "/usecases/#configuring-admin-partitions", 
            "text": "To create an admin partition, you must perform a set of operations on the default partition. To understand this procedure, let us consider a company that has two departments each of which has an application that requires the NetScaler functionality. The NetScaler admin wants to have a different partition for each department so that there is isolation of users and configurations. For detailed information and best practices, see Admin Partitions.", 
            "title": "Configuring Admin Partitions"
        }, 
        {
            "location": "/usecases/#creating-an-admin-partition", 
            "text": "While creating an admin partition, you must also specify the system resources that must be allocated to that partition.  Using REST APIs through HTTP  The following example creates an admin partition named partition-dept1.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/nspartition  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {   nspartition :   {  \n     partitionname : partition-dept1 ,  \n     maxbandwidth : 10240 ,   \n     minbandwidth : 10240 ,  \n     maxconn : 1024 ,  \n     maxmemlimit : 10   }   }   Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The following sample code creates an admin partition named partition-dept1.  Java - Sample code to create an admin partition  nspartition   nspartitionObject   =   new   nspartition ();   nspartitionObject . set_partitionname ( partition-dept1 );   nspartitionObject . set_maxbandwidth ( 10240 );   nspartitionObject . set_maxconn ( 1024 );   nspartitionObject . set_maxmemlimit ( 10 );   nspartitionObject . set_minbandwidth ( 1240 );   base_response   result   =   nspartition . add ( nitroService ,   nspartitionObject );   .NET - Sample code to create an admin partition  nspartition   nspartitionObject   =   new   nspartition ();   nspartitionObject . partitionname   =   partition-dept1 ;   nspartitionObject . maxbandwidth   =   10240 ;   nspartitionObject . maxconn   =   1024 ;   nspartitionObject . maxmemlimit   =   10 ;   nspartitionObject . minbandwidth   =   1240 ;   base_response   result   =   nspartition . add ( nitroService ,   nspartitionObject );   Python - Sample code to create an admin partition  nspartitionObject   =   nspartition ()  nspartitionObject . partitionname   =   partition-dept1  nspartitionObject . maxbandwidth   =   10240  nspartitionObject . maxconn   =   1024  nspartitionObject . maxmemlimit   =   10  nspartitionObject . minbandwidth   =   1240  result   =   nspartition . add ( nitroService ,   nspartitionObject )", 
            "title": "Creating an Admin Partition"
        }, 
        {
            "location": "/usecases/#associating-users-with-partitions", 
            "text": "Associate the appropriate users with the partition.  Using REST APIs through HTTP  The following example associates user1 to a partition named partition-dept1.  Request  HTTP Method:  PUT  URL:  http://\\ /nitro/v1/config/systemuser_nspartition_binding/user1  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     systemuser_nspartition_binding :  \n     {  \n     username : user1 ,   \n     partitionname : partition-dept1  \n     }   }      Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The following sample code associates \"user1\" to a partition named \"partition-dept1\".  Java - Sample code for associating user with partition  systemuser_nspartition_binding   systemuser_nspartition_binding_object   =   new   systemuser_nspartition_binding ();   systemuser_nspartition_binding_object . set_partitionname ( partition-dept1 );   systemuser_nspartition_binding_object . set_username ( user1 );   base_response   result   =   systemuser_nspartition_binding . add ( nitroService ,   systemuser_nspartition_binding_object );   .NET - Sample code for associating user with partition  systemuser_nspartition_binding   systemuser_nspartition_binding_object   =   new   systemuser_nspartition_binding ();   systemuser_nspartition_binding_object . partitionname   =   partition-dept1 ;   systemuser_nspartition_binding_object . username   =   user1 ;   base_response   result   =   systemuser_nspartition_binding . add ( nitroService ,   systemuser_nspartition_binding_object );   Python - Sample code for associating user with partition  systemuser_nspartition_binding_object   =    systemuser_nspartition_binding ()  systemuser_nspartition_binding_object . partitionname   =   partition-dept1  systemuser_nspartition_binding_object . username   =   user1  result   =   systemuser_nspartition_binding . add ( nitroService ,   systemuser_nspartition_binding_object )", 
            "title": "Associating Users with Partitions"
        }, 
        {
            "location": "/usecases/#specifying-command-policy-for-partition-users", 
            "text": "Associate an appropriate command policy to the admin partition user.  Using REST APIs through HTTP  The following example associates the command policy partition-admin to user1.  Request  HTTP Method:  PUT  URL:  http://\\ /nitro/v1/config/systemuser_systemcmdpolicy_binding/user1  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     systemuser_systemcmdpolicy_binding :  \n     {  \n     username : user1 ,   \n     policyname : partition-admin ,  \n     priority : 1  \n     }   }   Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The following sample code associates the command policy \"partition-admin\" to \"user1\".  Java - Sample code to specify command policy for partition user  systemuser_systemcmdpolicy_binding   binding_object   =   new   systemuser_systemcmdpolicy_binding ();  binding_object . set_username ( user1 );  binding_object . set_policyname ( partition-admin );  binding_object . set_priority ( 1 );  base_response   result   =   systemuser_systemcmdpolicy_binding . add ( nitroService , binding_object );   .NET - Sample code to specify command policy for partition user  systemuser_systemcmdpolicy_binding   binding_object   =   new   systemuser_systemcmdpolicy_binding ();  binding_object . username   =   user1 ;  binding_object . policyname   =   partition-admin ;  binding_object . priority   =   1 ;  base_response   result   =   systemuser_systemcmdpolicy_binding . add ( nitroService , binding_object );   Python - Sample code to specify command policy for partition user  binding_object   =   systemuser_systemcmdpolicy_binding ()  binding_object . username   =   user1  binding_object . policyname   =   partition-admin  binding_object . priority   =   1  result   =   systemuser_systemcmdpolicy_binding . add ( nitroService , binding_object )", 
            "title": "Specifying Command Policy for Partition Users"
        }, 
        {
            "location": "/usecases/#specifying-the-admin-partition-vlan-or-bridgegroup", 
            "text": "Specify the VLANs or bridgegroups to be associated with the partition. This step ensures network isolation of the traffic. Traffic received on the interfaces of the VLAN or bridgegroup is isolated from the traffic of other partitions.  Using REST APIs through HTTP  The following example specifies a VLAN for an admin partition.  Request  HTTP Method:  PUT  URL:  http://\\ /nitro/v1/config/nspartition_vlan_binding/partition-dept1  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     nspartition_vlan_binding :  \n     {  \n     partitionname : partition-dept1 ,  \n     vlan : 2  \n     }   }       Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The following sample code specifies a VLAN for an admin partition.  Java - Sample Code to specify the VLAN  nspartition_vlan_binding   nspartition_vlan_binding_object   =   new   nspartition_vlan_binding ();  nspartition_vlan_binding_object . set_vlan ( 2 );  nspartition_vlan_binding_object . set_partitionname ( partition-dept1 );  base_response   result   =   nspartition_vlan_binding . add ( nitroService ,   nspartition_vlan_binding_object );   .NET - Sample code to specify the VLAN  nspartition_vlan_binding   nspartition_vlan_binding_object   =   new   nspartition_vlan_binding ();  nspartition_vlan_binding_object . vlan   =   2 ;  nspartition_vlan_binding_object . partitionname   =   partition-dept1 ;  base_response   result   =   nspartition_vlan_binding . add ( nitroService ,   nspartition_vlan_binding_object );   Python - Sample code to specify the VLAN  nspartition_vlan_binding_object   =   nspartition_vlan_binding ()  nspartition_vlan_binding_object . vlan   =   2  nspartition_vlan_binding_object . partitionname   =   partition-dept1  result   =   nspartition_vlan_binding . add ( nitroService ,   nspartition_vlan_binding_object )", 
            "title": "Specifying the Admin Partition VLAN or Bridgegroup"
        }, 
        {
            "location": "/usecases/#switching-partitions", 
            "text": "If you are associated with multiple admin partitions, you can switch to the required partition.  Using REST APIs through HTTP  The following  example shows how to switch from current partition to a partition named partition-dept2.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/nspartition?action=Switch  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     nspartition :  \n     {  \n     partitionname : partition-dept2  \n     }   }   Response  HTTP Status Code on Success:  201 Created  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  The following sample code switches from current partition to a partition named \"partition-dept2\".  Java - Sample code to switch partitions  nspartition   nspartitionObject   =   new   nspartition ();   vnspartitionObject . set_partitionname ( partition-dept2 );   base_response   result   =   nspartition . Switch ( nitroService ,   nspartitionObject );   .NET - Sample code to switch partitions  nspartition   nspartitionObject   =   new   nspartition ();   nspartitionObject . partitionname   =   partition-dept2 ;   base_response   result   =   nspartition . Switch ( nitroService ,   nspartitionObject );   Python - Sample code to switch partitions  nspartitionObject   =   nspartition ()  nspartitionObject . partitionname   =   partition-dept2  result   =   nspartition . Switch ( nitroService ,   nspartitionObject )", 
            "title": "Switching Partitions"
        }, 
        {
            "location": "/usecases/#managing-appexpert-applications", 
            "text": "The following sections talks about exporting and importing an AppExpert application using NITRO APIs.", 
            "title": "Managing AppExpert Applications"
        }, 
        {
            "location": "/usecases/#exporting-an-appexpert-application", 
            "text": "This topic covers exporting an AppExpert application by using REST APIs through HTTP or SDKs.   Using REST APIs through HTTP  To export an AppExpert application, specify the parameters needed for the export operation in the apptemplateinfo object. Optionally, you can specify basic information about the AppExpert application template, such as the author of the configuration, a summary of the template functionality, and the template version number, in the template_info object. This information is stored as part of the template file that is created.  For example, to export an AppExpert application named MyApp1.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/apptemplateinfo?action=export  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     apptemplateinfo :  \n     {  \n         appname : MyApp1 ,  \n         apptemplatefilename : BizAp.xml ,  \n         template_info :  \n         {  \n             templateversion_major : 2 ,  \n             templateversion_minor : 1 ,  \n             author : XYZ ,  \n             introduction : Intro ,  \n             summary : Summary  \n         }  \n     }   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  To export an AppExpert application, you must do the following:    Instantiate the com.citrix.netscaler.nitro.resource.config.app.application class.  Note.  For the python SDK, the package path is of the form nssrc.com.citrix.netscaler......    Configure the properties of the AppExpert locally.   Export the AppExpert application.   The following samples export an AppExpert application named MyApp1.  JAVA - sample code to export an AppExpert application  application   myapp   =   new   application ();   myapp . set_appname ( MyApp1 );   myapp . set_apptemplatefilename ( myapp_template );   application . export ( ns_session , myapp );   .NET - sample code to export an AppExpert application  application   myapp   =   new   application ();   myapp . appname   =   MyApp1 ;   myapp . apptemplatefilename   =   myapp_template ;   application . export ( ns_session , myapp );   Python - sample code to export an AppExpert application  myapp   =   application ()  myapp . appname   =   MyApp1  myapp . apptemplatefilename   =   myapp_template  application . export ( ns_session ,   myapp )", 
            "title": "Exporting an AppExpert Application"
        }, 
        {
            "location": "/usecases/#importing-an-appexpert-application", 
            "text": "This topic covers importing an AppExpert application by using REST APIs through HTTP or SDKs.  Using REST APIs through HTTP  To import an AppExpert application, specify the parameters needed for the import operation in the apptemplateinfo object.  For example, to import an AppExpert application named MyApp1.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/apptemplateinfo?action=import  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {   apptemplateinfo :   {  \n     apptemplatefilename : BizAp.xml ,  \n     deploymentfilename : BizAp_deployment.xml ,  \n     appname : MyApp1   }   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  To import an AppExpert application by specifying different deployment settings.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/apptemplateinfo?action=import  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\    Content-Type:application/json  Request Payload:  {  \n     apptemplateinfo :  \n     {  \n     apptemplatefilename : BizAp.xml ,  \n     appname : Myapp2 ,  \n     deploymentinfo :  \n     {  \n         appendpoint :  \n         [  \n             {  \n                 ipv46 : 11.2.3.8 ,  \n                 port : 80 ,  \n                 servicetype : HTTP  \n             }  \n         ],  \n         service :  \n         [  \n             {  \n                 ip : 12.3.3.15 ,    \n                 port : 80 ,  \n                 servicetype : SSL  \n             },  \n             {  \n                 ip : 14.5.5.16 ,    \n                 port : 443 ,  \n                 servicetype : SSL  \n             }  \n         ]  \n     }  \n     }   }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Using REST APIs through SDKs  To import an AppExpert application, you must do the following:    Instantiate the com.citrix.netscaler.nitro.resource.config.app.application class.  Note . For the python SDK, the package path is of the form nssrc.com.citrix.netscaler......    Configure the properties of the AppExpert locally.   Import the AppExpert application.   The following samples import an AppExpert application named MyApp1.  Java - sample code to import an AppExpert application  application   myapp   =   new   application ();  myapp . set_appname ( MyApp1 );  myapp . set_apptemplatefilename ( myapp_template );  application . Import ( ns_session , myapp );   .NET - sample code to import an AppExpert application  application   myapp   =   new   application ();   myapp . appname   =   MyApp1 ;   myapp . apptemplatefilename   =   myapp_template ;   application . Import ( ns_session , myapp );   Python - sample code to import an AppExpert application  myapp   =   application ()  myapp . appname   =   MyApp1  myapp . apptemplatefilename   =   myapp_template  application . Import ( ns_session ,   myapp )", 
            "title": "Importing an AppExpert Application"
        }, 
        {
            "location": "/usecases/#automate-netscaler-upgrade-and-downgrade-with-a-single-api", 
            "text": "You can use the \"install\" API to automate not just installation, but also an upgrade or a downgrade of the build on a NetScaler appliance. You can specify a local or remote location for the build file.  Using REST APIs through HTTP  For example, the following information describes a downgrade to NetScaler release 10.5 build 46, using a local  build file:  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/install  Request Headers:    Cookie:NITRO_AUTH_TOKEN=\\  Content-Type: application/json  Request Payload:  {  \u201cinstall\u201d:  { \n\n         \u201curl\u201d:   \u201cfile:///var/tagma/build_tagma_46_nc.tgz\u201d \n\n\n     }                             }        Response  HTTP status Code on Success:  201 Created  209 Netscaler specific warning  Note.  when \u201cy\u201d option is not specified and warning is enabled, API returns \u201c1120 - The configuration must be saved and the system rebooted for these settings to take effect\u201d message in X-NITRO-WARNING.  HTTP Status Code on Failure:  599 Netscaler specific error  Additional parameters available in the install API request payload    \u201cy\u201d:\u201ctrue\u201d -  This option enables reboot on successful loading of kernel.    \u201cL\u201d:\u201ctrue\u201d -  This option enables the callhome feature.    Supported formats for the \"url\" parameter (specifies the location of the tar.gz file for the build)   http://[user]:[password]@host/path/to/file  https://[user]:[password]@host/path/to/file  sftp://[user]:[password]@host/path/to/file  scp://[user]:[password]@host/path/to/file  ftp://[user]:[password]@host/path/to/file  file://path/to/file   Possible errors   Installation failed. [No space on file system. Please check the log file /var/tmp/install\u200b]  Installation failed. [File transfer failed]  Installation failed. [File does not exist]  Installation failed. [Failed to copy file to /var/tmp]  Installation failed. [Extraction failed, invalid tar archive?\u200b]  Installation failed. [Invalid file transfer protocol]  Installation failed. [Unable to create temporary directory]  Installation failed. [Please check the log file /var/tmp/install for more information]", 
            "title": "Automate NetScaler Upgrade and Downgrade with a Single API"
        }, 
        {
            "location": "/usecases/#handle-multiple-nitro-calls-in-a-single-request", 
            "text": "You can use the \"macroapi\" API to create, update, and delete multiple resources simultaneously, and thereby minimize network traffic. For example, multiple load-balancing virtual servers can be added in a single API.  To account for the failure of some operations within the bulk operation, NITRO allows configuring one of the following behaviors.   EXIT . When the first error is encountered, execution stops. The commands that were executed before the error are committed.  ROLLBACK . When the first error is encountered, execution stops. The commands that were executed before the error are rolled back. Rollback is supported for add and bind commands only.  CONTINUE . All the commands in the request are executed even if some commands fail.   You must specify the behavior of the bulk operation in the request header, by using the X-NITRO-ONERROR parameter.  Advantages  Heterogeneous resources can be configured with a single API. For example, multiple load balancing virtual servers and multiple services can be created, and services can be bound to load balancing virtual servers in a single API.  Limitations  Only homogenous operation is supported in this API. For example, multiple load balancing virtual servers can be created but cannot be updated or deleted in the same API.\n\u201crollback\u201d is supported only on \u201cadd\u201d and \u201cbind\u201d operations.  Using REST APIs through HTTP  To add multiple load balancing resources in a single request:  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/macroapi  Request Headers:  Content-Type: application/json  Cookie: NITRO_AUTH_TOKEN=\\  X-NITRO-ONERROR: exit  Request Payload:  {  lbvserver :[    { name : lbv1 , servicetype : http },  { name : lbv2 , servicetype : http }  ],  serviceGroup :   [  {   servicegroupname :   sg1 ,   servicetype :   HTTP   },  {   servicegroupname :   sg2 ,   servicetype :   HTTP   }  ],  lbvserver_servicegroup_binding :[   {   name : lbv1 ,   servicegroupname : sg1   },  {   name : lbv2 ,   servicegroupname : sg2   }  ]  }   Response  HTTP Status Code on Success:  201 Created for the add operation and 200 OK for the update operation.  HTTP Status Code on Failure:  207 Multi Status with error details in the response payload. For more information, see Error Handling.  For deleting multiple resources using macroapi, use POST HTTP method with query parameter \u201caction=remove\u201d in the URI.", 
            "title": "Handle Multiple NITRO Calls in a Single Request"
        }, 
        {
            "location": "/usecases/#simplify-management-operations-with-an-idempotent-api", 
            "text": "You can add or update NetScaler resources seamlessly, with a single API. Previously, an attempt to add a resource that was already configured, or to update a resource that was not yet configured, caused an error.  If you enable the \u201cidempotent\u201d query parameter (\u201cidempotent=yes\u201d) in any POST request, NITRO executes the request in an idempotent manner. An idempotent HTTP method is an HTTP method that can be called many times without different results, and POST is desinged as a non-idempotent method.  Note.  Use POST request with \u201cidempotent\u201d option if you are unsure whether the resource in the request exists on NetScaler or not.  This API  hides the inconsistencies between parameter lists of POST and PUT operations. For some NITRO resources, certain parameters are accepted only on PUT not in POST, or vice versa. By using this idempotent API, you can overcome such challenges.  Limitations  If a resource is already configured and you try to add the same resource again, the resource is  \"updated,\" but the arguments already present are not unset. For example, if a  load balancing virtual server named  \"V1\" is configured to use the round robin load balancing method, and you try to ADD an lbvserver named \"V1\" without specifying a value for \"lbmethod\" in the request, the NetScaler appliance does not  unset \"lbmethod\" to its default value of \"leastconnection.\"  Using REST APIs through HTTP  In the following example, \u201cpreferredntpserver\u201d is allowed only in PUT, but when given in POST request with idempotent=yes, NITRO internally adds the ntpserver and updates it with given properties.  Request  HTTP Method:  POST  URL:  http://\\ /nitro/v1/config/ntpserver?idempotent=yes  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\  Content-Type: application/json  Request Payload:  {  \u201cntpserver\u201d:{\u201cservername\u201d:\u201cntp1\u201d,\u201cminpoll\u201d:\u201c4,    \u201cpreferredntpserver\u201d:   \u201cyes\u201d }  }   Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.", 
            "title": "Simplify Management Operations with an Idempotent API"
        }, 
        {
            "location": "/usecases/#retrieve-bindings-in-bulk", 
            "text": "This topic covers retrieving bindings information in bulk by using REST APIs through HTTP.  Using REST APIs through HTTP  You can use a bulk GET API to fetch bindings of all the entities of a given entity type.  For example, you can fetch bindings of all the load balancing virtual servers in one call instead of by using multiple GET by \"name\" calls. In the examples below, the NetScaler appliance has the following configuration.   add lb vserver lbv1 http  add lb vserver lbv2 http  add service svc1 10.20.30.40 http 80  add servicegroup sg1 http  bind lb vserver lbv1 svc1  bind lb vserver lbv1 sg1  bind lb vserver lbv2 svc1  bind lb vserver lbv2 sg1   Example - To fetch bindings of all lbvservers, in a single NITRO API  Request  HTTP Method:  GET  URL:  http://\\ /nitro/v1/config/lbvserver_binding?bulkbindings=yes  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\  Accept: application/json  Response  HTTP Status Code on Success:  200 OK  HTTP Status Code on Failure:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors). The response payload provides details of the error.  Response Header:  Content-Type:application/json  Response Payload:  {  errorcode : 0 ,  message : Done ,  severity : NONE ,  lbvserver_binding :[  { \n\n     name : lbv1 , \n\n     lbvserver_service_binding :[ \n\n     { \n\n         name : lbv1 , \n\n         servicename : svc1 , \n\n         stateflag : 536936451 , \n\n         ipv46 : 10.20.30.40 , \n\n         port : 80 , \n\n         servicetype : HTTP , \n\n         curstate : DOWN , \n\n         weight : 1 , \n\n         dynamicweight : 0 , \n\n         cookieipport : , \n\n         vserverid : mcw1 , \n\n         vsvrbindsvcip : 10.20.30.40 , \n\n         vsvrbindsvcport : 80 , \n\n         preferredlocation : \n\n     } \n\n     ], \n\n     lbvserver_servicegroup_binding :[ \n\n     { \n\n         name : lbv1 , \n\n         servicegroupname : sg1 , \n\n         stateflag : 536936464 , \n\n         servicename : sg1 \n\n     } \n\n     ]  },  { \n\n     name : lbv2 , \n\n     lbvserver_service_binding :[ \n\n     { \n\n         name : lbv2 , \n\n         servicename : svc1 , \n\n         stateflag : 536936451 , \n\n         ipv46 : 10.20.30.40 , \n\n         port : 80 , \n\n         servicetype : HTTP , \n\n         curstate : DOWN , \n\n         weight : 1 , \n\n         dynamicweight : 0 , \n\n         cookieipport : , \n\n         vserverid : mcw2 , \n\n         vsvrbindsvcip : 10.20.30.40 , \n\n         vsvrbindsvcport : 80 , \n\n         preferredlocation : \n\n     }         \n\n\n     ], \n\n     lbvserver_servicegroup_binding :[ \n\n     { \n\n         name : lbv2 , \n\n         servicegroupname : sg1 , \n\n         stateflag : 536936464 , \n\n         servicename : sg1 \n\n     }         \n\n\n     ]  }  ]  }   Example - To fetch only \u201cservice\u201d bindings of all lbvservers  Request  HTTP Method:  GET  URL:  http://\\ /nitro/v1/config/lbvserver_service_binding?bulkbindings=yes  Request Header:  Content-Type:application/json  Response  Response Payload:  {   errorcode : 0 ,  message : Done ,  severity : NONE ,  lbvserver_service_binding :[  \n\n     {  \n\n         name : lbv1 , \n\n         servicename : svc1 , \n\n         stateflag : 536936451 , \n\n         ipv46 : 10.20.30.40 , \n\n         port : 80 , \n\n         servicetype : HTTP , \n\n         curstate : DOWN , \n\n         weight : 1 , \n\n         dynamicweight : 0 , \n\n         cookieipport : , \n\n         vserverid : mcw1 , \n\n         vsvrbindsvcip : 10.20.30.40 , \n\n         vsvrbindsvcport : 80 , \n\n         preferredlocation : \n\n     }, \n\n     {  \n\n         name : lbv2 , \n\n         servicename : svc1 , \n\n         stateflag : 536936451 , \n\n         ipv46 : 10.20.30.40 , \n\n         port : 80 , \n\n         servicetype : HTTP , \n\n         curstate : DOWN , \n\n         weight : 1 , \n\n         dynamicweight : 0 , \n\n         cookieipport : , \n\n         vserverid : mcw2 , \n\n         vsvrbindsvcip : 10.20.30.40 , \n\n         vsvrbindsvcport : 80 , \n\n         preferredlocation : \n\n     }    \n\n\n     ]  }", 
            "title": "Retrieve Bindings in Bulk"
        }, 
        {
            "location": "/usecases/#view-individual-counter-information", 
            "text": "This topic viewing individual counter information by using REST APIs through HTTP.   Using REST APIs through HTTP  To view global counters that are not otherwise shown by the NetScaler CLI or the GUI, you can now use the following URL format.  URL : http://\\ /nitro/v1/stat/nsglobalcntr?args=counters:\\ ;\\  Previously, these counter values could be viewed only through the \u201cnsconmsg\u201d Shell command.  Note.  You can view only global counters of type ULONG and only up to 12 counters in a single request.  Example  This example shows how to view the individual counters http_tot_Requests and http_tot_Responses. Enter the details in the system or tool that you are using to generate HTTP or HTTPS requests.  Request  HTTP Method:  GET  URL:  http://\\ /nitro/v1/stat/nsglobalcntr?args=counters:http_tot_Requests;http_tot_Responses  Response  {  errorcode :   0 ,  message :   Done ,  severity :   NONE ,  nsglobalcntr :  \n     { \n     http_tot_Requests :   5783 , \n     http_tot_Responses :   5783 \n     }  }", 
            "title": "View Individual Counter Information"
        }, 
        {
            "location": "/usecases/#prevent-xss-and-csrf-attacks-by-disabling-basic-authentication", 
            "text": "As an administrator or a root user, you can now prevent users from making API calls after using basic authentication (such as one-time credentials) to log on. You can use this feature to prevent Cross-Site Scripting (XSS), Cross-Site Request Forgery (CSRF), and other types of attacks.  Procedure for Disabling Basic Authentication  Use the following formats to enter the details in the system or tool that you are using to generate HTTP or HTTPS requests.  Using REST APIs through HTTP  Request  URL:  http://\\ /nitro/v1/config/systemparameter  HTTP Method:  PUT  Request Headers:  Cookie:NITRO_AUTH_TOKEN=\\  Content-Type:application/json  Request Payload:  { \n     systemparameter :{   basicauth : disabled ,}  }   Response  HTTP Status Code on Success:  200 OK  After you disable the basic authentication, access to NetScaler through the one-time password is denied and an error message is displayed.  Example  This example shows what happens if you make any API call after basic authentication has been disabled.   Request  URL:  http://10.102.201.159/nitro/v1/config/lbvserver  HTTP Method:  GET  After you make a GET call, the a logon screen appears. If you click  Log In  after entering the logon credentials, then you get the following response, which shows an error message.   Response  { errorcode :   1244 , message :   Authentication Failed: Use of Basic Authentication is Disabled. , severity :   ERROR  }", 
            "title": "Prevent XSS and CSRF Attacks by Disabling Basic Authentication"
        }, 
        {
            "location": "/error-and-exception-handling/", 
            "text": "Error and Exception Handling\n\n\nThis section covers error handling support for NITRO APIs and exception handling support for SDKs.\n\n\nError Handling for NITRO APIs\n\n\nIn case of a failed request, NITRO provides the required information through the HTTP status code and in the response header and response payload.\n\n Error in a Single Resource Operation\n\n Error in a Bulk Operations\n* Warnings\n\n\nError in a Single Resource Operation\n\n\nThe response of a single erroneous operation is as follows:\n\n\nResponse\n\n\nHTTP Status Code:\n 4xx \\\n (for general HTTP errors) or 5xx \\\n (for NetScaler-specific errors)\n\n\nResponse Header:\n Content-Type:application/json\n\n\nResponse Payload:\n\n\n{\n \n    \nerrorcode:\n \n\\\nError\n \ncode\n,\n \n    \nmessage:\n \n\\\nError message\n,\n \n    \nseverity:\n \nERROR\n \n\n}\n\n\n\n\n\n\nError in a Bulk Operation\n\n\nWhen there is a failure in one of the bulk operations, the response payload gives a combination of success and failure (depends on the value set for X-NITRO-ONERROR in the request header).\n\n\nResponse\n\n\nHTTP Status Code:\n 207 Multi Status\n\n\nResponse Header:\n Content-Type:application/json\n\n\nResponse Payload when X-NITRO-ONERROR is set to continue:\n\n\nWhen the first operation fails, the request is not terminated. The response payload shows the error details of the failed operation and the success status of the other operations.\n\n\n{\n \n    \nerrorcode\n:\n \n1243\n,\n \n    \nmessage\n:\n \nBulk operation failed\n,\n \n    \nseverity\n:\n \nERROR\n,\n \n    \nresponse\n:\n \n    \n[\n \n        \n{\n \n            \nerrorcode\n:\n \n273\n,\n \n            \nmessage\n:\n \nResource already exists\n,\n \n            \nseverity\n:\n \nERROR\n \n        \n},\n \n        \n{\n \n            \nerrorcode\n:\n \n0\n,\n \n            \nmessage\n:\n \nDone\n,\n \n            \nseverity\n:\n \nNONE\n \n        \n}\n \n    \n]\n \n\n}\n\n\n\n\n\n\nResponse Payload when X-NITRO-ONERROR is set to exit:\n\n\nWhen the first operation fails, the request is terminated. The response payload only shows the error details of the failed operation.\n\n\n{\n \n    \nerrorcode\n:\n \n1243\n,\n \n    \nmessage\n:\n \nBulk operation failed\n,\n \n    \nseverity\n:\n \nERROR\n,\n \n    \nresponse\n:\n \n    \n[\n \n        \n{\n \n            \nerrorcode\n:\n \n273\n,\n \n            \nmessage\n:\n \nResource already exists\n,\n \n            \nseverity\n:\n \nERROR\n \n        \n}\n \n    \n]\n \n\n}\n\n\n\n\n\n\nWarnings in NITRO Operations\n\n\nWarnings can be captured by specifying the \"warning\" query parameter as \"yes\" when performing any NITRO operation. For example, to get warnings while connecting to the NetScaler appliance, the URL is as follows:\n\n\nhttp://\\\n/nitro/v1/config/llbvserver?warning=yes\n\n\nIf there are any warnings, the response is as follows:\n\n\nResponse\n\n\nHTTP Status Code:\n 209 X-NITRO-WARNING\n\n\nResponse Header:\n X-NITRO-WARNING \u21921067 - Feature(s) not enabled [LB]\n\n\nException Handling Support for SDKs\n\n\nThe status of a NITRO request is captured in the com.citrix.netscaler.nitro.exception.nitro_exception class. This class provides the following details of the exception:\n\n\n\n\nSession ID\n. The session in which the exception occurred.\n\n\nSeverity\n. The severity of the exception: error or warning. By default, only errors are captured. To capture warnings, you must set the warning flag to true, while connecting to the appliance.\n\n\nError code\n. The status of the NITRO request. An error code of 0 indicates that the NITRO request is successful. A non-zero error code indicates an error in processing the NITRO request.\n\n\nError message\n. Provides a brief description of the exception.\n\n\n\n\nFor a list of error codes, see the errorlisting.html file available in the \\\n/doc/api_reference folder.", 
            "title": "Error and Exception Handling"
        }, 
        {
            "location": "/error-and-exception-handling/#error-and-exception-handling", 
            "text": "This section covers error handling support for NITRO APIs and exception handling support for SDKs.", 
            "title": "Error and Exception Handling"
        }, 
        {
            "location": "/error-and-exception-handling/#error-handling-for-nitro-apis", 
            "text": "In case of a failed request, NITRO provides the required information through the HTTP status code and in the response header and response payload.  Error in a Single Resource Operation  Error in a Bulk Operations\n* Warnings  Error in a Single Resource Operation  The response of a single erroneous operation is as follows:  Response  HTTP Status Code:  4xx \\  (for general HTTP errors) or 5xx \\  (for NetScaler-specific errors)  Response Header:  Content-Type:application/json  Response Payload:  {  \n     errorcode:   \\ Error   code ,  \n     message:   \\ Error message ,  \n     severity:   ERROR   }   Error in a Bulk Operation  When there is a failure in one of the bulk operations, the response payload gives a combination of success and failure (depends on the value set for X-NITRO-ONERROR in the request header).  Response  HTTP Status Code:  207 Multi Status  Response Header:  Content-Type:application/json  Response Payload when X-NITRO-ONERROR is set to continue:  When the first operation fails, the request is not terminated. The response payload shows the error details of the failed operation and the success status of the other operations.  {  \n     errorcode :   1243 ,  \n     message :   Bulk operation failed ,  \n     severity :   ERROR ,  \n     response :  \n     [  \n         {  \n             errorcode :   273 ,  \n             message :   Resource already exists ,  \n             severity :   ERROR  \n         },  \n         {  \n             errorcode :   0 ,  \n             message :   Done ,  \n             severity :   NONE  \n         }  \n     ]   }   Response Payload when X-NITRO-ONERROR is set to exit:  When the first operation fails, the request is terminated. The response payload only shows the error details of the failed operation.  {  \n     errorcode :   1243 ,  \n     message :   Bulk operation failed ,  \n     severity :   ERROR ,  \n     response :  \n     [  \n         {  \n             errorcode :   273 ,  \n             message :   Resource already exists ,  \n             severity :   ERROR  \n         }  \n     ]   }   Warnings in NITRO Operations  Warnings can be captured by specifying the \"warning\" query parameter as \"yes\" when performing any NITRO operation. For example, to get warnings while connecting to the NetScaler appliance, the URL is as follows:  http://\\ /nitro/v1/config/llbvserver?warning=yes  If there are any warnings, the response is as follows:  Response  HTTP Status Code:  209 X-NITRO-WARNING  Response Header:  X-NITRO-WARNING \u21921067 - Feature(s) not enabled [LB]", 
            "title": "Error Handling for NITRO APIs"
        }, 
        {
            "location": "/error-and-exception-handling/#exception-handling-support-for-sdks", 
            "text": "The status of a NITRO request is captured in the com.citrix.netscaler.nitro.exception.nitro_exception class. This class provides the following details of the exception:   Session ID . The session in which the exception occurred.  Severity . The severity of the exception: error or warning. By default, only errors are captured. To capture warnings, you must set the warning flag to true, while connecting to the appliance.  Error code . The status of the NITRO request. An error code of 0 indicates that the NITRO request is successful. A non-zero error code indicates an error in processing the NITRO request.  Error message . Provides a brief description of the exception.   For a list of error codes, see the errorlisting.html file available in the \\ /doc/api_reference folder.", 
            "title": "Exception Handling Support for SDKs"
        }
    ]
}